{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accueil","text":""},{"location":"#accueil","title":"Accueil","text":"<p>Cours, exercices et autres ressources pour mes \u00e9l\u00e8ves de 1\u00e8re en sp\u00e9cialit\u00e9 NSI au lyc\u00e9e \u00c9mile Combes \u00e0 Pons.</p> <p>Edsger W. Dijkstra </p> <p>Computer Science is no more about computers than astronomy is about telescopes.</p>"},{"location":"#liens-utiles","title":"Liens utiles","text":"<ul> <li>Programme en vigueur de sp\u00e9cialit\u00e9 NSI de 1\u00e8re g\u00e9n\u00e9rale</li> </ul>"},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/","title":"Repr\u00e9sentation des entiers","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#representation-des-entiers","title":"Repr\u00e9sentation des entiers","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#introduction","title":"Introduction","text":"<p>Un ordinateur ne manipule que des 0 et des 1. Que cela soit un nombre, du texte, une image, une vid\u00e9o etc. toutes ces donn\u00e9es sont repr\u00e9sent\u00e9es par les syst\u00e8mes informatiques comme des suites de 0 et de 1. </p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#la-base-de-la-base","title":"La base de la base","text":"<p>La s\u00e9dentarisation fut un bouleversement profond de nos soci\u00e9t\u00e9s. Il fallait maintenant par exemple g\u00e9rer des stocks et des flux de nourriture et r\u00e9partir des superficies aux agriculteurs. D'o\u00f9 la n\u00e9cessit\u00e9 de compter les grains, les hommes, les b\u00eates et la superficie des champs, c'est la naissance des nombres et des math\u00e9matiques.</p> <p>Qu'est-ce qu'un nombre finalement ? Si cette question pourrait nous emmener dans les tr\u00e9fonds de la th\u00e9orie des ensembles en math\u00e9matiques, il est plut\u00f4t usuel de d\u00e9finir un nombre comme une valeur arithm\u00e9tique repr\u00e9sentant une certaine quantit\u00e9. Il ne faut pas confondre un nombre (sa v\u00e9ritable valeur) et sa repr\u00e9sentation (comment on l'\u00e9crit symboliquement) ! </p> <p></p> <p>Une premi\u00e8re repr\u00e9sentation d'un nombre naturel serait d'aligner b\u00eatement des traits. H\u00e9las, cela devient vite fastidieux pour l'\u00e9criture de grands nombres. Deux id\u00e9es : former des paquets et d\u00e9finir des symboles, les chiffres, pour compter les unit\u00e9s. Regroupons nos b\u00e2tons en paquet de 10 :</p> <p></p> \\[ (25)_{10} = 2 \\times 10 + 5 \\] <p>Puis le raisonnement se poursuit, si le nombre de paquets est trop grand, on regroupe les paquets par paquets de 10, ce sont les centaines. Et on poursuit ce raisonnement pour les millers, les dizaines de milliers etc.</p> <p>Le nombre de chiffres utilis\u00e9 d\u00e9finit la base utilis\u00e9, c'est aussi choisir la \u00ab taille \u00bb du paquet. La base d\u00e9cimale, la base 10, utilise 10 chiffres : 0, 1, 2, 3, ..., 9. Suivant la notation d'agr\u00e9gation de ces symboles (la num\u00e9ration positionnelle), il s'en suit cette d\u00e9composition : </p> \\[ (275)_{10} = 2 \\times 100 + 7 \\times 10 + 5 \\times 1 \\] <p>On pr\u00e9f\u00e8ra la notation avec des puissances de 10 (la base) :</p> \\[ (8275)_{10} = 8 \\times 10^3 + 2 \\times 10^2 + 7 \\times 10^1 + 5 \\times 10^0 \\] <p>\u00c0 retenir</p> <p>En base d\u00e9cimale, la position de chaque chiffre dans l'\u00e9criture du nombre correspond \u00e0 la puissance de 10 par laquelle on le multiplie.</p> <p>Mais que se passerait-il s'il on avait un chiffre de moins ? La base 9 !</p> \\[ (275)_{9} = 2 \\times 9^2 + 7 \\times 9^1 + 5 \\times 9^0 = (230)_{10} \\] <p>Plus g\u00e9n\u00e9ralement, un nombre \\(N\\) d\u00e9finit par la s\u00e9quence de \\(n\\) chiffres \\((c_0, c_1, \\ldots c_{n-1})\\) (on peut d\u00e9finir une s\u00e9quence infini en posant \\(c_i = 0\\) pour \\(i \\geq n\\)) dans sa base \\(B\\) se d\u00e9compose comme : $$ N_B = c_0 \\cdot B^0 + c_1 \\cdot B^1 + \\ldots + c_{n-1} \\cdot B^{n-1} $$ Ou dans sa formulation plus compact : $$ N_B = \\sum_{i = 0}^{n-1} c_i B^i $$ Un nombre dans la base 2 (la plus petite des bases), la base binaire, n'utilise donc que 2 chiffres, 0 et 1, appel\u00e9s bit (pour binary digit en anglais), ou bool\u00e9en, ou encore chiffre binaire. C'est cette base que tout syst\u00e8me informatique utilise.</p> <p>\u00c0 retenir</p> <p>Pour passer d'un nombre d'une base quelconque vers la base d\u00e9cimale, on le d\u00e9compose puis on fait le calcul normalement.</p> <p>Exercices</p> <p>Convertir ces nombres en base d\u00e9cimale :</p> <ul> <li> <p>\\((131)_6\\)</p> </li> <li> <p>\\((420)_5\\)</p> </li> <li> <p>\\((1515)_8\\)</p> </li> <li> <p>\\((716)_4\\)</p> </li> <li> <p>\\((321)_4\\)</p> </li> </ul>"},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#la-base-binaire-base-2","title":"La base binaire (base 2)","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#pourquoi-la-base-binaire-en-informatique","title":"Pourquoi la base binaire en informatique ?","text":"<p>Un syst\u00e8me informatique utilise diff\u00e9rents ph\u00e9nom\u00e8nes physiques pour manipuler, transmettre ou m\u00e9moriser une information cod\u00e9e en base binaire suivant donc deux \u00e9tats :</p> <ul> <li> <p>Courant \u00e9lectrique : Tension nulle ou tension non nulle.</p> </li> <li> <p>Aimantation : Aimantation dans un sens ou dans l'autre.</p> </li> <li> <p>Lumi\u00e8re : Lumi\u00e8re ou pas de lumi\u00e8re.</p> </li> <li> <p>etc.</p> </li> </ul> <p>Cette simplicit\u00e9 a un grand avantage, sa fiabilit\u00e9. En effet, il est plus facile de distiguer deux valeurs dans des signaux analogiques (une tension \u00e9lectrique par exemple) bruit\u00e9s. De plus, la sobri\u00e9t\u00e9 de l'arithm\u00e9tique en binaire (addition, soustraction etc.) permet l'\u00e9laboration de circuits \u00e9lectroniques moins complexes. </p> <p>Anecdote</p> <p>En 1958, Les sovi\u00e9tiques ont d\u00e9velopp\u00e9 un ordinateur ternaire, le Setun, qui s'est av\u00e9r\u00e9 plus rapide, plus fiable, plus durable et moins gourmand en \u00e9nergie. H\u00e9las, ce projet de 7 ans fut consid\u00e9r\u00e9 comme un caprice d'universitaires et delaiss\u00e9 au profit des syst\u00e8mes binaires.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#compter-en-binaire","title":"Compter en binaire","text":"Base 10 Base 2 0 0 1 1 2 10 3 11 4 100 5 101 6 110 7 111 8 1000 9 1001 10 1010 11 1011 12 1100 <ul> <li> <p>avec 1 bit on peut coder 2 valeurs (0 et 1)</p> </li> <li> <p>avec 2 bits on peut coder 4 valeurs (00, 01, 10 et 11)</p> </li> <li> <p>avec 3 bits on peut coder 8 valeurs (000, 001, 010, 011, 100, 101, 110, 111)</p> </li> <li> <p>avec \\(n\\) bits on peut coder... \\(2^n\\) valeurs (dont le nombre maximal serait \\(2^n - 1\\))</p> </li> </ul> <p>Question</p> <p>Jusqu'\u00e0 combien peut-on compter avec nos mains en base binaire ?</p> <p>\u00c0 retenir</p> <p>Un regroupement de 8 bits est appel\u00e9 un octet (ou byte en anglais).</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#conversion-base-binaire-vers-base-decimale","title":"Conversion : Base binaire vers base d\u00e9cimale","text":"<p>Normalement, vous savez d\u00e9j\u00e0 le faire !</p> <p>Exemple</p> <p>Convertissons \\((10110011)_2\\) (un octet) en base d\u00e9cimale. On d\u00e9compose :</p> \\[ \\begin{align*} (10110011)_2 &amp;= 1 \\times 2^7 + 0 \\times 2^6 + 1 \\times 2^5 + 1 \\times 2^4 + 0 \\times 2^3 + 0 \\times 2^2 + 1 \\times 2^1 + 1 \\times 2^0 \\\\ &amp;= 2^7 + 2^5 + 2^4 + 2^1 + 2^0 \\\\ &amp;= 128 + 32 + 16 + 2 + 1 \\\\ &amp;= 179 \\end{align*} \\] <p>Finalement, il suffit de retenir sa table de puissance de 2... \u00e0 savoir, 1, 2, 4, 8, 16, 32, 64, 128 etc. N'h\u00e9sitez pas \u00e0 installer le jeu 2048 sur votre t\u00e9l\u00e9phone !</p> <p>Exercice</p> <p>Convertir du binaire vers le d\u00e9cimal.</p> <ul> <li> <p>\\((1010)_2\\)</p> </li> <li> <p>\\((101110)_2\\)</p> </li> <li> <p>\\((10001101)_2\\)</p> </li> <li> <p>\\((11111111)_2\\)</p> </li> </ul>"},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#conversion-base-decimale-vers-base-binaire","title":"Conversion : Base d\u00e9cimale vers base binaire","text":"<p>L'op\u00e9ration inverse est de trouver les chiffres qui vont bien dans la d\u00e9composition.</p> \\[ (181)_{10} ~=~ \\textcolor{#ff6188}{?} \\cdot 2^0 ~+~ \\textcolor{#ff6188}{?} \\cdot 2^1 ~+~ \\textcolor{#ff6188}{?} \\cdot 2^2 ~+~ \\textcolor{#ff6188}{?} \\cdot 2^3 ~+~ \\cdots \\] <p>L\u00e0, c'est un peu plus complexe. Il existe deux mani\u00e8res it\u00e9ratives :</p> <ul> <li>l'algorithme de soustraction : on soustrait du nombre la plus grande puissance de 2 possible, et on recommence... plut\u00f4t rapide \u00e0 la main. </li> </ul> <p>Exemple</p> \\[ \\begin{align*} (181)_{10} &amp;= 128 + 53 \\\\ &amp;= 128 + 32 + 21 \\\\ &amp;= 128 + 32 + 16 + 5 \\\\ &amp;= 128 + 32 + 16 + 4 + 1 \\\\ &amp;= 2^7 + 2^5 + 2^4 + 2^2 + 2^0 \\\\ &amp;= (10110101)_2 \\end{align*} \\] <ul> <li>l'algorithme de division : on effectue les divisions successives du nombre par 2. L'\u00e9criture en binaire est donn\u00e9e par les restes lus de bas en haut.</li> </ul> <p></p> <p>Astuce</p> <p>Vous pouvez adapter ces m\u00e9thodes si vous voulez convertir vers une base quelconque ! </p> <p>C'est magique ?</p> <p>Pour se convaincre de la m\u00e9thode, regardons ce que l'on fait math\u00e9matiquement sur un exemple. Convertissons 19 en binaire. Rappelons qu'une division revient \u00e0 \u00e9crire :</p> \\[ \\text{dividende} = \\text{quotient} \\times \\textcolor{#71d4e2}{\\text{diviseur}} + \\textcolor{#ff6188}{\\text{reste}} \\] <p>Ainsi :</p> \\[ 19 = 9 \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{1} \\] <p>On poursuit l'algorithme :</p> \\[ \\begin{align*} 19 &amp;= (4 \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{1}) \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{1} \\\\ &amp;= ((2 \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{0}) \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{1}) \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{1} \\\\ &amp;= (((\\textcolor{#ff6188}{1} \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{0}) \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{0}) \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{1}) \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{1} \\end{align*} \\] <p>Ensuite, on distribue les 2 pour faire appara\u00eetre nos puissances :</p> \\[ \\begin{align*} 19 &amp;= \\textcolor{#ff6188}{1} \\cdot \\textcolor{#71d4e2}{2^4} +  \\textcolor{#ff6188}{0} \\cdot \\textcolor{#71d4e2}{2^3} + \\textcolor{#ff6188}{0} \\cdot \\textcolor{#71d4e2}{2^2} + \\textcolor{#ff6188}{1} \\cdot \\textcolor{#71d4e2}{2} + \\textcolor{#ff6188}{1} \\\\ &amp;= (\\textcolor{#ff6188}{10011})_2 \\end{align*} \\] <p>Ici, on voit bien que le premier reste correspond bien au premier bit (celui tout \u00e0 droite, qu'on appelle le bit de poids faible).</p> <p>D\u00e9finition</p> <p>Le bit de poids fort (resp. de poids faible) est le bit ayant le plus grand (resp. petit) poids ou position, celui de gauche (resp.droite) dans la notation positionnelle habituelle.</p> <p>Exercice</p> <p>Convertir du d\u00e9cimal vers le binaire.</p> <ul> <li> <p>17</p> </li> <li> <p>34</p> </li> <li> <p>68</p> </li> <li> <p>100</p> </li> <li> <p>200</p> </li> </ul> <p>Que remarquez-vous dans l'\u00e9criture binaire quand on passe d'un nombre \u00e0 son double ?</p> <p>Exercice</p> <p>Convertir les \u00e9critures d\u00e9cimales vers la base mentionn\u00e9e.</p> <ul> <li> <p>47 en base 5</p> </li> <li> <p>92 en base 4</p> </li> </ul>"},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#la-base-hexadecimale-base-16","title":"La base hexad\u00e9cimale (base 16)","text":"<p>La base hexad\u00e9cimale (hexa 6, d\u00e9ci 10) est la base utilisant 16 chiffres not\u00e9s 0, 1, 2, ..., 9, A, B, C, D, E, F.</p> <p>Lire ou \u00e9crire en binaire devient vite fastidieux. C'est pourquoi la base hexad\u00e9cimale est tr\u00e8s utile en informatique puisque la conversion entre cette base et la base binaire se fait sans calcul (du fait que \\(16 = 2^4\\)). On regroupe les bits par groupes de 4 et le tour est jou\u00e9 !</p> <p>Soit on a l'habitude, soit on r\u00e9ecrit le tableau suivant :</p> Base 10 Base 16 Base 2 0 0 0 1 1 1 2 2 10 3 3 11 4 4 100 5 5 101 6 6 110 7 7 111 8 8 1000 9 9 1001 10 A 1010 11 B 1011 12 C 1100 13 D 1101 14 E 1110 15 F 1111 <p>Exemple</p> <p>\\((10110011)_2\\) est compos\u00e9 de 2 groupes de 4 bits, \\(1011\\) et \\(0011\\), donc :</p> \\[ (10110011)_2 = (B3)_{16} \\] <p>Le raisonnement inverse est tout aussi imm\u00e9diat.</p> <p>Exercice</p> <ul> <li> <p>Convertir \\((110111)_2\\) en h\u00e9xad\u00e9cimal.</p> </li> <li> <p>Convertir \\((CAFE)_{16}\\) en binaire. </p> </li> </ul> <p>Notation</p> <p>Dans la plupart des langages de programmation, on diff\u00e9rencie :</p> <ul> <li> <p>La base binaire par le pr\u00e9fixe <code>0b</code> (e.g. <code>variable = 0b10110011</code>).</p> </li> <li> <p>La base hexad\u00e9cimale par le pr\u00e9fixe <code>0x</code> (e.g. <code>variable = 0xD3</code>).</p> </li> <li> <p>La base d\u00e9cimale par aucun pr\u00e9fixe particulier.</p> </li> </ul> <p>Repr\u00e9sentation des couleurs</p> <p>Dans le codage RGB 8-bit, une couleur est r\u00e9present\u00e9e par un triplet d'octets correspondant respectivement aux composantes rouges, vertes et bleues. Chacune de ces valeurs est donc un entier compris entre 0 et 255 (intensit\u00e9 nulle \u00e0 maximale), c'est-\u00e0-dire entre 0 et FF en hexad\u00e9cimal : on peut facilement les \u00e9crire avec seulement deux chiffres.</p> <p>Ainsi la couleur rouge pure se note (255, 0, 0), ou simplement en h\u00e9xad\u00e9cimal (FF, 0, 0). G\u00e9n\u00e9ralement, les composantes sont concat\u00e9n\u00e9e et pr\u00e9c\u00e9d\u00e9e d'un #. Ce qui nous donne finalement #FF0000.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/1entier/#quelques-fonctions-python-utiles","title":"Quelques fonctions Python utiles","text":"<p>La fonction <code>bin</code> (respectivement <code>hex</code>) renvoie la repr\u00e9sentation binaire (resp. h\u00e9xad\u00e9cimale) d'un nombre donn\u00e9 sous forme d'une cha\u00eene de caract\u00e8re :</p> <pre><code>&gt;&gt;&gt; bin(42)\n'0b101010'\n&gt;&gt;&gt; hex(42)\n'0x2a'\n</code></pre> <p>R\u00e9ciproquement, on utilise la fonction <code>int</code> pour convertir un nombre \u00e9crit en base quelconque donn\u00e9e (par d\u00e9faut 10) dans une cha\u00eene de caract\u00e8re donn\u00e9e :</p> <pre><code>&gt;&gt;&gt; int('0xCAFE', 16)\n51966\n&gt;&gt;&gt; int('0b111100001111', 2)\n3855\n</code></pre>"},{"location":"1%20%E2%80%93%20Types%20de%20base/2relatif/","title":"Repr\u00e9sentation des entiers relatifs","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/2relatif/#representation-des-entiers-relatifs","title":"Repr\u00e9sentation des entiers relatifs","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/2relatif/#le-bit-de-signe","title":"Le bit de signe","text":"<p>Dans la partie pr\u00e9c\u00e9dente, on a vu comment repr\u00e9senter un nombre entier positif en binaire. On s'interesse maintenant \u00e0 la repr\u00e9sentation des nombres entiers relatifs, et donc il faut \u00e9tendre cette repr\u00e9sentation aux entiers n\u00e9gatifs.</p> <p>Une premi\u00e8re id\u00e9e est de r\u00e9server un bit d'information pour distinguer les nombres postifs des nombres n\u00e9gatifs, c'est le bit de signe : on dit que le nombre est sign\u00e9. </p> <p>Mais o\u00f9 placer ce bit ?</p> <p>Ce bit se situe toujours devant, sur le bit de poids fort, il vaut :</p> <ul> <li> <p>0 si positif \\(+\\)</p> </li> <li> <p>1 si n\u00e9gatif \\(-\\)</p> </li> </ul> <p>De cette mani\u00e8re, si le nombre est positif, la repr\u00e9sentation reste inchang\u00e9e. \u00c0 ce stade, 6 se code <code>110</code> et -6 en <code>1100</code>... mais <code>1100</code> repr\u00e9sente aussi l'entier 14. Pour lever cette ambiguit\u00e9, il faut alors sp\u00e9cifier explicitement la taille en bits de l'entier utilis\u00e9, ce qui indiquera alors la position du bit de signe.</p> <p>Les tailles courantes des entiers</p> <p>La plupart des langages de programmation offrent souvent 4 types d'entiers cod\u00e9s sur 8, 16, 32 ou 64 bits (1, 2, 4 ou 8 octets) que l'on peut d\u00e9finir comme sign\u00e9 ou non suivant l'utilisation souhait\u00e9e. Par exemple en Julia, on peut d\u00e9clarer une variable <code>UInt32</code> ou <code>Int32</code> (<code>U</code> pour Unsgined, non-sign\u00e9).</p> <p>En python, le type <code>int</code> est un peu particulier car il utilise un nombre variable de bits pour stocker un entier, il n'y a donc aucun soucis \u00e0 se faire. Pour s'en convaincre, il suffit d'essayer de calculer une tr\u00e8s grosse puissance. </p> <p>L'entier 6 cod\u00e9 sur un octet sign\u00e9 s'\u00e9crit <code>0000 0110</code>, mais son oppos\u00e9 -6 ? <code>1000 0110</code> ? On peut faire mieux, car cette m\u00e9thode de repr\u00e9sentation a deux inconv\u00e9nients :</p> <ul> <li> <p>0 peut \u00eatre cod\u00e9 par <code>0000 0000</code> (+0) et <code>1000 0000</code> (-0), on perd donc une valeur possible.</p> </li> <li> <p>L'addition entre deux nombres relatifs ne fonctionne plus. On souhaite r\u00e9utiliser les circuits \u00e9lectroniques d'addition binaire classiques !</p> </li> </ul> <p>Pour palier \u00e0 ces probl\u00e8mes, il existe une autre m\u00e9thode qui consiste \u00e0 repr\u00e9senter un entier relatif par un entier naturel, le compl\u00e9ment \u00e0 2.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/2relatif/#le-complement-a-2","title":"Le compl\u00e9ment \u00e0 2","text":"<ul> <li> <p>En binaire non-sign\u00e9 : Sur 8 bits, on repr\u00e9sente les entiers positifs de 0 \u00e0 255 (inclus). Les entiers dont le bit de poids fort est \u00e9gal \u00e0 <code>0</code> sont compris entre 0 et 127, et ceux dont le bit de poids fort est \u00e9gal \u00e0 <code>1</code> sont compris entre 128 et 255. Rien de nouveau donc.</p> </li> <li> <p>En binaire sign\u00e9 : Sur 8 bits, les nombres de 0 \u00e0 127 conservent la m\u00eame repr\u00e9sentation (positifs, car avec 0 en bit de poids fort). L'astuce est d'ensuite repr\u00e9senter les entiers n\u00e9gatifs de -128 \u00e0 -1 pour les nombres donc le bit de poids fort est \u00e9gal \u00e0 <code>1</code>.</p> </li> </ul> <p></p> <p>Et l'addition marche parfaitement 127 + (-128) = <code>0111 1111</code> + <code>1000 0000</code> = <code>1111 1111</code> = -1 ! On peut donc utiliser les m\u00eames circuits \u00e9lectroniques d'addition pour les soustractions.</p> <p>Un bit en moins ?</p> <p>Si un octet peut coder un nombre entre 0 et 255, un octet sign\u00e9 lui ne pourra coder qu'un nombre entre -127 et 128 ! On represente cependant toujours le m\u00eame nombre de valeurs, c'est-\u00e0-dire \\(2^n\\) valeurs.</p> <p>\u00c9crire la repr\u00e9sentation binaire d'un entier n\u00e9gatif</p> <p>Il existe une m\u00e9thode rapide pour obtenir le compl\u00e9ment \u00e0 2 d'un entier n\u00e9gatif :</p> <ol> <li> <p>On code sa valeur absolue en binaire sur un nombre de bits sp\u00e9cifique pr\u00e9alablement choisi+ (8, 16, 32 etc.).</p> </li> <li> <p>On inverse tous les bits.</p> </li> <li> <p>On ajoute 1.</p> </li> </ol> <p>Par exemple, le compl\u00e9ment \u00e0 2 de \\(-42\\). On a \\((42)_{10} = (0010 1010)_2\\). En inversant les bits, on obient \\((1101 01001)_2\\). Finalement, on ajoute 1 : \\((1101 01010)_2 = (-42)_{10}\\).</p> <p>Sauriez-vous justifier cette proc\u00e9dure ?</p> <p>Exercice 1</p> <p>Donner l'intervalle de nombres entiers relatifs que l'on peut repr\u00e9senter sur :</p> <ol> <li> <p>4 bits</p> </li> <li> <p>16 bits</p> </li> <li> <p>64 bits</p> </li> </ol> <p>Intervalle</p> <p>Avec \\(n\\) bits, on peut repr\u00e9senter :</p> <ul> <li> <p>Les entiers positifs (non-sign\u00e9s) \\([\\![0, 2^n - 1]\\!]\\)</p> </li> <li> <p>Les entiers relatifs (sign\u00e9s, positifs et n\u00e9gatifs) \\([\\![- 2^{n-1}, 2^{n-1} - 1]\\!]\\)</p> </li> </ul> <p>On represente toujours \\(2^n\\) valeurs.</p> <p>Exercice 2</p> <ol> <li> <p>Convertir en compl\u00e9ment \u00e0 2 les nombres 12 et -53.</p> </li> <li> <p>Effectuer l'addition en binaire de ces deux nombres, et v\u00e9rifier que le r\u00e9sultat est correct.</p> </li> </ol> <p>Exercice 3</p> <p>Quels sont les entiers relatifs dont la repr\u00e9sentation binaire en compl\u00e9ment \u00e0 2 (sur 8 bits) est:</p> <ol> <li> <p><code>01100111</code></p> </li> <li> <p><code>10011001</code></p> </li> </ol> <p>Exercice 4</p> <ol> <li> <p>V\u00e9rifier que sur 8 bits, <code>10000000</code> repr\u00e9sente -128 et <code>11111111</code> repr\u00e9sente -1.</p> </li> <li> <p>V\u00e9rifier en effectuant l'addition en binaire, que 42 + (-42) = 0</p> </li> </ol>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/","title":"Repr\u00e9sentation approximative des nombres r\u00e9els","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#representation-approximative-des-nombres-reels","title":"Repr\u00e9sentation approximative des nombres r\u00e9els","text":"<p>Dans cette partie, nous allons comprendre l'origine de ce bug commun \u00e0 quasiment tous les langages de programmation :</p> <pre><code>&gt;&gt;&gt; 0.1 + 0.2 == 0.3\nFalse\n</code></pre> <p>Ce bug ne vient non pas du langage Python mais de la repr\u00e9sentation en binaire des nombres \u00e0 virgule, les nombres flottants. En python, un nombre flottant est du type <code>float</code>.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#ecriture-binaire","title":"\u00c9criture binaire","text":"<p>Rien ne nous emp\u00eache d'utiliser les puissances n\u00e9gatives de la base ! Par exemple, la d\u00e9composition suivante est naturelle en base 10 :</p> \\[ (314.15)_{10} = 3 \\times 10^2 + 1 \\times 10^1 + 4 \\times 10^0 +  1 \\times 10^{-1} + 5 \\times 10^{-2} \\] <p>Base 2 \u2192 Base 10</p> <p>La m\u00e9thode ne change pas, la difficult\u00e9 ici r\u00e9side dans le calcul des puissances de 2 n\u00e9gatives.</p> <p></p> <p>Exemple</p> <p>Que vaut \\((101.011)_2\\) en d\u00e9cimal ?</p> \\[ \\begin{align*}     (101.011)_2 &amp;= 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 + 0\\times 2^{-1} + 1 \\times 2^{-2} +1 \\times 2^{-2} \\\\     &amp;= 4 + 1 + 0.25 + 0.125 \\\\     &amp;= 5.375 \\end{align*} \\] <p>Remarque 1</p> <p>Puisque seules les puissances n\u00e9gatives de 2 sont des nombres \u00e0 virgule en base 10, seuls les bits apr\u00e8s la virgule contribue \u00e0 la partie d\u00e9cimale ! Que vaudrait le nombre binaire \\((0.1111111...)_2\\) ?</p> <p>Remarque 2</p> <p>Si l'\u00e9criture en base 2 est finie, alors l'\u00e9criture en base 10 est \u00e9galement finie (car les puissances de 2 n\u00e9gatives sont des nombres finis en base d\u00e9cimale).</p> <p>M\u00e9thode plus rapide</p> <p>Les puissances de 2 n\u00e9gatives sont difficiles \u00e0 calculer. Il existe une m\u00e9thode plus rapide en remarquant par exemple en base 10 que :</p> \\[     1745.861 = \\frac{1745861}{10^3} \\] <p>En base 2 :</p> \\[     (101.011)_2 = \\frac{(101011)_2}{2^3} \\] <p>On peut alors calculer le nombre binaire sans la virgule puis on divise par le bonne puissance de 2 :</p> \\[     (101011)_2 =  1 + 2 + 8 + 32 = 43 \\implies (101.011)_2 = \\frac{43}{2^3} = 5.375 \\] <p>Base 10 \u2192 Base 2</p> <p>Prenons le nombre \\(3.6875\\), il se d\u00e9compose en une partie enti\u00e8re \\(3\\) et une partie d\u00e9cimale \\(0.6875\\). On a vu pr\u00e9cedemment que la partie d\u00e9cimale sera represent\u00e9e par des bits apr\u00e8s la virgule. Ainsi on sait d\u00e9j\u00e0 que la partie enti\u00e8re en base binaire s'\u00e9crira \\(3 = (11)_2\\).</p> <ul> <li>On peut tout \u00e0 fait appliquer l'algorithme de soustraction \u00e9tendu aux puissances de 2 n\u00e9gatives afin de d\u00e9terminer ces bits apr\u00e8s la virgule :</li> </ul> \\[ 3.6875 = 2 + 1 + 0.5 + 0.125 + 0.0625        = (11.1011)_2 \\] <p>C'est tout de suite l\u00e9g\u00e8rement moins \u00e9vident.</p> <ul> <li>L'algorithme des divisions par 2 successives devient l'algorithme des multiplications par 2 successives. On ne s'interesse qu'\u00e0 la partie d\u00e9cimale :</li> </ul> \\[ \\begin{align*} 0.6875 \\times 2 &amp;= \\textcolor{#ff6188}{1}.\\textcolor{#71d4e2}{375} \\\\ 0.\\textcolor{#71d4e2}{375}  \\times 2 &amp;= \\textcolor{#ff6188}{0}.\\textcolor{#69ba76}{75} \\\\ 0.\\textcolor{#69ba76}{75}   \\times 2 &amp;= \\textcolor{#ff6188}{1}.\\textcolor{#ffd866}{5} \\\\ 0.\\textcolor{#ffd866}{5}    \\times 2 &amp;= \\textcolor{#ff6188}{1}.0 \\end{align*} \\] <p>Ainsi, on a \\(0.6875 = (0.\\textcolor{#ff6188}{1011})_2\\) et donc avec la partie enti\u00e8re : \\(3.6875 = (11.1011)_2\\). Pouvez-vous expliquer pourquoi \u00e7a fonctionne ?</p> <p>Exercices</p> <ol> <li> <p>Donner l'\u00e9criture binaire de \\(20.875\\).</p> </li> <li> <p>Donner l'\u00e9criture binaire de \\(0.1\\).</p> </li> <li> <p>En d\u00e9duire celle de \\(0.2\\).</p> </li> </ol> <p>\u00c9critures binaires infinies</p> <p>Un nombre ayant une \u00e9criture d\u00e9cimale finie peut avoir une \u00e9criture binaire infinie ! On peut voir que seul \\(0.5\\) admet une \u00e9criture binaire finie parmi les nombres d\u00e9cimaux \u00e0 un chiffre apr\u00e8s la virgule (toutes les puissances n\u00e9gatives de 2 finissent par un 5 dans la partie d\u00e9cimale).</p> <p>Or la m\u00e9moire d'un ordinateur est finie. Certains nombres ne peuvent donc pas \u00eatre repr\u00e9sent\u00e9s correctement en machine, c'est une impossibilit\u00e9 th\u00e9orique.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#precaution-dusage","title":"Pr\u00e9caution d'usage","text":"<p>Puisqu'un nombre admettant une \u00e9criture binaire infinie ne peut pas \u00eatre parfaitement repr\u00e9sent\u00e9, le nombre manipul\u00e9 sur la machine est donc une valeur approch\u00e9e. Ainsi, il faut garder en t\u00eate que les calculs sont potentiellement faux, du moins impr\u00e9cis, lorsque des flottants interviennent.</p> <p>Comparaison de flottants</p> <p>On ne teste jamais l'\u00e9galit\u00e9 de floattants.</p> <p></p><pre><code>&gt;&gt;&gt; a = 0.1\n&gt;&gt;&gt; b = 0.3 - 0.2\n&gt;&gt;&gt; if a == b:\n        print(\"a et b sont \u00e9gaux\")\n    else:\n        print(\"a et b sont diff\u00e9rents\")\n\na et b sont diff\u00e9rents\n&gt;&gt;&gt; \n</code></pre> Le calcul <code>0.3 - 0.2</code> est impr\u00e9cis et donnera une autre valeur approch\u00e9e que <code>0.1</code>. L'op\u00e9rateur d'\u00e9galit\u00e9 <code>==</code> v\u00e9rifie en fait une \u00e9galit\u00e9 \"bit par bit\".  <p>On pr\u00e9f\u00e8re alors tester si deux nombres sont suffisamment proches, c'est-\u00e0-dire s'il existe un faible \u00e9cart entre-eux. On teste alors si la diff\u00e9rence en valeur absolue est inf\u00e9rieure \u00e0 une pr\u00e9cision donn\u00e9e (suffisament petite) :</p> <pre><code>&gt;&gt;&gt; a = 0.1\n&gt;&gt;&gt; b = 0.3 - 0.2\n&gt;&gt;&gt; epsilon = 10 ** (-12)\n&gt;&gt;&gt; if abs(a-b) &lt; epsilon:\n        print(\"a et b sont \u00e9gaux\")\n    else:\n        print(\"a et b sont diff\u00e9rents\")\n\na et b sont \u00e9gaux\n&gt;&gt;&gt;\n</code></pre> <p>La cumulation d'erreurs et d'impr\u00e9cisions</p> <p>Effectuer des calculs impr\u00e9cis avec les flottants gen\u00e8rent des impr\u00e9cisions qui vont se cumuler.</p> <p>Lors de la guerre du Golfe, en 1991, les am\u00e9ricains disposaient de syst\u00e8mes d'antimissiles Patriot pour intercepter les missiles Scud irakiens. Les Patriot disposaient d'une horloge interne \u00e9mettant un signal tous les \\(0.1\\) secondes, d\u00e8s leur mise sous tension. Une dur\u00e9e \u00e9coul\u00e9e est donc : \\(0.1 \\times\\) le nombre de \u00abtics\u00bb.</p> <p>Sur ces syst\u00e8mes, les nombres sont cod\u00e9s en virgule fixe sur 24 bits : c'est tout simplement une troncature de l'\u00e9criture binaire.</p> <p>Or \\(0.1 = 0.00011001100110011001100 ~|~ 1100 \\ldots\\)</p> <p>L'erreur commise est donc d'environ \\(0.000000000000000000000001100 \\approx 9.54 \\cdot 10^{-8}\\).</p> <p>Sur 100 heures de surveillance cela entra\u00eene donc un d\u00e9calage d'horloge interne de \\(9.54 \\cdot 10^{-8} \\cdot 10 \\cdot 100 \\cdot 3600 = 0.34\\) seconde... ce qui correspond \u00e0 une distance de plus de 500 m\u00e8tres \u00e0 la vitesse d'un missile Scud (1676 m/s).</p> <p>Ainsi un Patriot est pass\u00e9 \u00e0 plus de 500 m\u00e8tres d'un Scud le 25 f\u00e9vrier 1991 qui s'est abattu sur la caserne de Dahran et a caus\u00e9 ainsi la mort de 28 personnes. Une frappe chirurgicale.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#norme-ieee-754-hors-programme","title":"Norme IEEE-754 (Hors Programme)","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#virgule-fixe","title":"Virgule fixe","text":"<p>Sur certains syst\u00e8mes informatiques, on utilise un codage \u00e0 virgule fixe : on retient un nombre fixe de chiffre apr\u00e8s la virgule (voir pr\u00e9c\u00e9demment).</p> <p>La distance entre deux nombres successifs est donc toujours la m\u00eame, \u00e9gale \u00e0 \\(2^{-n}\\) o\u00f9 \\(n\\) est le nombre de chiffres conserv\u00e9s apr\u00e8s la virgule.</p> <p>Inconv\u00e9nient : l\u2019erreur relative commise sur le codage des nombres peut devenir tr\u00e8s grande lorsque les nombres sont petits. D'o\u00f9 la n\u00e9cessit\u00e9 d'un codage plus flexible.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#virgule-flottante","title":"Virgule flottante","text":"<p>Pour justement s'adapter \u00e0 tous les ordres de grandeur de nombres, l'id\u00e9e est de coder les nombres r\u00e9els dans une \u00e9criture scientifique :</p> \\[ \\pm \\underbrace{1, \\ldots}_{\\text{mantisse } m} \\times 2^e \\] <p>Nous avons trois informations \u00e0 retenir :</p> <ul> <li> <p>Le signe \\(\\pm\\).</p> </li> <li> <p>la mantisse \\(m\\), les chiffres significatifs.</p> </li> <li> <p>l'exposant \\(e\\). </p> </li> </ul> <p>Deux formats les plus courants, standardis\u00e9s par l'organisation IEEE :</p> <ul> <li> <p>32 bits : 1 bit pour le signe, 8 bits pour pour l'exposant, 23 bits pour la mantisse. Aussi appell\u00e9 simple pr\u00e9cision.</p> </li> <li> <p>64 bits : 1 bit pour le signe, 11 bits pour l'exposant, 52 bits pour la mantisse. Aussi appell\u00e9 double pr\u00e9cision.</p> </li> </ul> <p>Les deux formats utilisent la m\u00eame m\u00e9thode pour stocker et repr\u00e9senter les nombres r\u00e9els, on se place alors dans cas d'un flottant 32 bits sans perte de g\u00e9n\u00e9ralit\u00e9.</p> <p></p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#le-signe","title":"Le signe","text":"<p>Un bit 1 indique un nombre n\u00e9gatif, et un bit 0 indique un nombre positif.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#lexposant","title":"L'exposant","text":"<p>L'exposant \\(e\\) est cod\u00e9 par un entier non-sign\u00e9 sur un octet d\u00e9cal\u00e9 de 127 (on l'appelle alors l'exposant biais\u00e9). Par exemple, prenons le nombre \\(1.010 \\times 2^5\\). L'exposant \\(e = 5\\) est ajout\u00e9 \u00e0 127, la somme \\(E = 162\\), l'exposant biais\u00e9, est represent\u00e9 en binaire \\(10100010\\). D'autres exemples :</p> Exposant \\(e\\) Exposant biais\u00e9 (\\(E = e + 127\\)) Repr\u00e9sentation binaire 5 +132 10000100 0 +127 01111111 -10 +117 01110101 128 +255 11111111 -1 +126 01111110 <p>Le d\u00e9calage de 127 est n\u00e9cessaire pour representer les exposants n\u00e9gatifs car l'entier n'est pas sign\u00e9.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#la-mantisse","title":"La mantisse","text":"<p>Avant toute chose, la mantisse doit \u00eatre normalis\u00e9e. C'est le m\u00eame processus de normalisation en base d\u00e9cimale, par exemple \\(1234.567\\) est normalis\u00e9 comme \\(1.234567 \\cdot 10^3\\) de telle mani\u00e8re qu'il n'y a plus qu'un chiffre devant la virgule.</p> <p>De la m\u00eame mani\u00e8re, la valeur binaire \\(1101.101\\) est normalis\u00e9e comme \\(1.0101101 \\cdot 2^3\\) en d\u00e9calant la virgule 3 fois vers la gauche. Quelques exemples :</p> Valeur binaire Normalis\u00e9 Exposant 1101.101 1.101101 3 0.00101 1.01 -3 1.0001 1.0001 0 10000011.0 1.0000011 7 <p>Vous avez peut-\u00eatre remarqu\u00e9 que dans une mantisse normalis\u00e9e, le chiffre 1 appara\u00eet toujours \u00e0 gauche de la virgule. En fait, le 1 initial est omis du stockage r\u00e9el de la mantisse car il est non-n\u00e9cessaire.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#conclusion","title":"Conclusion","text":"<p>Combinons maintenant le signe, l'exposant et la mantisse normalis\u00e9e pour repr\u00e9senter un nombre r\u00e9el sur 32 bits. Quelques exemples :</p> Valeur binaire Exposant biais\u00e9 \\(E\\) Signe, Exposant, Mantisse -1.11 127 <code>1  01111111  11000000000000000000000</code> +1101.101 130 <code>0  10000010  10110100000000000000000</code> -.00101 124 <code>1  01111100  01000000000000000000000</code> +100111.0 132 <code>0  10000100  00111000000000000000000</code> +.0000001101011 120 <code>0  01111000  10101100000000000000000</code>"},{"location":"1%20%E2%80%93%20Types%20de%20base/3flottant/#cas-particuliers","title":"Cas particuliers","text":"<p>Il existe quelques valeurs sp\u00e9ciales dans ce codage IEEE 754 en simple pr\u00e9cision. Suivant les valeurs de l\u2019exposant biais\u00e9 \\(E\\) (notez que le d\u00e9calage vaut \\(2^{b-1} - 1\\) o\u00f9 \\(b\\)  est le nombre de bits utilis\u00e9s pour coder l\u2019exposant) et de la mantisse, le nombre final peut appartenir \u00e0 l'une ou l'autre des cat\u00e9gories suivantes :</p> Type Exposant biais\u00e9 \\(E\\) Mantisse Z\u00e9ros \\(0\\) \\(0\\) Nombres d\u00e9normalis\u00e9s \\(0\\) \\(\\neq 0\\) Nombres normalis\u00e9s \\(1\\) \u00e0 \\(254\\) Quelconque Infinis \\(255\\) 0 Nombres ind\u00e9finis (Not A Number, NaN) \\(255\\) \\(\\neq 0\\) <p>Un nombre d\u00e9normalis\u00e9 s'\u00e9crit sous la forme \\(\\pm \\cdot 0,m \\cdot 2^{-126}\\).</p> <p>Exercice 1</p> <p>Donner la repr\u00e9sentation IEEE 754 du nombre \\(3.6875\\) en simple pr\u00e9cision.</p> <p>Exercice 2</p> <p>Quel nombre s'\u00e9crit en virgule flottante simple pr\u00e9cision : <code>11000101000000101100001101000000</code> ?</p> <p>Exercice 3</p> <p>On imagine un codage en virgule flottante sur simplement 6 bits, avec 1 bit pour le signe, 3 bits pour l'exposant et 2 pour la mantisse.</p> <p>On a donc \\(E = e + 3\\).</p> <ol> <li> <p>D\u00e9terminer les nombres ind\u00e9finis.</p> </li> <li> <p>D\u00e9terminer l'\u00e9criture de  \\(+\\infty\\) et \\(-\\infty\\).</p> </li> <li> <p>Placer sur une droite gradu\u00e9e les nombres normalis\u00e9s positifs.</p> </li> <li> <p>Placer sur une autre droite gradu\u00e9e les nombres d\u00e9normalis\u00e9s positifs.</p> </li> </ol>"},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/","title":"Les valeurs bool\u00e9ennes","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#les-valeurs-booleennes","title":"Les valeurs bool\u00e9ennes","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#un-peu-dhistoire","title":"Un peu d'histoire","text":"<p>George Boole (1815-1864) est un math\u00e9maticien et logicien britannique connu pour avoir cr\u00e9\u00e9 la logique moderne, appel\u00e9e alg\u00e8bre de Boole.</p> <p>Cette alg\u00e8bre binaire n'accepte que deux valeurs, Vrai ou Faux, 0 et 1, et a donc d'importantes et nombreuses applications en informatique.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#introduction","title":"Introduction","text":"<p>Pour rappel, en math\u00e9matiques, une proposition est une phrase qui est soit vraie, soit fausse. Par exemple, la proposition \"1 plus 1 \u00e9gal 11\" est fausse, tandis que la proposition \"7 plus 2 \u00e9gal 9\" est vraie. Pas les deux \u00e0 la fois, c'est le principe du tiers-exclus.</p> <p>Par exemple, que diriez-vous de ces phrases ?</p> <ul> <li> <p>A : Vous \u00eates en classe de premi\u00e8re.</p> </li> <li> <p>B : Antoine de Saint-Exup\u00e9ry a \u00e9crit Le Petit Prince.</p> </li> <li> <p>C : La Terre est plate.</p> </li> <li> <p>D : \\(3 \\cdot 4 = 12\\).</p> </li> <li> <p>E : La lettre <code>'e'</code> est dans le mot <code>'abracadabra'</code>.</p> </li> <li> <p>F : Georges Perec a \u00e9crit un roman de pr\u00e8s de 300 pages sans aucune lettre e.</p> </li> <li> <p>G : \\(2^{10} &lt; 10^3\\).</p> </li> <li> <p>H : La couleur orange est la plus belle des couleurs.</p> </li> <li> <p>I : Dieu existe.</p> </li> </ul>"},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#algebre-de-boole","title":"Alg\u00e8bre de Boole","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#les-booleens","title":"Les bool\u00e9ens","text":"<p>L'alg\u00e8bre de Boole consiste \u00e0 \u00e9tudier des op\u00e9rations sur un ensemble uniquement constitu\u00e9 de deux \u00e9l\u00e9ments qu'on appelle bool\u00e9ens. Selon le contexte, ces deux \u00e9lements sont not\u00e9s :</p> <ul> <li> <p>Faux / Vrai</p> </li> <li> <p>0 / 1</p> </li> <li> <p><code>False</code> / <code>True</code> en Python</p> </li> <li> <p> / </p> </li> <li> <p>etc.</p> </li> </ul>"},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#les-operateurs-logiques","title":"Les op\u00e9rateurs logiques","text":"<p>Les op\u00e9rations fondamentales sur cet ensemble de valeurs sont les op\u00e9ratations logiques (l'op\u00e9ration d'addition ou de multiplication ne fait pas sens ici). En posant \\(x\\) et \\(y\\) deux bool\u00e9ens, on a les op\u00e9rations suivantes :</p> <ul> <li> <p>La n\u00e9gation, que l'on note \\(\\bar{x}\\), ou plus simplement \"NON x\", <code>not x</code> en Python.</p> </li> <li> <p>La conjonction, que l'on note \\(x \\land  y\\), ou plus simplement \"x ET y\", <code>x and y</code> en Python.</p> </li> <li> <p>La disjonction, que l'on note \\(x \\lor  y\\), ou plus simplement \"x OU y\", <code>x or y</code> en Python</p> </li> </ul> <p>Le r\u00e9sultat de ces op\u00e9rateurs entre bool\u00e9ens est un bool\u00e9en. On peut d\u00e9finir une table de v\u00e9rit\u00e9 pour d\u00e9finir toutes les possibilit\u00e9s :</p> N\u00e9gation (NON)Conjonction (ET)Disjonction (OU) \\(x\\) \\(\\bar x\\) <p>Ainsi, par exemple en Python :</p> <pre><code>&gt;&gt;&gt; not False\nTrue\n&gt;&gt;&gt; not True\nFalse\n</code></pre> \\(x\\) \\(y\\) \\(x \\land y\\) <p>Ainsi, par exemple en Python :</p> <pre><code>&gt;&gt;&gt; True and False\nFalse\n&gt;&gt;&gt; True and True\nTrue\n</code></pre> \\(x\\) \\(y\\) \\(x \\lor y\\) <p>Ainsi, par exemple en Python :</p> <pre><code>&gt;&gt;&gt; True and False\nFalse\n&gt;&gt;&gt; True and True\nTrue\n</code></pre>"},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#python","title":"Python","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#type-bool-et-operateurs-de-comparaison","title":"Type <code>bool</code> et op\u00e9rateurs de comparaison","text":"<p>On rappelle qu'il existe un type bool\u00e9en en Python <code>bool</code>. Une variable de ce type ne peut prendre que deux valeurs, soit <code>False</code> soit <code>True</code>.</p> <pre><code>&gt;&gt;&gt; type(True)\n&lt;class 'bool'&gt;\n&gt;&gt;&gt; x = False\n&gt;&gt;&gt; x\nFalse\n&gt;&gt;&gt; type(x)\n&lt;class 'bool'&gt;\n</code></pre> Op\u00e9rateur Signification Symbole math\u00e9matiques <code>==</code> \"est \u00e9gale \u00e0\" \\(=\\) <code>!=</code> \"est diff\u00e9rent de\" \\(\\ne\\) <code>&lt;</code> \"est inf\u00e9rieur \u00e0\" \\(&lt;\\) <code>&lt;=</code> \"est inf\u00e9rieur ou \u00e9gale \u00e0\" \\(\\leq\\) <code>&gt;</code> \"est sup\u00e9rieur \u00e0\" \\(&gt;\\) <code>&gt;=</code> \"est sup\u00e9rieur ou \u00e9gale \u00e0\" \\(\\geq\\) <p>On peut aussi rajouter l'op\u00e9rateur d'appartenance <code>in</code> qui renvoie un bool\u00e9en :</p> Op\u00e9rateur Signification Symbole math\u00e9matiques <code>in</code> \"appartient \u00e0\" \\(\\in\\) <code>not in</code> \"n'appartient pas \u00e0\" \\(\\notin\\)"},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#exemples","title":"Exemples","text":"<pre><code>&gt;&gt;&gt; a = 2\n&gt;&gt;&gt; a == 3\nFalse\n&gt;&gt;&gt; a == 2\nTrue\n&gt;&gt;&gt; a != 1\nTrue\n&gt;&gt;&gt; a &gt; 2\nFalse\n&gt;&gt;&gt; a &lt;= 5\nTrue\n&gt;&gt;&gt; a % 2 == 0\nTrue\n&gt;&gt;&gt; x = (0 == 1)\n&gt;&gt;&gt; x\nFalse\n&gt;&gt;&gt; y = (3 + 2 == 5)\n&gt;&gt;&gt; y\nTrue\n&gt;&gt;&gt; 'e' in 'abracadabra'\nFalse\n&gt;&gt;&gt; 'b' in 'abracadabra'\nTrue\n&gt;&gt;&gt; 'A' not in 'abracadabra'\nTrue\n&gt;&gt;&gt; not True\nFalse\n&gt;&gt;&gt; True and False\nFalse\n&gt;&gt;&gt; True and True\nTrue\n&gt;&gt;&gt; False or True\nTrue\n</code></pre>"},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#exercices","title":"Exercices","text":"<p>Exercice 1 - Savoir \u00e9valuer</p> <p>Pr\u00e9dire si les variables suivantes contiennent le bool\u00e9en <code>True</code> ou le bool\u00e9en <code>False</code> :</p> <pre><code>a = (2 &gt; 1)\nb = (3 == 1+2)\nc = (1 &lt; 0)\nd = (2 != 5/2)\ne = (2 != 5//2)\nf = ('a' == 'A')\ng = not a\nh = b and c\ni = b or c\nj = not c and (d or e)\n</code></pre> <p>Exercice 2 - Une table pour les gouverner tous</p> <p>Construire la table de v\u00e9rit\u00e9 de l'expression \\((x \\lor y) \\land z\\) o\u00f9 \\(x\\), \\(y\\) et \\(z\\) sont trois bool\u00e9ens.</p> <p>Exercice 3 - Une formule math\u00e9matique en alg\u00e8bre de Boole</p> <p>\u00c0 l'aide de tables de v\u00e9rit\u00e9, d\u00e9montrer les lois de De Morgan :</p> <ul> <li> <p>\\(\\overline{x \\lor y} = \\overline{x} \\land \\overline{y}\\)</p> </li> <li> <p>\\(\\overline{x \\land y} = \\overline{x} \\lor \\overline{y}\\)</p> </li> </ul> <p>Exercice 4 - Ou Exclusif</p> <p>Une autre op\u00e9ration logique importante est le ou exclusif, ou disjonction exclusive.</p> <p>C'est le sens du mot \"ou\" dans le langage commun. Quand on vous demande \"Fromage ou dessert ?\", c'est soit l'un, soit l'autre. Pas les deux? On note l'op\u00e9rateur \\(\\oplus\\), ou <code>xor</code>. En Python, il se note <code>^</code>.</p> <p>Voici sa table de v\u00e9rit\u00e9 :</p> \\(x\\) \\(y\\) \\(x \\oplus y\\) <ul> <li> <p>Qu'est-ce qui change par rapport \u00e0 la table de v\u00e9rit\u00e9 du ou logique ?</p> </li> <li> <p>Sauriez-vous \u00e9crire \\(x \\oplus y\\) en fonctions des trois op\u00e9rateurs logiques de base ?</p> </li> </ul>"},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#les-portes-logiques","title":"Les portes logiques","text":"<p>Une partie plus ou moins hors programme. L'invention du transistor a permis de r\u00e9aliser des circuits \u00e9lectroniques qui suivent l'alg\u00e8bre de Boole, ce sont les portes logiques. Pour les trois op\u00e9rations de base, nous en avons donc trois portes logiques :</p> Circuit simplePorte NONPorte ETPorte OU <p>Imaginons que j'ai un circuit compos\u00e9 d'un interrupteur et d'une ampoule :</p> <p></p> <p>La porte NON inverse la sortie :</p> <p></p> <p></p> <p></p> <p>S'amuser avec les portes logiques</p> <p>Le site Logic.ly permet de tester justement toutes ces portes logiques et cr\u00e9er de petits circuits logiques !</p> <p>Exercice 5 - Additionneur</p> <ol> <li> <p>Dresser la table de v\u00e9rit\u00e9 de l'addition entre deux bits. Il y a deux sorties : le r\u00e9sultat et la retenue.</p> </li> <li> <p>Sch\u00e9matiser cette table sous forme d'un circuit logique \u00e0 deux entr\u00e9es.</p> </li> <li> <p>On veut additionner deux bits et un bit de retenue, dresser la table de v\u00e9rit\u00e9 \u00e0 trois entr\u00e9es et deux sorties (bit de r\u00e9sulat et retenue).</p> </li> <li> <p>Sch\u00e9matiser cette table sous forme d'un circuit logique \u00e0 trois entr\u00e9es.</p> </li> <li> <p>Qu'ajouter au circuit logique pr\u00e9c\u00e9dent pour additionner deux octets entre-eux ?</p> </li> </ol>"},{"location":"1%20%E2%80%93%20Types%20de%20base/5bool/#table-de-karnaugh-hors-programme","title":"Table de Karnaugh (Hors-Programme)","text":"<p>Une table de Karnaugh est une m\u00e9thode graphique pour trouver ou simplifier une fonction logique \u00e0 partir de sa table de v\u00e9rit\u00e9. Elle utilise le code de Gray (aussi appel\u00e9 binaire r\u00e9fl\u00e9chi), qui a comme propri\u00e9t\u00e9 principale de ne faire varier qu'un seul bit entre deux mots successifs.</p> <p>Exemple de code de Gray</p> <ul> <li> <p>Sur 2 bits, le code de Gray est : 00, 01, 11, 10.</p> </li> <li> <p>Sur 3 bits, on a : 000, 001, 011, 010, 110, 111, 101, 100.</p> </li> </ul> <p>Un tableau de Karnaugh peut \u00eatre vu comme une table de v\u00e9rit\u00e9 particuli\u00e8re, \u00e0 deux dimensions, destin\u00e9es \u00e0 faire appara\u00eetre visuellement les simplifications possibles.</p> <ol> <li> <p>Par exemple, on a la table de v\u00e9rit\u00e9 \u00e0 4 entr\u00e9es, A, B, C et D :</p> A B C D Sortie 0 0 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 1 1 0 1 0 0 0 0 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1 0 0 0 0 1 0 0 1 1 1 0 1 0 0 1 0 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 <p>D\u00e9terminer une formule bool\u00e9enne simple ici semble complexe.</p> </li> <li> <p>On dresse le tableau de Karnaugh \u00e0 deux dimensions en suivant le code de Gray pour les entr\u00e9es :</p> AB/CD 00 01 11 10 **00 ** 0 1 1 0 **01 ** 0 1 1 1 **11 ** 0 1 1 1 **10 ** 0 1 1 0 </li> <li> <p>Visuellement, on voit que si D vaut 1, alors la sortie est n\u00e9cessairement \u00e0 1. On voit aussi que si B vaut 1 ET que C vaut 1 alors la sortie est n\u00e9cessairement \u00e0 1.</p> <p></p> </li> <li> <p>Ecrire la formule bool\u00e9enne : \\(S = D \\lor (B \\land C)\\)</p> </li> </ol> <p>Pour les tables \u00e0 4 variables, de pr\u00e9f\u00e9rence proc\u00e9der dans l'ordre suivant :</p> <ul> <li>le rectangle 16 cases (tout le tableau)</li> <li>les rectangles 8 cases (double colonnes/lignes)</li> <li>les rectangles 4 cases (colonne/ligne/carr\u00e9)</li> <li>les rectangles 2 cases</li> <li>enfin les cases uniques.</li> </ul> <p>Exercice 6 - Quelques tables \u00e0 simplifier</p> <ol> <li> <p>Dresser la table de Karnaugh et trouver la formule bool\u00e9enne de :</p> A B Sortie 0 0 0 0 1 1 1 0 0 1 1 1 </li> <li> <p>De m\u00eame pour :</p> A B C Sortie 0 0 0 ** 1** 0 0 1 ** 0** 0 1 0 ** 1** 0 1 1 ** 0** 1 0 0 ** 1** 1 0 1 ** 1** 1 1 0 ** 1** 1 1 1 ** 1** </li> <li> <p>Et un dernier pour la route :</p> A B C D Sortie 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 0 0 0 1 0 1 1 0 1 1 0 0 0 1 1 1 1 1 0 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 1 0 1 1 0 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 0 </li> </ol> <p>Exercice 7 - D\u00e9codeur 7 segments</p> <p>Un afficheur 7 segments est un composant \u00e9lectronique qui permet d'afficher des motifs graphiques, notamment des chiffres :</p> <p></p> <p>Il est compos\u00e9 de 7 segments lumineux d\u00e9sign\u00e9s par les lettres A \u00e0 G : </p> <p>Soit 4 entr\u00e9es \\(e_3, e_2, e_1\\) et \\(e_0\\) repr\u00e9sentant un chiffre. Par exemple : l'entr\u00e9e 1001 repr\u00e9sente le chiffre 9. </p> <ol> <li> <p>Dresser la table de v\u00e9rit\u00e9 pour le segment D et E.</p> </li> <li> <p>Pour chacune de ces tables, dresser la table de Karnaugh et d\u00e9terminer la formule bool\u00e9ene associ\u00e9e.</p> </li> <li> <p>Sur un m\u00eame sch\u00e9ma (m\u00eames entr\u00e9es \\(e_0, e_1, e_2\\) et \\(e_3\\)), repr\u00e9senter ces deux formules bool\u00e9ennes par des portes logiques. </p> </li> </ol>"},{"location":"1%20%E2%80%93%20Types%20de%20base/6char/","title":"Repr\u00e9sentation des caract\u00e8res","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/6char/#representation-des-caracteres","title":"Repr\u00e9sentation des caract\u00e8res","text":"<p>Pour coder un ensemble de caract\u00e8res (lettres) en machine, il faut expliciter quel mot binaire est associ\u00e9 \u00e0 chacun de ces caract\u00e8res. Math\u00e9matiquement, on parle de l'application bijective entre l'ensemble des mots binaires (de \\(n\\) bits) et de l'ensemble des caract\u00e8res.</p> <p>Nous avons en fait d\u00e9termin\u00e9 plusieurs applications auparavant : entre les mots binaires et les nombres entiers positifs, les nombres entiers relatifs (compl\u00e9ment \u00e0 2), les r\u00e9els (IEEE-754) etc. Ici, nous allons consid\u00e9rer trois mani\u00e8res courantes d'associer des mots binaires \u00e0 des caract\u00e8res : les normes de codage de caract\u00e8res ASCII, Latin-1 et Unicode.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/6char/#norme-ascii","title":"Norme ASCII","text":"<p>Le code ASCII (American Standard Code for Information Interchange) a \u00e9t\u00e9 con\u00e7u dans les ann\u00e9es 60 pour des textes \u00e9crits en anglais et permet de repr\u00e9senter 128 caract\u00e8res. La norme utilise donc des mots binaires de 7 bits (\\(2^7 = 128\\)). Cependant, la plupart des ordinateurs travaillant presque tous sur un multiple de huit bits (un octet) depuis les ann\u00e9es 1970, chaque caract\u00e8re d'un texte en ASCII est souvent stock\u00e9 dans un octet dont le dernier bit est 0.</p> <p>Exercice 1</p> <ol> <li> <p>Quelle est la repr\u00e9sentation h\u00e9xad\u00e9cimale du mot \"NSI\" en code ASCII ?</p> </li> <li> <p>En code ASCII, comment passer d'une lettre minuscule \u00e0 une lettre majuscule ?  </p> </li> <li> <p>D\u00e9terminer une fonction \\(f\\) pour passer d'une lettre majuscule cod\u00e9e en ASCII \u00e0 sa position dans l'alphabet (\\(f(\\texttt{'A'}) = 0\\), \\(f(\\texttt{'B'}) = 1\\) etc.).</p> </li> <li> <p>Le chiffrement par d\u00e9calage (code de C\u00e9sar) consiste \u00e0 remplacer chaque lettre par une lettre \u00e0 distance fixe \\(d\\), vers la droite dans l'ordre de l'alphabet. Pour les derni\u00e8res lettres, on reprend au d\u00e9but : </p> <p>D\u00e9terminer une fonction \\(g(c, d)\\) qui prend le code ASCII \\(c\\) d'une lettre majuscule et renvoie le code ASCII de la lettre d\u00e9cal\u00e9e de \\(d\\). Par exemple, \\(g(\\texttt{'A'}, 3) = \\texttt{'D'}\\).</p> </li> <li> <p>Comment convertir un mot binaire ASCII qui repr\u00e9sente le caract\u00e8re d'un chiffre vers la valeur binaire de ce dernier ?</p> </li> </ol> <p>La limitation majeure est donc l'abscence de codage pour les  lettres accentu\u00e9es ou des caract\u00e8res de langues \u00e9trang\u00e8res ! Une nouvelle norme de codage devient n\u00e9cessaire pour bien \u00e9crire les textes de Proust.</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/6char/#norme-iso-8859-1-ou-latin-1","title":"Norme ISO 8859-1 (ou Latin-1)","text":"<p>La norme Latin-1, cr\u00e9ee en 1986, est une extension \u00e0 la norme ASCII qui code 191 caract\u00e8res sur un octet, on utilise donc cette fois-ci le 8\u00e8me bit.</p> <p>Dans cette repr\u00e9sentation de la table Latin-1, une colonne indique les 4 derniers bits, et une ligne les 4 premiers :</p> <p>Ansi, le caract\u00e8re A est cod\u00e9 par le nombre h\u00e9xad\u00e9cimale 41, soit l'octet 01000001.</p> <p>Exercice 2</p> <p>Quel est le caract\u00e8re repr\u00e9sent\u00e9 par nombre d\u00e9cimal 233 ?</p> <p>La norme Latin-1 reste cependant une page de code nationale r\u00e9serv\u00e9e notamment pour les langues europ\u00e9ennes. D'autres normes d'encodage existent pour l'alphabet grec, cyrilique, japonais, chinois...</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/6char/#norme-unicode","title":"Norme Unicode","text":"<p>Un format universel, Unicode, a \u00e9t\u00e9 d\u00e9velopp\u00e9 en 1991 dans le but de remplacer l'utilisation de pages de code nationales, c'est-\u00e0-dire de faire coexister tous les alphabets et autres symboles sous un m\u00eame standard.</p> <p>La derni\u00e8re version en date d'Unicode contient 149186 caract\u00e8res. Chaque caract\u00e8re est associ\u00e9 \u00e0 un nombre, appel\u00e9 codepoint. Les 128 premiers caract\u00e8res sont les m\u00eames que ceux de la norme ASCII. Cependant, il existe diff\u00e9rentes fa\u00e7ons de repr\u00e9senter ces codepoints sous forme de bits :</p> <ul> <li> <p>Encodage UTF-8 : les codepoints peuvent \u00eatre cod\u00e9s sur 8 bits et jusqu'\u00e0 48 bits. Les codepoints entre 0 et 127 sont cod\u00e9s sur 8 bits, ce qui les rend compatibles avec l'ASCII, tandis que les codepoints plus \u00e9lev\u00e9s sont cod\u00e9s sur un plus grand nombre de bits (par exemple, les nombres entre 128 et 2047 sont cod\u00e9s sur 16 bits).</p> </li> <li> <p>Encodage UTF-16 : l'unit\u00e9 de base a une largeur de 16 bits, donc par exemple les codepoints entre 0 et 55295 sont encod\u00e9s avec 16 bits. Cela rend donc l'UTF-16 incompatible avec l'ASCII.</p> </li> </ul>"},{"location":"1%20%E2%80%93%20Types%20de%20base/7recap/","title":"R\u00e9capitulatif","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/7recap/#recapitulatif","title":"R\u00e9capitulatif","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/7recap/#representation-des-entiers","title":"R\u00e9pr\u00e9sentation des entiers","text":"<ul> <li> <p>Dans la num\u00e9ration positionnelle, les nombres sont repr\u00e9sent\u00e9s par une suite de symboles, les chiffres.</p> </li> <li> <p>La base correspond au nombre de chiffres utilis\u00e9s. On la note explicitement en indice si ambigu\u00eft\u00e9. </p> </li> <li> <p>Remarque : Pour une base sup\u00e9rieure \u00e0 10, il nous faut de nouveaux symboles. On utilise typiquement l'alphabet latin A, B, C, etc. Une autre mani\u00e8re serait aussi d'utiliser tout simplement 10, 11, 12, etc. qu'on s\u00e9pare par un espace, un point-virgule etc. (typiquement la base 60 pour les secondes et minutes).</p> </li> <li> <p>La base 10 dans laquelle on compte usuellement s'appelle la base d\u00e9cimale.</p> </li> <li> <p>Un nombre dans cette repr\u00e9sentation est la somme de ses chiffres  pond\u00e9r\u00e9es par la base puissance leur rang :</p> </li> </ul> \\[ (\\textcolor{#ff6188}{176})_\\textcolor{#71d4e2}{8} = \\textcolor{#ff6188}{1} \\cdot \\textcolor{#71d4e2}{8}^\\textcolor{#ffd866}{2} + \\textcolor{#ff6188}{7} \\cdot \\textcolor{#71d4e2}{8}^\\textcolor{#ffd866}{1} + \\textcolor{#ff6188}{6} \\cdot \\textcolor{#71d4e2}{8}^\\textcolor{#ffd866}{0} = (126)_{10} \\] <ul> <li> <p>La plus petite des bases, la base 2, s'appelle la base binaire. C'est celle utilis\u00e9e par les syst\u00e8mes informatiques pour sa fiabilit\u00e9 (r\u00e9sistance au bruit) et la simplicit\u00e9 de son arithm\u00e9tique (moins de circuiteries).</p> </li> <li> <p>Un chiffre en binaire s'appelle un bit.</p> </li> <li> <p>8 bits forme un octet (ou byte en anglais).</p> </li> <li> <p>Avec \\(n\\) bits on peut distinguer \\(2^n\\) valeurs. Puisque 0 est une valeur, le nombre maximal qu'on puisse exprimer est \\(2^n - 1\\).</p> </li> <li> <p>Pour convertir rapidement un nombre binaire en base d\u00e9cimale, on additionne simplement les puissances de 2 associ\u00e9es aux bits \u00e0 1.</p> </li> <li> <p>Pour convertir un nombre en base d\u00e9cimale vers la base binaire, il existe deux algorithmes it\u00e9ratifs :</p> <ul> <li> <p>L'algorithme de soustraction : on soustrait du nombre la plus grande puissance de 2 possible, et on recommence.</p> </li> <li> <p>L'algorithme de division : on effectue les divisions successives du nombre par 2. L'\u00e9criture en binaire est donn\u00e9e par les restes lus de bas en haut.</p> </li> </ul> </li> <li> <p>L'algorithme de division peut \u00eatre adapt\u00e9 pour convertir un nombre en base d\u00e9cimal vers n'importe quel base.</p> </li> <li> <p>Quand on multiplie (resp. divise) un nombre par 2, sa repr\u00e9sentation binaire se voit d\u00e9cal\u00e9e vers la gauche (resp. droite).</p> </li> </ul>"},{"location":"1%20%E2%80%93%20Types%20de%20base/7recap/#representation-des-entiers-relatifs","title":"R\u00e9pr\u00e9sentation des entiers relatifs","text":"<ul> <li> <p>Bit de signe : On r\u00e9serve le bit de poids fort (le plus \u00e0 gauche) pour sp\u00e9cifier le signe du nombre : \\(0\\) pour \\(+\\), \\(1\\) pour \\(-\\). </p> </li> <li> <p>Il est n\u00e9cessaire de sp\u00e9cifier la taille en bits utilis\u00e9e pour conna\u00eetre pr\u00e9cisement la position du bit de signe. Les tailles de 8, 16, 32 et 64 bits sont les plus couramment utilis\u00e9es dans les syst\u00e8mes informatiques.</p> </li> <li> <p>Le compl\u00e9ment \u00e0 2 est une m\u00e9thode de repr\u00e9sentation des entiers relatifs en binaire o\u00f9 l'op\u00e9ration d'addition binaire usuelle fonctionne toujours.</p> </li> <li> <p>Dans ce mode de repr\u00e9sentation, les nombres positifs sont repr\u00e9sent\u00e9s de mani\u00e8re usuelle.</p> </li> <li> <p>Les nombres n\u00e9gatifs sont obtenus par les op\u00e9rations successives :</p> <ul> <li> <p>On \u00e9crit la repr\u00e9sentation binaire de sa valeur absolue (sans le signe) sur un nombre de bits pr\u00e9alablement sp\u00e9cifi\u00e9.</p> </li> <li> <p>On inverse tous les bits.</p> </li> <li> <p>On ajoute 1 (les d\u00e9passements sont ignor\u00e9s).</p> </li> </ul> </li> </ul> <p>Exemple</p> <p>On souhaite repr\u00e9senter \\(-42\\) sur 8 bits (un octet) :</p> <ul> <li> <p>\\(42\\) s'\u00e9crit \\(00101010\\) en binaire.</p> </li> <li> <p>On inverse les bits : \\(11010101\\).</p> </li> <li> <p>On ajoute finalement 1 : \\(11010110\\).</p> </li> </ul> <p>Le compl\u00e9ment \u00e0 2 de \\(-42\\) sur un octet est \\(11010110\\). On peut v\u00e9rifier le r\u00e9sultat en r\u00e9alisant l'addition des deux nombres \\(42\\) et \\(-42\\) sur un octet (en bleu, les retenues) :</p> \\[ \\begin{align*} &amp;&amp; \\textcolor{#71d4e2}{\\small 1} &amp;&amp; \\textcolor{#71d4e2}{\\small 1} &amp;&amp; \\textcolor{#71d4e2}{\\small 1} &amp;&amp; \\textcolor{#71d4e2}{\\small 1} &amp;&amp; \\textcolor{#71d4e2}{\\small 1} &amp;&amp; \\textcolor{#71d4e2}{\\small 1} &amp;&amp; \\textcolor{#71d4e2}{\\small 1} &amp;&amp;  &amp;&amp; &amp;&amp; \\\\ &amp;&amp; &amp;&amp; 0 &amp;&amp; 0 &amp;&amp; 1 &amp;&amp; 0 &amp;&amp; 1 &amp;&amp; 0 &amp;&amp; 1 &amp;&amp; 0 &amp;&amp; \\\\ + &amp;&amp; &amp;&amp; 1 &amp;&amp; 1 &amp;&amp; 0 &amp;&amp; 1 &amp;&amp; 0 &amp;&amp; 1 &amp;&amp; 1 &amp;&amp; 0 &amp;&amp; \\\\ \\hline \\\\ = &amp;&amp; 1 &amp;&amp; 0 &amp;&amp; 0 &amp;&amp; 0 &amp;&amp; 0 &amp;&amp; 0 &amp;&amp; 0 &amp;&amp; 0 &amp;&amp; 0  \\end{align*} \\] <p>Le dernier bit est tronqu\u00e9 car on code sur 8 bits, on obtient donc bien \\(0\\).</p> <ul> <li> <p>A l'inverse, pour d\u00e9terminer un nombre depuis son compl\u00e9ment \u00e0 2 s'il est n\u00e9gatif :</p> <ul> <li> <p>On soustrait 1.</p> </li> <li> <p>On inverse les bits.</p> </li> <li> <p>On convertir le nombre binaire en nombre d\u00e9cimal</p> </li> </ul> </li> <li> <p>Avec \\(n\\) bits on peut repr\u00e9senter les entiers relatifs dans l'intervalle \\([\\![- 2 ^{n-1}, 2^{n-1} - 1 ]\\!]\\)</p> </li> </ul> <p>Vid\u00e9o r\u00e9capitulatif des m\u00e9thodes</p>"},{"location":"1%20%E2%80%93%20Types%20de%20base/7recap/#representation-des-reels","title":"Repr\u00e9sentation des r\u00e9els","text":""},{"location":"1%20%E2%80%93%20Types%20de%20base/7recap/#booleens","title":"Bool\u00e9ens","text":""},{"location":"2%20%E2%80%93%20Types%20construits/4tupledict/","title":"Tuples et Dictionnaires","text":""},{"location":"2%20%E2%80%93%20Types%20construits/4tupledict/#tuples-et-dictionnaires","title":"Tuples et Dictionnaires","text":"<p>PDF de la pr\u00e9sentation des deux structures de donn\u00e9es</p>"},{"location":"2%20%E2%80%93%20Types%20construits/4tupledict/#tuple","title":"Tuple","text":"<p>On retient qu'un tuple (ou p-uplet) est une s\u00e9quence continue et ordonn\u00e9e d\u2019\u00e9l\u00e9ments de types possiblement diff\u00e9rents. C'est une structure de donn\u00e9es immutables (qu'on ne peut modifier).</p> <pre><code># On construit un tuple avec des parenth\u00e8ses\neleve = ('Michel', 'Dupont', 17, 175)\n\n# On acc\u00e8de \u00e0 un \u00e9l\u00e9ment du tuple par son indice\nprint(eleve[0]) \n\n# Erreur ici, on ne peut pas modifier un tuple !\neleve[0] = 'Pierre'\n\n# D'autres op\u00e9rations classiques\nt1 = (12, 34, 56)\nt2 = (78, 90)\n\nprint(t1 + t2) # affiche (12, 34, 56, 78, 90)\nprint(t1 * 3) # affiche (12, 34, 56, 12, 34, 56, 12, 34, 56)\n\n# \"unpacking a tuple\" ou \"d\u00e9ballage d'un tuple\", marche aussi pour les tableaux !\nprenom, nom, age, taille = ('Michel', 'Dupont', 17, 175)\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/4tupledict/#dictionnaire","title":"Dictionnaire","text":"<p>Un dictionnaire une structure de donn\u00e9es non-ordonn\u00e9e qui permet une  association cl\u00e9\u2013valeur.</p> <pre><code># Construction explicite d'un dictionnaire :\neleve = {\n    \"pr\u00e9nom\": \"Michel\",\n    \"nom\": \"Dupont\",\n    \"\u00e2ge\": 17,\n    \"taille\": 175\n}\n\n# On acc\u00e8de \u00e0 une valeur, gr\u00e2ce \u00e0 sa cl\u00e9 :\nprint(eleve[\"pr\u00e9nom\"])\n\n# Modification d'une valeur :\neleve[\"age\"] = 42\n\n# Suppression d'une association :\neleve.pop(\"taille\") # (note : ici, la m\u00e9thode .pop renvoie la valeur associ\u00e9e \u00e0 la cl\u00e9, donc 175)\n\nprint(eleve.keys()) # ensemble des cl\u00e9s\nprint(eleve.values()) # ensemble des valeurs\nprint(eleve.items()) # ensemble des cl\u00e9s-valeurs\n\n# parcours par cl\u00e9 \nfor key in eleve:\n\u00a0 \u00a0 print(key, eleve[key])\n\n# parcours par cl\u00e9 \nfor key in eleve.keys():\n\u00a0 \u00a0 print(key, eleve[key])\n\n# parcours par valeurs\nfor value in eleve.values():\n\u00a0 \u00a0 print(value)\n\n# parcours par cl\u00e9 et valeurs\nfor key, value in eleve.items():\n\u00a0 \u00a0 print(key, value)\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/4tupledict/#exerices","title":"Exerices","text":"<p>Exercice 1</p> \u00c9nonc\u00e9 <p>Soit le dictionnaire suivant :</p> <pre><code>pionniers = {\n    1760: \"Charles Babbage\",\n    1906: \"Grace Murray Hopper\",\n    1912: \"Alan Turing\",\n    1916: \"Claude Shannon\",\n    1924: \"Jean Bartik\",\n    1941: \"Dennis Ritchie\",\n    1955: \"Timothy J. Berners-Lee\",\n    1969: \"Linus Torvalds\",\n    1977: \"John Cena\"\n}\n</code></pre> <ol> <li> <p>Identifier le type des cl\u00e9s et des valeurs du dictionnaire <code>pionniers</code>.</p> </li> <li> <p>Que renvoie pionniers[1912] ?</p> </li> <li> <p>Oups, j'ai fait une petite erreur. En fait, je voulais \u00e9crire \"Linus B. Torvalds\". Corrige \u00e7a !</p> </li> <li> <p>Ah d\u00e9cidement ! John Cena n'est pas un informaticien, tu peux l'enlever ? (m\u00e9thode .pop)</p> </li> <li> <p>En fait \"Charles Babbage\" est n\u00e9 en 1761, peux-tu rectifier \u00e7a ?</p> </li> <li> <p>Ajouter la cl\u00e9 1938 associ\u00e9e \u00e0 la valeur \"Donald Knuth\".</p> </li> <li> <p>Ecrire le programme qui v\u00e9rifie si la valeur \"Bob l'Eponge\" est dans le dictionnaire. </p> </li> <li> <p>Ecrire le programme qui v\u00e9rifie si la cl\u00e9 1945 existe dans le dictionnaire.</p> </li> <li> <p>Ecrire le programme qui renvoie la moyenne des cl\u00e9s.</p> </li> </ol> <p>Exercice 2 - Un dictionnaire de dictionnaires</p> \u00c9nonc\u00e9 <pre><code>data = {\n    \"classe1\": {\n        \"eleve1\": {\n            \"pr\u00e9nom\": \"Jean-Michel\",\n            \"nom\": \"Python\",\n            \"notes\": {\n                \"Maths\": 12,\n                \"NSI\": 14\n            }\n        }\n    }\n}\n</code></pre> <ol> <li>Afficher la valeur 'NSI' du dictionnaire data.</li> </ol> <p>Exercice 3</p> \u00c9nonc\u00e9 <p>Soient les deux dictionnaires suivants :</p> <pre><code>produits = {\n    'pomme': 0.5,\n    'poire': 2.6,\n    'orange': 1.5,\n    'carotte': 0.8,\n    'poireau': 0.6\n}\n\narrivage = {\n    'citron': 0.95,\n    'oignon': 0.4,\n    'banane': 1.1,\n    'haricots': 0.75,\n    'p\u00eache': 1.2,\n    'nectarine': 1.25,\n}\n</code></pre> <ol> <li> <p>De nouveaux produits arrivent en rayon. Ecrire le programme qui ajoute les produits de <code>arrivage</code> dans le dictionnaire <code>produits</code> ! (ici, on recode la m\u00e9thode .update)</p> </li> <li> <p>Ecrire le programme qui calcule la moyenne des prix des produits.</p> </li> <li> <p>Ecrire le programme qui d\u00e9termine le plus co\u00fbteux des produits.</p> </li> </ol> <p>Exercice 4</p> \u00c9nonc\u00e9 <p>Soient les deux dictionnaires suivants :</p> <pre><code>employes = ['Pierre', 'Miriam', 'Paul', 'Charlotte', 'Jacques']\ndefaut = {'poste': 'd\u00e9veloppeur', 'salaire': 2500}\n</code></pre> <ol> <li>Ecrire le programme qui cr\u00e9er le dictionnaire qui utilisent les \u00e9l\u00e9ments de <code>employes</code> comme cl\u00e9 et <code>defaut</code> comme la valeur par d\u00e9faut. (ici, on recode la m\u00e9thode .fromkeys)</li> </ol> <p>Exercice 5</p> \u00c9nonc\u00e9 <p>De la m\u00eame mani\u00e8re que les listes, on peut g\u00e9n\u00e9rer des dictionnaires en compr\u00e9hension. La syntaxe :</p> <pre><code>d = {cl\u00e9:valeur for i in iterable}\n</code></pre> <p>Par exemple, une solution pour le dernier exercice :</p> <p></p><pre><code>{e: defaut for e in employes}\n</code></pre> 1. Ecrire une fonction <code>carres</code> qui prend en param\u00e8tre un entier n &gt; 1 et renvoie un dictionnaire qui contient les associations (i: i * i) pour i de 1 \u00e0 n. (exemple: carres(5) renvoie {1: 1, 2: 4, 3: 9, 4: 16, 5: 25})  <p>Exercice 6</p> \u00c9nonc\u00e9 <p>Soit le dictionnaire et la liste suivants : </p><pre><code>data = {\n    \"pr\u00e9nom\": \"Bob\",\n    \"age\": 25,\n    \"taille\": 160,\n    \"ville\": \"Lima\"\n}\n\ncles = [\"pr\u00e9nom\", \"taille\"]\n</code></pre> <ol> <li> <p>Ecrire un programme pour cr\u00e9er un nouveau dictionnaire en extrayant les cl\u00e9s <code>cles</code> du dictionnaire <code>data</code> de deux mani\u00e8res diff\u00e9rentes (avec une boucle, et en compr\u00e9hension).</p> </li> <li> <p>Ecrire un programme qui supprime les cl\u00e9s <code>cles</code> du dictionnaire <code>data</code>.</p> </li> </ol>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/","title":"Introduction aux tableaux","text":""},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#introduction-aux-tableaux","title":"Introduction aux tableaux","text":"<p> Activit\u00e9 Capytale </p> <p>Consid\u00e9rons un sc\u00e9nario dans lequel vous devez calculer la moyenne de 100 nombres entiers saisis par l'utilisateur. Pour l'instant \u00e0 votre niveau, la seule solution serait d'effectuer 100 op\u00e9rations <code>input()</code> pour stocker les valeurs saisies dans 100 variables diff\u00e9rentes. Puis calculer la moyenne \u00e0 partir de celles-ci. Ce serait \u00e9videmment tr\u00e8s fastidieux, c'est pourquoi le concept de tableau devient n\u00e9cessaire.</p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#notion-de-tableau-et-dindices","title":"Notion de tableau et d'indices","text":"<p>En programmation, un tableau  est une s\u00e9quence ordonn\u00e9e de valeurs de m\u00eame type. Il se rapproche de la notion de vecteur en math\u00e9matiques.</p> <p> </p> Repr\u00e9sentation usuelle d'un tableau d'entiers \u00e0 6 cases (ou cellules) <p>Stockons ce tableau dans une variable <code>t</code>. Ce tableau est ordonn\u00e9 : le 1er \u00e9lement est 4, le deuxi\u00e8me est 2, et le dernier 12.</p> <p>On rep\u00e8re chaque \u00e9l\u00e9ment du tableau par sa position, le num\u00e9ro de la case, qu'on appelle indice.</p> <p> </p> Le premier indice d'un tableau est 0 ! <p>On note <code>t[i]</code> pour d\u00e9signer l'\u00e9lement d'indice <code>i</code> du tableau <code>t</code>. Par exemple, dans notre exemple, <code>t[3]</code> renvoie la vlauer 42.</p> <p>La taille ou longueur d'un tableau est le nombre d'\u00e9l\u00e9ments qu'il contient. Ici, le tableau <code>t</code> a une taille \u00e9gale \u00e0 6.</p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#tableau-liste-en-python","title":"Tableau / liste en Python","text":"<p>En python, le type <code>list</code> impl\u00e9mente le type abstrait de tableau. Un tableau est d\u00e9finit avec des crochets et on s\u00e9pare ses \u00e9l\u00e9ments par des virgules. Par abus de langage on parle de liste plut\u00f4t que de tableau.</p> <p>Une liste vide se d\u00e9clarera par <code>[]</code>.</p> <pre><code>&gt;&gt;&gt; t = [4, 2, 1, 42, 78, 12]\n&gt;&gt;&gt; type(t)\n&lt;class 'list'&gt;\n&gt;&gt;&gt; t[3]\n42\n&gt;&gt;&gt; len(t)\n6\n&gt;&gt;&gt; t[6]\nTraceback (most recent call last):\nFile \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n&gt;&gt;&gt; t[-1]\n12\n&gt;&gt;&gt; liste_vide = []\n&gt;&gt;&gt; len(liste_vide)\n0\n</code></pre> <p>A retenir</p> <ul> <li> <p>La fonction <code>len</code> renvoie la taille de la liste donn\u00e9e (et m\u00eame de tout autre it\u00e9rable !)</p> </li> <li> <p>Le premier \u00e9l\u00e9ment d'une liste est \u00e0 l'indice <code>0</code> et le dernier \u00e0 l'indice <code>len(t) - 1</code> </p> </li> <li> <p>L'indice <code>-1</code> permet d'acc\u00e8der facilement au dernier \u00e9lement. </p> </li> </ul> <p>Euh Python ?</p> <p>En r\u00e9alit\u00e9, une liste d\u00e9signe une autre structure de donn\u00e9es compl\u00e8tement diff\u00e9rente en informatique (liste cha\u00een\u00e9e), ce qui pr\u00eate \u00e0 confusion. Il faudrait donc privil\u00e9gier le terme de tableau.</p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#modifier-une-liste","title":"Modifier une liste","text":"<p>En python, les objets de type <code>list</code>sont modifiables (ou mutable) arp\u00e8s leur cr\u00e9ation.</p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#modifier-dun-element-a-lindice","title":"Modifier d'un \u00e9lement \u00e0 l'indice","text":"<p>On modifie un \u00e9l\u00e9ment du tableau par simple affectation, en \u00e9crasant sa valeur avec la nouvelle.</p> <pre><code>&gt;&gt;&gt; famille = [\"Bart\", \"Lisa\", \"Maggie\"]\n&gt;&gt;&gt; famille[0] = \"Bartholomew\" # oui, c'est son vrai nom\n&gt;&gt;&gt; famille\n['Bartholomew', 'Lisa', 'Maggie']   \n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#ajouter-un-element-en-fin-de-liste","title":"Ajouter un \u00e9l\u00e9ment en fin de liste","text":"<p>La m\u00e9thode <code>append</code> permet d'ajouter un \u00e9l\u00e9ment en fin de liste (et donc d'augmenter la taille de la liste).</p> <pre><code>&gt;&gt;&gt; famille = [\"Bart\", \"Lisa\", \"Maggie\"]\n&gt;&gt;&gt; famille.append(\"Homer\")\n&gt;&gt;&gt; famille\n['Bartholomew', 'Lisa', 'Maggie', 'Homer']   \n</code></pre> <p>Note</p> <p>En programmation, on peut d\u00e9finir nos propres types gr\u00e2ce \u00e0 l'utilisation de  classe. Une classe est compos\u00e9e de membres (variables) et de m\u00e9thodes (fonctions) qui agissent sur ces membres. Un objet est une instance d'une classe.  </p><pre><code>objet.membre\nobjet.methode(arguments...)\n</code></pre> Par exemple, <code>t</code> est un objet de la classe <code>list</code> dont la m\u00e9thode <code>append</code> permet de lui ajouter un \u00e9l\u00e9ment en fin de liste."},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#supprimer-un-element","title":"Supprimer un \u00e9l\u00e9ment","text":"<p>La m\u00e9tode <code>remove</code> permet de supprimer la premi\u00e8re occurrence de l'\u00e9l\u00e9ment (et seulement la premi\u00e8re). \u00c0 condition bien entendu que l'\u00e9l\u00e9ment soit dans la liste.</p> <pre><code>&gt;&gt;&gt; matieres = [\"nsi\", \"maths\", \"anglais\", \"fran\u00e7ais\", \"maths\"]\n&gt;&gt;&gt; matieres.remove(\"maths\")\n&gt;&gt;&gt; matieres\n[\"nsi\", \"anglais\", \"fran\u00e7ais\", \"maths\"]\n&gt;&gt;&gt; matieres.remove(\"espagnol\")\nTraceback (most recent call last):\nFile \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nValueError: list.remove(x): x not in list\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#parcourir-une-liste","title":"Parcourir une liste","text":"<p>Il existe principalement deux m\u00e9thodes pour parcourir une liste : par ses \u00e9l\u00e9ments ou par les indices. Mais dans les deux cas on utilise une boucle <code>for</code>.</p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#parcours-par-element","title":"Parcours par \u00e9l\u00e9ment","text":"<pre><code>famille = [\"Bart\", \"Lisa\", \"Maggie\"]\nfor membre in famille:\n    print(membre)\n</code></pre> <p>Affiche :</p> <pre><code>Bart\nLisa\nMaggie\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#parcours-par-indice","title":"Parcours par indice","text":"<p>Chaque \u00e9l\u00e9ment \u00e9tant accessible par son indice (de <code>0</code> \u00e0 <code>len(liste) - 1</code>), il suffit de faire parcourir \u00e0 une variable <code>i</code> l'ensemble des entiers de <code>0</code> \u00e0 <code>len(liste) - 1</code>, par l'instruction <code>range(len(liste))</code> :</p> <pre><code>famille = [\"Bart\", \"Lisa\", \"Maggie\"]\nfor i in range(len(famille)):\n    print(i, famille[i])\n</code></pre> <p>Affiche :</p> <pre><code>0 Bart\n1 Lisa\n2 Maggie\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#parcours-par-element-et-indice","title":"Parcours par \u00e9l\u00e9ment et indice","text":"<p>Parfois on veut avoir l'indice et l'\u00e9lement en m\u00eame temps, on peut alors utiliser la fonction <code>enumerate</code>.</p> <pre><code>famille = [\"Bart\", \"Lisa\", \"Maggie\"]\nfor i, membre in enumerate(famille):\n    print(i, membre)\n</code></pre> <p>Affiche :</p> <pre><code>0 Bart\n1 Lisa\n2 Maggie\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#creer-une-liste","title":"Cr\u00e9er une liste","text":""},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#initialisation-explicite","title":"Initialisation explicite","text":"<pre><code>tableau = [11, 19, 21, 29, 46]\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#avec-une-bouble-for","title":"Avec une bouble for","text":"<p>On cr\u00e9e une liste vide, puis on lui ajoute les \u00e9l\u00e9ments au fur et \u00e0 mesure gr\u00e2ce \u00e0 une boucle for. Par exemple, cr\u00e9ation d'une liste contenant les entiers multiples de 3 ou de 5 inf\u00e9rieurs \u00e0 100 :</p> <pre><code>multiples = []\nfor k in range(101):\n    if k % 3 == 0 or k % 5 == 0:\n        multiples.append(k)\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#elements-identiques","title":"\u00c9lements identiques","text":"<p>Il est souvent pratique d'initialiser une liste de taille donn\u00e9e, souvent en la remplissant de la m\u00eame valeur, souvent 0. Par exemple, pour produire une liste contenant 26 z\u00e9ros:</p> <pre><code>&gt;&gt;&gt; lst = 26 * [0]\n&gt;&gt;&gt; lst\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#liste-en-comprehension","title":"Liste en compr\u00e9hension","text":""},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#syntaxe-de-base","title":"Syntaxe de base","text":"<p>S\u00fbrement la meilleure feature du langage Python. Elle permet de g\u00e9n\u00e9rer des listes complexes rapidement. La syntaxe la plus simple est :</p> <pre><code>tableau = [expression for element in iterable]\n</code></pre> <p>Imaginons que veuille \u00e9num\u00e9rer les 10 premiers carr\u00e9es. En utilisant une boucle for :</p> <pre><code>tab = []\nfor k in range(10):\n    tab.append(k ** 2)\n</code></pre> <p>On peut g\u00e9n\u00e9rer cette liste plus facilement en compr\u00e9hension, en \"rentrant\" la boucle <code>for</code> dans les crochets de d\u00e9finition de la liste :</p> <pre><code>tab = [k ** 2 for k in range(10)]\n</code></pre> <p>Pour chaque \u00e9l\u00e9ment <code>k</code> de l'it\u00e9rable <code>range(10)</code>, on g\u00e9n\u00e8re l'\u00e9l\u00e9ment <code>k ** 2</code> de la liste !</p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#syntaxe-avec-filtre","title":"Syntaxe avec filtre","text":"<p>La syntaxe d'une liste en compr\u00e9hension avec filtre :</p> <pre><code>tableau = [expression for element in iterable if condition]\n</code></pre> <p>Par exemple, on souhaite garder les valeurs positives de la liste suivante :</p> <pre><code>tab = [11, 28, -16, -18, -10, 16, 10, 16, 2, 7, 23, 22, -4, -2, 19, 16, 22, -8]\n</code></pre> <p>Avec une boucle for, une solution serait :</p> <pre><code>tab_positif = []\nfor val in tab:\n    if val &gt;= 0:\n        tab_positif.append(val)\n</code></pre> <p>On peut cr\u00e9er la m\u00eame chose en compr\u00e9hension, en incluant l'instruction conditionnelle <code>if</code> dans la d\u00e9finition de la liste :</p> <pre><code>tab_positif = [val for val in tab if val &gt;= 0]\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/1tableau/#exercices","title":"Exercices","text":"<p>Exercice 1</p> \u00c9nonc\u00e9Solution <p>Dans la liste suivante:</p> <ul> <li>remplacer <code>\"Loki\"</code> par <code>\"Thor\"</code></li> <li>ajouter <code>\"Dr. Strange\"</code></li> <li>supprimer l'intrus.</li> </ul> <pre><code>avengers = [\"Black Widow\", \"Captain America\", \"Loki\", \"Iron Man\", \"Hulk\", \"Batman\", \"Hawkeye\"]\n</code></pre> <pre><code>avengers[2] = 'Thor'\navengers.append('Dr. Strange')\navengers.remove('Batman')\n</code></pre> <p>Exercice 2</p> \u00c9nonc\u00e9Solution <p>Construire une liste de 100 \u00e9l\u00e9ments tous \u00e9gaux \u00e0 0. Puis remplacer tous les \u00e9l\u00e9ments d'indice impair par des 1.</p> <pre><code>tab = [0] * 100\nfor i in range(100):\n    if i % 2 != 0:\n        tab[i] = 1\n</code></pre> <p>Ou plus optimis\u00e9 :</p> <pre><code>tab = [0] * 100\nfor i in range(50):\n    tab[2 * i + 1] = 1\n</code></pre> <p>Ou en liste de compr\u00e9hension (et condition ternaire) :</p> <pre><code>tab = [0 if i % 2 == 0 else 1 for i in range(100)]\n</code></pre> <p>Exercice 3</p> \u00c9nonc\u00e9Solution <p>Trouvez le nombre qui est exactement \u00e0 la m\u00eame place dans la liste <code>list1</code> et dans la liste <code>list2</code>, sachant que :</p> <ul> <li>les deux listes ont la m\u00eame taille</li> <li>vous n'avez droit qu'\u00e0 une seule boucle <code>for</code>. </li> </ul> <pre><code>list1 = [8468, 4560, 3941, 3328, 7, 9910, 9208, 8400, 6502, 1076, 5921, 6720, 948, 9561, 7391, 7745, 9007, 9707, 4370, 9636, 5265, 2638, 8919, 7814, 5142, 1060, 6971, 4065, 4629, 4490, 2480, 9180, 5623, 6600, 1764, 9846, 7605, 8271, 4681, 2818, 832, 5280, 3170, 8965, 4332, 3198, 9454, 2025, 2373, 4067]\nlist2 = [9093, 2559, 9664, 8075, 4525, 5847, 67, 8932, 5049, 5241, 5886, 1393, 9413, 8872, 2560, 4636, 9004, 7586, 1461, 350, 2627, 2187, 7778, 8933, 351, 7097, 356, 4110, 1393, 4864, 1088, 3904, 5623, 8040, 7273, 1114, 4394, 4108, 7123, 8001, 5715, 7215, 7460, 5829, 9513, 1256, 4052, 1585, 1608, 3941]\n</code></pre> <pre><code>list1 = [8468, 4560, 3941, 3328, 7, 9910, 9208, 8400, 6502, 1076, 5921, 6720, 948, 9561, 7391, 7745, 9007, 9707, 4370, 9636, 5265, 2638, 8919, 7814, 5142, 1060, 6971, 4065, 4629, 4490, 2480, 9180, 5623, 6600, 1764, 9846, 7605, 8271, 4681, 2818, 832, 5280, 3170, 8965, 4332, 3198, 9454, 2025, 2373, 4067]\nlist2 = [9093, 2559, 9664, 8075, 4525, 5847, 67, 8932, 5049, 5241, 5886, 1393, 9413, 8872, 2560, 4636, 9004, 7586, 1461, 350, 2627, 2187, 7778, 8933, 351, 7097, 356, 4110, 1393, 4864, 1088, 3904, 5623, 8040, 7273, 1114, 4394, 4108, 7123, 8001, 5715, 7215, 7460, 5829, 9513, 1256, 4052, 1585, 1608, 3941]\n\nfor i in range(len(list1)):\n    if list1[i] == list2[i]:\n        print(list1[i])\n</code></pre> <p>Ici, on aurait bien aim\u00e9 parcourir par \u00e9l\u00e9ment et non par indice. Il existe une fonction justement qui permet de combiner plusieurs it\u00e9rables entre-eux, la fonction <code>zip</code> !</p> <pre><code>for e1, e2 in zip(list1, list2):\n    if e1 == e2:\n        print(e1)\n</code></pre> <p>C'est plus joli, non ? C'est s\u00fbrement trop avanc\u00e9. Mon tuteur ne veut pas que je vous fasse de vous des experts de Python. Mais sachez que cette fonction se retrouve dans quasiment tous les langages de programmation respectables. Sinon, codez-la.</p> <p>Exercice 4</p> \u00c9nonc\u00e9Solution <p>On consid\u00e8re la liste </p> <pre><code>temp = [11, 28, -16, -18, -10, 16, 10, 16, 2, 7, 23, 22, -4, -2, 19, 16, 22, -8, 18, -14, 29, -1, 16, 22, -5, 6, 2, -4, 9, -17, -13, 22, 14, 24, 22, -9, -18, -9, 25, -11, 17, 17, 25, -10, 2, -18, 29, 14, -16, 7]\n</code></pre> <p>Construire la liste <code>temp_pos</code> qui ne contient que les \u00e9l\u00e9ments positifs de <code>temp</code>. </p> <pre><code>temp_pos = []\nfor t in temp:\n    if t &gt;= 0:\n        temp_pos.append(t)\n</code></pre> <p>Vous avez voulu utliser la m\u00e9thode <code>.remove</code> ? Ne pas ajouter ni retirer d'\u00e9l\u00e9ments de la liste pendant que vous la parcourez ! Modifier ses \u00e9l\u00e9ments est OK.</p> <p>Autre solution (liste en compr\u00e9hension) :</p> <pre><code>temp_pos = [t for t in temp if t &gt;= 0]\n</code></pre> <p>Exercice 5 (BNS)</p> \u00c9nonc\u00e9Solution <p>Programmer la fonction <code>recherche</code>, prenant en param\u00e8tre un tableau non vide <code>tab</code> (type <code>list</code>) d'entiers et un entier <code>n</code>, et qui renvoie l'indice de la derni\u00e8re occurrence de l'\u00e9l\u00e9ment cherch\u00e9. Si l'\u00e9l\u00e9ment n'est pas pr\u00e9sent, la fonction renvoie la longueur du tableau.</p> <p>Exemples :</p> <pre><code>&gt;&gt;&gt; recherche([5, 3],1)\n2\n&gt;&gt;&gt; recherche([2,4],2)\n0\n&gt;&gt;&gt; recherche([2,3,5,2,4],2)\n3\n</code></pre> <p>Exercice 6</p> \u00c9nonc\u00e9Solution <p>Construire une liste de taille 26 contenant le nombre d'occurences de chaque lettre de l'alphabet dans le texte suivant:</p> <pre><code>texte_long = '''\nmpaowhuqhvyywtvypjkfrrasexnwzrgpargvpjlfbjsxxjipjgkyscgdiqswpvpbzigfkljhicuftshk\nqekwqojwchsgyuvakynjpxlacrnbojawdisjzbcqjflhgqofhccdxnqpbnxcxcypawaqgzbikretwlkf\nqodnoseirzvssdczsyczqjbugcgjuorxciblnojkvygxqirysffsmjyokjdsxlymjokgodupumjoxcmi\nteeenikwlkzidirjnmexsmqjefsgpbpoynusfpudmxwcwrzzqzuobjtlyshbvvgjkhoujsdlnsyfshuu\nmfmqmssbyrzybswyswbdmqmcwsdudrfdnmlmnchossxcwarfmpkrcqcyvyjkplzexrnebukxhqbnzkgh\nnalfpkxghypaimemqzmcreozagufiljxdmgrwftyajtonfisefxujtdmpgxttugxhvpgdqhvgzohovbe\nqaafwqfiokzhtbxgoxpzzvbswlxdtykgufqevlmjjrddufrogzsfzzuaqpqfzinvmfpcylgftkkhqylp\nrgzywwefwghhrivsjtvbbcixhztwujdqqesdertmtwdricrzmwsibhstsgnnxbvqnyklcbrcxtycvcww\nojphbqyrjffndkgwqfqvarfupklwwixekudmbspqtydkegltqvwjzfooscehpnfwvvnkrxsfakwezvol\nmpvnprcrwomddjneyrhpxmnrveibxqxcjluezypvsbfudilpjdqflsdhwucjgtusxjjcnewamoewwjhu\n'''\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/2matrice/","title":"Tableaux \u00e0 plusieurs dimensions","text":""},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/2matrice/#tableaux-a-plusieurs-dimensions","title":"Tableaux \u00e0 plusieurs dimensions","text":""},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/2matrice/#listes-de-listes","title":"Listes de listes","text":"<p>Nous avons vu qu'une liste pouvait contenir des \u00e9l\u00e9ments de tous types : des entiers, des chaines des caract\u00e8res... et pourquoi pas une liste qui contient des listes ?</p> <p>On obtient alors un tableau \u00e0 deux dimensions, qui est semblable au concept math\u00e9matique de matrice.</p> <p>La liste <code>tab</code> ci-dessous est compos\u00e9e de 3 listes qui elles-m\u00eames contiennent trois nombres : </p><pre><code>tab =  [[3, 5, 2],\n        [7, 1, 4], \n        [8, 6, 9]]\n</code></pre> <p>On acc\u00e8de aux lignes du tableau avec un simple crochet:</p> <pre><code>&gt;&gt;&gt; tab[1]\n[7, 1, 4]\n</code></pre> <p>Et aux \u00e9l\u00e9ments par un double crochet:</p> <pre><code>&gt;&gt;&gt; tab[2][1]\n6\n</code></pre> <p> </p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/2matrice/#parcourir-une-liste-de-listes","title":"Parcourir une liste de listes","text":"<ul> <li> <p>Parcours par \u00e9l\u00e9ments :     </p><pre><code>for ligne in tab:\n    for element in ligne:\n        print(element)\n</code></pre> </li> <li> <p>Parcours par indice :     </p><pre><code>for i in range(3):\n    for j in range(3):\n        print(tab[i][j])\n</code></pre> </li> </ul>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/2matrice/#exercices","title":"Exercices","text":"<p>Exercice 1</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re le jeu du Morpion (ou Tic-Tac-Toe) dont la surface de jeu vierge est represent\u00e9e par le tableau : </p><pre><code> tab = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']]\n</code></pre> <p>Les premiers coups jou\u00e9s sont ceux-ci :</p> <ul> <li><code>tab[1][1] = 'X'</code> </li> <li><code>tab[2][1] = 'O'</code> </li> <li><code>tab[2][2] = 'X'</code> </li> <li><code>tab[0][0] = 'O'</code> </li> </ul> <p>Quel coup doit maintenant jouer le joueur  <code>'X'</code> pour s'assurer la victoire ?</p> <p>Exercice 2</p> \u00c9nonc\u00e9Correction <p>On consid\u00e8re la liste <code>m</code> (<code>m</code> comme matrice) suivante :  </p> <pre><code>m = [[1, 9, 4], [4, 1, 8], [7, 10, 1]]\n</code></pre> <p>Ecrire le programme qui r\u00e9aliser la somme de tous les \u00e9lements de la matrice <code>m</code>.</p> <p>Exercice 3</p> <p>On peut aussi utiliser un seul tableau pour repr\u00e9senter une matrice, en l'\"applatissant\" (flatten en anglais) :</p> <p> </p> <p>Cette repr\u00e9sentation est tr\u00e8s utilis\u00e9e en programmation bas niveau car plus performante.</p> <ol> <li> <p>Comment \u00e9crire la matrice <code>m</code> de mani\u00e8re aplatie ?     </p><pre><code>m = [[1, 8, 9, 4], [4, 1, 9, 8], [7, 3, 10, 1]]\nm_flat = ...\n</code></pre> </li> <li> <p>Comment acc\u00e9der \u00e0 l'\u00e9lement <code>10</code> de la matrice <code>m</code> ? Et <code>m_flat</code> ?     </p><pre><code>&gt;&gt;&gt; m[...][...]\n10\n&gt;&gt;&gt; m_flat[...]\n10\n</code></pre> </li> <li> <p>Plus g\u00e9n\u00e9ralement, si je veux acc\u00e9der \u00e0 l'\u00e9lement <code>m[ligne][colonne]</code> de la matrice <code>m_flat</code>, quel indice devrais-je utiliser ?</p> </li> </ol>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/","title":"Compl\u00e9ments sur les listes","text":""},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/#complements-sur-les-listes","title":"Compl\u00e9ments sur les listes","text":""},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/#copie-de-listes","title":"Copie de listes","text":""},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/#un-exemple-deroutant","title":"Un exemple d\u00e9routant","text":"<pre><code>&gt;&gt;&gt; listA = [1, 2, 3]\n&gt;&gt;&gt; listB = listA\n&gt;&gt;&gt; listA.append(7)\n&gt;&gt;&gt; listB\n[1, 2, 3, 7]\n&gt;&gt;&gt; listB.append(8)\n&gt;&gt;&gt; listA\n[1, 2, 3, 7, 8]\n</code></pre> <p>Tout se passe comme si les listes <code>listA</code> et <code>listB</code> \u00e9taient devenus des clones \u00absynchronis\u00e9s\u00bb depuis l'affectation <code>listB = listA</code>.</p> <p>Les deux variables <code>listA</code> et <code>listB</code> d\u00e9sginent la m\u00eame liste. Elles ne stockent pas la liste mais une r\u00e9f\u00e9rence de celle-ci ! Une variable est une r\u00e9f\u00e9rence vers une adresse en m\u00e9moire. Si deux variables font r\u00e9f\u00e9rence \u00e0 la m\u00eame adresse, alors elles sont totalement identiques : toute modification de l'une entra\u00eene une modification de l'autre.</p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/#copier-une-liste-proprement","title":"Copier une liste proprement","text":"<p>Trois fa\u00e7ons :</p> <pre><code>&gt;&gt;&gt; listA = [3, 4, 5]\n&gt;&gt;&gt; listB = listA.copy() \n&gt;&gt;&gt; listC = list(listA)\n&gt;&gt;&gt; listD = listA[:] # slice\n</code></pre>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/#pourquoi-une-reference","title":"Pourquoi une r\u00e9f\u00e9rence ?","text":"<p>Quand vous passez des arguments \u00e0 une fonction, ils sont copi\u00e9s. Vous ne manipulez pas l'argument en lui-m\u00eame.</p> <pre><code>def incremente(x):\n    x += 1\n\na = 1\nincremente(a)\nprint(a)\n</code></pre> <p>Cet exemple affiche <code>1</code>, car <code>a</code> n'est pas modifi\u00e9 par la fonction ! Pourtant quand je passe une liste :</p> <pre><code>def ajoute_1(liste):\n    liste.append(1)\n\nt = [1, 2, 3, 4]\najoute_1(t)\nprint(t)\n</code></pre> <p>Ici le programme affiche <code>[1, 2, 3, 4, 1]</code> ! La r\u00e9f\u00e9rence est bien copi\u00e9e, mais elle r\u00e9fere toujours \u00e0 la liste en m\u00e9moire ! Ainsi, manipuler <code>t</code> ou le param\u00e8tre <code>liste</code> revient \u00e0 manipuler la m\u00eame liste.  Une r\u00e9ference correspond \u00e0 une adresse dans la m\u00e9moire, elle est stock\u00e9e sur 32 ou 64 bits suivant votre machine.</p> <p>Copier une liste est co\u00fbteux, c'est pour cela qu'on pr\u00e9f\u00e8re les passer par r\u00e9f\u00e9rence (Python le fait automatiquement) au lieu de les passer par copie. Lorsque vous manipulez de gros objets (listes, matrices, dictionnaires, ensembles etc.) les variables que vous utilisez sont des r\u00e9f\u00e9rences et non pas l'objet en lui-m\u00eame.</p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/#les-slices","title":"Les slices","text":"<p>Encore du sucre syntaxique. Cela permet de s\u00e9lectionner rapidement une partie du tableau :</p>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/#version-simple","title":"Version simple","text":"<pre><code>tableau[debut:fin]\n</code></pre> <pre><code>&gt;&gt;&gt; t = [2, 5, 8, 4, 1, 14, 54, 0]\n&gt;&gt;&gt; t[2:6]\n[8, 4, 1, 14]\n&gt;&gt;&gt; t[0:3]\n[2, 5, 8]\n&gt;&gt;&gt; t[0:len(t)]\n[2, 5, 8, 4, 1, 14, 54, 0]\n</code></pre> <p>Attention une slice renvoie une copie de votre liste, elle ne la modifie pas !</p> <p>Si on ne sp\u00e9cifie pas <code>debut</code>, alors on part du d\u00e9but de la liste !</p> <pre><code>&gt;&gt;&gt; t[:3]\n[2, 5, 8]\n&gt;&gt;&gt; t[:1]\n[2]\n</code></pre> <p>Et si on ne sp\u00e9cifie pas <code>fin</code>, on s\u00e9lectionne jusqu'\u00e0 la fin de la liste !</p> <pre><code>&gt;&gt;&gt; t[5:]\n[14, 54, 0]\n&gt;&gt;&gt; t[2:]\n[8, 4, 1, 14, 54, 0]\n</code></pre> <p>Et si on ne sp\u00e9cifie ni <code>debut</code>, ni <code>fin</code> :</p> <pre><code>&gt;&gt;&gt; t[:]\n[2, 5, 8, 4, 1, 14, 54, 0]\n</code></pre> <p>On renvoie directement tout le tableau ! Ici, <code>t[:]</code> renvoie bien une copie de votre liste !</p> <p>Exercice 1</p> \u00c9nonc\u00e9 <p>Soit le tableau suivant : </p><pre><code>t = ['pif', 'paf', 'pouf', 'pouet', 'oh', 'chien', 'chat', 'lapin', 'ah', 'kiwi', 'pomme']\n</code></pre> <ol> <li> <p>Sans utiliser une slice, extraire les \u00e9lements de l'indice 5 \u00e0 l'indice 7 (inclus) dans une nouvelle liste <code>animaux</code>.</p> </li> <li> <p>Proposez une alternative avec une slice.</p> </li> </ol> <p>Exercice 2</p> \u00c9nonc\u00e9 <p>Soit le tableau suivant : </p><pre><code>t = [2, 5, 8, 4, 1, 14, 54, 0]\n</code></pre> Comment faire la somme des 4 premiers termes sans utiliser le parcours par indice ?"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/#avec-un-pas","title":"Avec un pas","text":"<p>On peut sp\u00e9cifier le pas :</p> <pre><code>tableau[debut:fin:pas]\n</code></pre> <p>Par exemple, je peux s\u00e9lectionner un \u00e9lement sur deux avec :</p> <pre><code>&gt;&gt;&gt; t = [2, 5, 8, 4, 1, 14, 54, 0]\n&gt;&gt;&gt; t[::2]\n[2, 8, 1, 54]\n</code></pre> <p>Je peux m\u00eame renverser une liste en mettant un pas \u00e0 -1 :</p> <pre><code>&gt;&gt;&gt; t = [2, 5, 8, 4, 1, 14, 54, 0]\n&gt;&gt;&gt; t[::-1]\n[0, 54, 14, 1, 4, 8, 5, 2]\n</code></pre> <p>Mais ici, on pr\u00e9fera la m\u00e9thode <code>.reverse</code> (modifie la liste) ou la fonction <code>reversed</code> (renvoie une nouvelle liste) qui sont beaucoup plus explicites et claires.</p> <p>Exercice 3</p> \u00c9nonc\u00e9 <p>Soit le tableau suivant : </p><pre><code>t = [2, 5, 8, 4, 1, 14, 54, 0]\n</code></pre> <p>Ici, on n'utilise ni les slices, ni la m\u00e9thode <code>.reverse</code> ou fonction <code>reversed</code>.</p> <ol> <li> <p>Comment renverser la liste <code>t</code> dans une autre liste <code>t_renverse</code> ?</p> </li> <li> <p>Comment renverser la liste <code>t</code> en place, c'est-\u00e0-dire sans cr\u00e9er une nouvelle liste, en modifidant directement <code>t</code> ?</p> </li> </ol>"},{"location":"2%20%E2%80%93%20Types%20construits/Tableau/3avancee/#dautres-methodes-utiles-hord-programme","title":"D'autres m\u00e9thodes utiles (Hord-Programme)","text":"<p>Ces m\u00e9thodes/fonctions ne sont pas \u00e0 apprendre, car vous pouvez toutes les coder avec des <code>if</code>, <code>for</code> etc. Elles sont justes utiles \u00e0 conna\u00eetre car tr\u00e8s souvent utilis\u00e9es.</p> <pre><code>&gt;&gt;&gt; t = [\"Bleu\", \"Rouge\", \"Blanc\", \"Noir\"]\n\n\n&gt;&gt;&gt; t.insert(1, \"Vert\") # insertion \u00e0 l'idice\n&gt;&gt;&gt; t\n['Bleu', 'Vert', 'Rouge', 'Blanc', 'Noir']\n\n\n&gt;&gt;&gt; t2 = ['pomme', 'poire', 'orange']\n&gt;&gt;&gt; t.extend(t2) # extension avec une autre liste (modifie t)\n&gt;&gt;&gt; t\n['Bleu', 'Vert', 'Rouge', 'Blanc', 'Noir', 'pomme', 'poire', 'orange']\n\n&gt;&gt;&gt; t + [\"oui\", \"non\", \"?\"] # Idem, mais on renvoie une nouvelle liste (on ne modifie pas t) !\n['Bleu', 'Vert', 'Rouge', 'Blanc', 'Noir', 'pomme', 'poire', 'orange', 'oui', 'non', '?']\n\n\n&gt;&gt;&gt; t.count('non') # renvoie le nombre d'occurences de l'\u00e9l\u00e9ment donn\u00e9\n1\n\n\n&gt;&gt;&gt; t = [2, 10, 5, 8, 4, 1, 14, 54, 0]\n&gt;&gt;&gt; t.sort() # tri la liste de nombres\n&gt;&gt;&gt; t\n[0, 1, 2, 4, 5, 8, 10, 14, 54]\n\n&gt;&gt;&gt; t = [2, 10, 5, 8, 4, 1, 14, 54, 0]\n&gt;&gt;&gt; sorted(t) # tri, mais ne mofidie pas t\n[0, 1, 2, 4, 5, 8, 10, 14, 54]\n&gt;&gt;&gt; t\n[2, 10, 5, 8, 4, 1, 14, 54, 0]\n\n\n&gt;&gt;&gt; liste = []\n&gt;&gt;&gt; if len(liste) == 0: # pour v\u00e9rifier si une liste est vide\n        print(\"Votre liste est vide !\")\nVotre liste est vide !\n\n&gt;&gt;&gt; if not liste: # pour v\u00e9rifier si une liste est vide\n        print(\"Votre liste est vide !\")\nVotre liste est vide !\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/","title":"Tables de donn\u00e9es","text":""},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/#tables-de-donnees","title":"Tables de donn\u00e9es","text":""},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/#introduction-et-vocabulaire","title":"Introduction et vocabulaire","text":"<p>La fa\u00e7on la plus naturelle et simple de structurer des donn\u00e9es est de les organiser sous la forme d'une table : bulletins scolaires, extrait de compte bancaire, statistiques sportives etc. Un exemple de table :</p> Nom Pr\u00e9nom Poste Taille Poids Mbapp\u00e9 Kylian Attaquant 179 78 Griezmann Antoine Attaquant 173 73 Giroud Oliver Attaquant 192 92 Lloris Hugo Gardien de but 188 78 Tchouam\u00e9ni Aur\u00e9lien Milieu de terrain 185 75 Kound\u00e9 Jules D\u00e9fenseur 178 70 <p>Le vocabulaire est le suivant :</p> <ul> <li> <p>Une table est un ensemble d'enregistrements.</p> </li> <li> <p>Un enregistrement contient les valeurs correspondants aux champs (ou attributs, ou encore descripteurs) de la table.</p> </li> </ul> <p>Par exemple, dans la table pr\u00e9c\u00e9dente :</p> <ul> <li> <p><code>Nom</code>, <code>Pr\u00e9nom</code>, <code>Poste</code>, <code>Taille</code>, <code>Poids</code> sont des champs (comme Didier). On peut noter que chaque champ est d\u00e9fini par un type (entier, flottant, cha\u00eene de caract\u00e8res etc.). </p> </li> <li> <p>Chaque ligne est un enregistrement. Il y a 6 enregistrements dans cet table.</p> </li> <li> <p><code>Mbapp\u00e9</code> est une valeur du champ <code>Nom</code> pour le premier enregistrement.</p> </li> </ul> <p>En statistique math\u00e9matique</p> <p>Il est aussi tr\u00e8s courant de manipuler des tables en statistique math\u00e9matique. On alors parle de variables/caract\u00e8res pour les champs, et d'individus/mesures pour les enregistrements. Beaucoup de termes diff\u00e9rents pour parler de la m\u00eame chose donc. Comme dirait Pierre Dac, rien n'est plus semblable \u00e0 l'identique que ce qui est pareil \u00e0 la m\u00eame chose.</p>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/#representation-dune-table-en-python","title":"Repr\u00e9sentation d'une table en Python","text":""},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/#representation-dun-enregistrement","title":"Repr\u00e9sentation d'un enregistrement","text":"<p>Il existe deux mani\u00e8res communes de repr\u00e9senter un enregistrement. Puisqu'un tableau ne peux pas contenir des valeurs de diff\u00e9rents types, un p-uplet (ou tuple) semble \u00eatre une bonne premi\u00e8re approche :</p> <pre><code>enregistrement = ('Mbapp\u00e9', 'Kylian', 'Attaquant', 179, 78)\n</code></pre> <p>H\u00e9las, pour acc\u00e9der aux valeurs de cet enregistrement, il est n\u00e9cessaire d'utiliser des indices :</p> <pre><code>&gt;&gt;&gt; enregistrement[3]\n179\n</code></pre> <p>On pr\u00e9f\u00e9rera alors utiliser un p-uplet nomm\u00e9 qui permet en quelque sorte de \"nommer les indices\" avec leur champ correspondant. Un p-uplet nomm\u00e9 se cr\u00e9er normalement en Python avec la classe <code>namedtuple</code>, mais pour des raisons p\u00e9dagogiques on utilisera un simple dictionnaire qui fonctionne de la m\u00eame mani\u00e8re :</p> <pre><code>enregistrement = {\n    'nom'    : 'Mbapp\u00e9',\n    'pr\u00e9nom' : 'Kylian',\n    'poste'  : 'Attaquant',\n    'taille' : 179,\n    'poids'  : 78\n}\n</code></pre> <p>Et donc si on veut acc\u00e9der au champ <code>Taille</code> de la table :</p> <pre><code>&gt;&gt;&gt; enregistrement1['taille']\n179\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/#representation-dune-table","title":"Repr\u00e9sentation d'une table","text":"<p>Une table est une collection d'enregistrements, donc on la repr\u00e9senter sous la forme d'une liste d'enregistrements, une liste de p-uplet nomm\u00e9 :</p> <pre><code>table = [\n    {'nom' : 'Mbapp\u00e9', 'pr\u00e9nom' : 'Kylian', 'poste' : 'Attaquant', 'taille' : 179, 'poids' : 78 },\n    {'nom' : 'Griezmann', 'pr\u00e9nom' : 'Antoine', 'poste' : 'Attaquant', 'taille' : 173, 'poids' : 73 },\n    # etc.\n]\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/#fichiers-csv","title":"Fichiers CSV","text":"<p>Les tables sont fr\u00e9quemment enregistr\u00e9es dans des fichiers au format <code>.csv</code> (comma separated values). C'est un simple fichier texte o\u00f9 :</p> <ul> <li> <p>La premi\u00e8re ligne d\u00e9finit les champs.</p> </li> <li> <p>Chaque ligne correspond \u00e0 un enregistrement.</p> </li> <li> <p>Les champs et les valeurs sont s\u00e9par\u00e9s par un d\u00e9limiteur, g\u00e9n\u00e9ralement par une virgule.</p> </li> <li> <p>Les guillemets <code>\"</code> peuvent \u00eatre utilis\u00e9s pour d\u00e9limiter le contenu d'une ch\u00e2ine de caract\u00e8res.</p> </li> </ul> <p>Par exemple, le d\u00e9but de la table pr\u00e9c\u00e9dente s'\u00e9crirait comme :</p> <pre><code>Nom,Pr\u00e9nom,Poste,Taille,Poids\nMbapp\u00e9,Kylian,Attaquant,179,78\nGriezmann,Antoine,Attaquant,173,73\nGiroud,Oliver,Attaquant,192,92\n</code></pre> <p>Un autre exemple de d\u00e9limiteur</p> <ul> <li> <p>T\u00e9l\u00e9charger  ce fichier .csv et l'ouvrir avec LibreOffice Calc. Observer l'importance de pr\u00e9ciser les d\u00e9limiteurs.</p> </li> <li> <p>L'ouvrir ensuite avec un \u00e9diteur de texte (notepad++) pour observer sa construction.</p> </li> </ul>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/#charger-un-fichier-csv-avec-python","title":"Charger un fichier CSV avec Python","text":""},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/#from-scratch","title":"From scratch","text":"<p>Ouvrir un fichier en Python se fait gr\u00e2ce \u00e0 la fonction <code>open</code>. La m\u00e9thode <code>.readlines</code> permet ensuite de r\u00e9cup\u00e9rer l'ensemble des lignes dans une liste.</p> <p></p><pre><code>&gt;&gt;&gt; fichier = open('pokedex.csv')\n&gt;&gt;&gt; lignes = fichier.readlines()\n&gt;&gt;&gt; lignes[0]\n'No;Nom;Type;PV;Attaque;D\u00e9fense;Vitesse;ASp\u00e9;DSp\u00e9;Talent;Nom US;code'\n&gt;&gt;&gt; lignes[6]\n'6;Dracaufeu;feu,vol;78;84;78;100;109;85;Brasier,Force Soleil;Charizard;63266\\n'\n</code></pre> Il va falloir un peu travailler ces cha\u00eenes de caract\u00e8res pour parvenir \u00e0 des tuples/tuples nomm\u00e9s. La m\u00e9thode <code>.split</code> appliqu\u00e9e \u00e0 une cha\u00eene de caract\u00e8re permet de la  scinder suivant un d\u00e9limiteur donn\u00e9 en param\u00e8tre. <pre><code>&gt;&gt;&gt; \"oui bonjour \u00e7a va\".split(' ')\n['oui', 'bonjour', '\u00e7a', 'va']\n&gt;&gt;&gt; chaine = \"Un peu, trop, de virgules, non?\"\n&gt;&gt;&gt; chaine.split(',')\n['Un peu', ' trop', ' de virgules', ' non?']\n</code></pre> <p>La m\u00e9thode <code>.strip</code> appliqu\u00e9e \u00e0 une cha\u00eene de caract\u00e8re en renvoie une nouvelle sans les espaces, les tabulations et les retours \u00e0 la ligne aux extremit\u00e9s.</p> <pre><code>&gt;&gt;&gt; chaine = \"    oui   bonjour    \\n\"\n&gt;&gt;&gt; chaine.strip()\n'oui   bonjour'\n</code></pre> <p>R\u00e9cup\u00e9rer les champs</p> <ul> <li> <p>Dans un nouveau script Python, copier le code suivant : </p><pre><code>fichier = open('pokedex.csv', 'r', encoding = 'UTF-8') # 'r' pour lecture seule\nlignes = fichier.readlines()\nlignes = # \u00e0 compl\u00e9ter\nchamps = # \u00e0 compl\u00e9ter\n</code></pre> </li> <li> <p>Ecrire le code pour supprimer le retour \u00e0 la ligne <code>\\n</code> \u00e0 la fin de chaque ligne de la liste <code>lignes</code>. On g\u00e9n\u00e9rera une liste en compr\u00e9hension.</p> </li> <li> <p>Ecrire la code pour r\u00e9cup\u00e9rer les champs (les cl\u00e9s de notre futur dictionnaire) sous la forme d'une liste de cha\u00eenes de caract\u00e8res.  </p> </li> </ul> <p>Transformer un enregistrement en un p-uplet est plus subtil car il n\u00e9cessaire de convertir certaines valeurs.</p> <pre><code>&gt;&gt;&gt; lignes[1]\n'1;Bulbizarre;plante,poison;45;49;49;45;65;65;Engrais,Chlorophylle;Bulbasaur;77140'\n&gt;&gt;&gt; lignes[1].split(';')\n['1', 'Bulbizarre', 'plante,poison', '45', '49', '49', '45', '65', '65', 'Engrais,Chlorophylle', 'Bulbasaur', '77140']\n</code></pre> <p>On peut manuellement convertir certaines valeurs dans son bon type :</p> <pre><code>vals = lignes[1].split(';')\nenregistrement = (int(vals[0]), vals[1], vals[2], int(vals[3]), int(vals[4]), int(vals[5]), int(vals[6]), int(vals[7]), int(vals[8]), vals[9], vals[10], int(vals[11]))\nprint(enregistrement)\n</code></pre> <p>Le code affiche :</p> <pre><code>(1, 'Bulbizarre', 'plante,poison', 45, 49, 49, 45, 65, 65, 'Engrais,Chlorophylle', 'Bulbasaur', 77140)\n</code></pre> <p>R\u00e9cup\u00e9rer les enregistrements</p> <ul> <li> <p>Adapter ce code pour transformer tous les enregistrements de table en p-uplet.</p> </li> <li> <p>Finalement, \u00e0 partir des champs et des enregistrements, construire la liste des dictionnaires repr\u00e9sentant la table.</p> </li> </ul> <p>Une conversion un peu plus propre</p> <p>Il peut \u00eatre assez d\u00e9concertant de manipuler des fonctions comme des valeurs :</p> <pre><code>valeurs = lignes[1].split(';')\ntypes = [int, str, str, int, int, int, int, int, int, str, str, int]\nenregistrement = [t(v) for t, v in zip(types, valeurs)]\n</code></pre> <p>Pour rappel, la fonction <code>zip</code> permet d'it\u00e9rer sur deux it\u00e9rables en m\u00eame temps.</p> <p>Evidemment ce code ne fonctionnera que pour le fichier csv fourni. Pour plus de g\u00e9n\u00e9ricit\u00e9, une piste serait de d\u00e9tecter automatiquement le type des valeurs.</p>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/1intro/#grace-a-la-bibliotheque-csv","title":"Gr\u00e2ce \u00e0 la biblioth\u00e8que <code>csv</code>","text":"<p>La biblioth\u00e8que <code>csv</code> permet de lire et d'\u00e9crire des fichiers csv rapidement. Par exemple, la fonction <code>DictReader</code> remplace tout notre code pr\u00e9c\u00e9dent :</p> <pre><code>import csv\n\nfichier = open('pokedex.csv', 'r', encoding='UTF-8')\n\ntable = csv.DictReader(fichier, delimiter=';')\n\ntable = list(table) # table est de type 'csv.DictReader', on la convertit ici en une liste de dictionnaires\n\nprint(table[0])\n\nfichier.close() # fermeture du fichier\n</code></pre> <p>Le code affiche :</p> <pre><code>{'No': '1', 'Nom': 'Bulbizarre', 'Type': 'plante,poison', 'PV': '45', 'Attaque': '49', 'D\u00e9fense': '49', 'Vitesse': '45', 'ASp\u00e9': '65', 'DSp\u00e9': '65', 'Talent': 'Engrais,Chlorophylle', 'Nom US': 'Bulbasaur', 'code': '77140'}\n</code></pre> <p>La conversion des valeurs ne se fait h\u00e9las pas automatiquement. </p>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/","title":"Op\u00e9rations sur les tables","text":""},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#operations-sur-les-tables","title":"Op\u00e9rations sur les tables","text":"<p>Pour tous ces exercices, on s'appuiera sur cette table. Pour rappel le code \u00e0 adapter pour importer un fichier csv :</p> <pre><code>import csv\n\nfile = open('harrypotter.csv', 'r')\ntable_hp = list(csv.DictReader(file, delimiter=','))\n</code></pre> <p>Ici, on s'int\u00e9resse aux op\u00e9rations classiques sur les tables.</p>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#recherche-de-valeurs","title":"Recherche de valeurs","text":"<p>Appartient \u00e0</p> <p>On souhaite d'abord v\u00e9rifier qu'une valeur appartient \u00e0 une table ou non. Pour cela il suffit de parcourir les enregistrements de la table et v\u00e9rifier que la valeur recherch\u00e9e est une valeur de l'enregistrement.</p> <pre><code>def appartient(valeur, table: list) -&gt; bool:\n'''\n    Renvoie True si et seulement **si** la valeur appara\u00eet dans les valeurs de la table.\n    '''\n    for e in table: # e pour enregistrement\n        for v in e. ... () : # v pour ...\n            if v == ...\n                return ...\n    return ...\n</code></pre> <ol> <li> <p>Compl\u00e9ter ce code.</p> </li> <li> <p>Simplifier ce code en utilisant l'op\u00e9rateur d'appartenance <code>in</code>.</p> </li> <li> <p>Que renvoie <code>appartient('Harry Potter', table_hp)</code> ?</p> </li> </ol> <p>Appartient \u00e0 (suivant un champ)</p> <p>Adapter la fonction pr\u00e9c\u00e9dente pour qu'elle prenne en param\u00e8tre un champ et qu'elle recherche si la valeur est pr\u00e9sente pour le champ pr\u00e9cis\u00e9. La signature de la fonction :</p> <pre><code>def appartient(valeur, champ: str, table: list) -&gt; bool:\n</code></pre> <p>Recherche</p> <p>On souhaite d\u00e9sormais r\u00e9cup\u00e9rer certaines donn\u00e9es si la valeur recherch\u00e9e est trouv\u00e9e.</p> <p>Adapter la fonction pr\u00e9c\u00e9dente pour qu'elle renvoie la liste des valeurs correspondant \u00e0 un second champ (de retour) lorsque la valeur cherch\u00e9e est trouv\u00e9e (dans un premier champ de recherche). La signature de la fonction :</p> <pre><code>def recherche(valeur, champ1: str, champ2: str, table: list) -&gt; list:\n</code></pre> <p>Un exemple :</p> <pre><code>&gt;&gt;&gt; recherche('Hufflepuff', 'House', 'Character Name', table_hp)\n['Cedric Diggory', 'Nymphadora Tonks', 'Susan Bones', 'Pomona Sprout', 'Leanne', 'Justin Finch-Fletchley', 'Zacharias Smith', 'Ernest Macmillan']\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#agregation","title":"Agr\u00e9gation","text":"<p>L'agr\u00e9gation est une fonction qui transforme une liste d'\u00e9l\u00e9ments en une unique valeur. Vous connaissez d\u00e9j\u00e0 moults fonctions d'aggr\u00e9gation : somme d'une liste, moyenne d'une liste, maximum/minimum d'une liste, nombre d'\u00e9l\u00e9ments d'une liste etc.</p> <p>Aggr\u00e9gation avec condition</p> <p>Il est bien utile d'armer une telle fonction avec une condition. Par exemple, \u00e9crivez la fonction <code>compte</code> qui prend en param\u00e8tre une valeur, un champ et une table et renvoie le nombre d'occurences de la valeur dans le champ de la table.</p> <pre><code>&gt;&gt;&gt; compte('Female', 'Gender', table_hp)\n42\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#selection","title":"S\u00e9lection","text":"<p>Une s\u00e9lection revient \u00e0 cr\u00e9er une nouvelle table en extrayant les enregistrements d'une table existante v\u00e9rifiant une certaine condition. </p> <p>Par exemple, on pourrait s\u00e9lectionner les personnages de Serdaigle (Ravenclaw) :</p> Character ID Character Name Species Gender House Patronus Wand (Wood) Wand (Core) 25 Luna Lovegood Human Female Ravenclaw Hare 28 Gilderoy Lockhart Human Male Ravenclaw Cherry Dragon Heartstring 38 Sybill Trelawney Human Female Ravenclaw Hazel Unicorn Hair 39 Moaning Myrtle Ghost Female Ravenclaw 41 Quirinus Quirrell Human Male Ravenclaw Alder Unicorn Hair 43 Garrick Ollivander Human Male Ravenclaw Hornbeam Dragon Heartstring 54 Helena Ravenclaw Ghost Female Ravenclaw 55 Cho Chang Human Female Ravenclaw Swan 59 Filius Flitwick Human (Part-Goblin) Male Ravenclaw 101 Padma Patil Human Female Ravenclaw 119 Michael Corner Human Male Ravenclaw Squirrel 124 Marcus Belby Human Male Ravenclaw <p>Cela consiste donc \u00e0 cr\u00e9er une liste en parcourant la table existante et en s\u00e9lectionnant les enregistrements selon un crit\u00e8re : c'est exactement ainsi qu'on cr\u00e9e une liste en compr\u00e9hension avec filtre.</p> <p>La table pr\u00e9c\u00e9dente a \u00e9t\u00e9 obtenu gr\u00e2ce \u00e0 la ligne de code :</p> <pre><code>table_serdaigle = [e for e in table_hp if e['House'] == 'Ravenclaw']\n</code></pre> <p>Exercices sur la s\u00e9lection</p> <ol> <li>Cr\u00e9er la table des personnages d'esp\u00e8ce \"Ghost\"</li> <li>Cr\u00e9er la table des personnages f\u00e9minins et de Gryffondor.</li> <li>Cr\u00e9er la table des personnages masculins dont le nombre de lettres de leur nom est pair.</li> </ol>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#projection","title":"Projection","text":"<p>On peut \u00e9galement avoir \u00e0 extraire d'une table certaines colonnes, c'est-\u00e0-dire seulement des donn\u00e9es d'un ou plusieurs champs. On appelle \u00e9galement cette op\u00e9ration projection.</p> <p>Origine du mot projection</p> <p>En math\u00e9matique, on parle de projection quand on passe d'une dimension \u00e0 une dimension inf\u00e9rieure. Typiquement, on peut projetter un point dans l'espace (3D) sur un plan (2D). Dans le cas des tables, une colonne peut \u00eatre vu comme une dimension. En effet, il n'est pas rare de traiter un enregistrement comme un simple vecteur. </p> <p>Il s'agit donc de cr\u00e9er une nouvelle table (liste) dont les enregistrements sont des dictionnaires qui ne contiennent que les couples champ: valeur des enregistrements de la table initiale pour les champs pr\u00e9cis\u00e9s (sous forme d'une liste par exemple).</p> <p>La projection en code</p> <ol> <li> <p>Compl\u00e9ter la fonction de projection:</p> <pre><code>def projection(table: list, liste_champs: list) -&gt; list:\n'''\n    Renvoie une table (liste de dictinonaires) des enregistrements de table ne contenant uniquement\n    les champs appartenant \u00e0 liste_champs.\n    '''\n    table_proj = ...\n    for e in ...:\n        table_proj.append({c: v for c, v in ... if ... })\n    return ...\n</code></pre> </li> <li> <p>Utiliser cette fonction pour cr\u00e9er une table en extrayant les colonnes \"Character Name\" et \"House\" de la table d'exemple.</p> </li> </ol>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#tri","title":"Tri","text":"<p>Il est parfois utile d'ordonner les enregistrements en les triant suivant les valeurs d'une ou plusieurs colonnes.</p> <p>Par chance, Python est fourni avec deux fonctions de base pour trier une liste, la m\u00e9thode <code>sort</code> et la fonction <code>sorted</code>. </p>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#difference-entre-sort-et-sorted","title":"Diff\u00e9rence entre <code>sort</code> et <code>sorted</code>","text":"<ul> <li>La m\u00e9thode <code>sort</code> tri en place la liste \u00e0 laquelle on la lui applique. C'est-\u00e0-dire qu'elle modifie directement la liste. Elle ne renvoie rien.</li> </ul> <pre><code>&gt;&gt;&gt; tab = [5, 4, 8, 1, 2, 3]\n&gt;&gt;&gt; tab.sort()\n&gt;&gt;&gt; tab\n[1, 2, 3, 4, 5, 8]\n</code></pre> <ul> <li>La fonction <code>sorted</code> quant \u00e0 elle renvoie une nouvelle liste, elle ne modifie pas la liste donn\u00e9e en argument.</li> </ul> <pre><code>&gt;&gt;&gt; tab = [5, 4, 8, 1, 2, 3]\n&gt;&gt;&gt; sorted(tab)\n[1, 2, 3, 4, 5, 8]\n&gt;&gt;&gt; tab\n[5, 4, 8, 1, 2, 3]\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#ordre-de-tri","title":"Ordre de tri","text":"<p>Pour ordonner de mani\u00e8re d\u00e9croissante, on se sert du param\u00e8tre bool\u00e9en <code>reverse</code>. </p> <pre><code>&gt;&gt;&gt; sorted([5, 4, 8, 1, 2, 3], reverse=True)\n[8, 5, 4, 3, 2, 1]\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#cle-de-tri","title":"Cl\u00e9 de tri","text":""},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#tri-des-types-classiques","title":"Tri des types classiques","text":"<ul> <li>Les nombres (<code>int</code>, <code>float</code>) sont tri\u00e9es classiquement :</li> </ul> <pre><code>&gt;&gt;&gt; sorted([5, 4, 8, 1, 2, 3])\n[1, 2, 3, 4, 5, 8]\n</code></pre> <ul> <li>Les cha\u00eenes de caract\u00e8res (<code>str</code>) sont tri\u00e9es par ordre alphab\u00e9tique :</li> </ul> <pre><code>&gt;&gt;&gt; sorted(['bateau', 'cuisine', 'arbre', 'dinde'])\n['arbre', 'bateau', 'cuisine', 'dinde']\n</code></pre> <ul> <li>Les tableaux (<code>list</code>) ou les p-uplets (<code>tuple</code>) sont tri\u00e9s par ordre lexicographique : on trie suivant le premier \u00e9l\u00e9ment, puis le deuxi\u00e8me etc.</li> </ul> <pre><code>&gt;&gt;&gt; sorted([(1, 2), (2, 5), (1, 1), (1, 3), (0, 1), (2, 6)])\n[(0, 1), (1, 1), (1, 2), (1, 3), (2, 5), (2, 6)]\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#tri-personnalise","title":"Tri personnalis\u00e9","text":"<p><code>sort</code> et <code>sorted</code> ont un param\u00e8tre nomm\u00e9 <code>key</code> qui permet de sp\u00e9cifier une fonction qui est appel\u00e9e sur chaque \u00e9l\u00e9ment de la liste avant d\u2019effectuer des comparaisons. Ainsi, cette fonction renvoie la plupart du temps un nombre, car les entiers et flottants sont facilement comparables. Cette fonction est parfois appel\u00e9e projecteur, car elle projette les \u00e9lements de la liste vers une valeur comparable (typiquement <code>int</code>). Sa signature usuel :</p> <pre><code>def projecteur(element_de_la_liste) -&gt; int:\n</code></pre> <p>Un premier exemple</p> <p>Par exemple, on peut trier une liste de couples de nombre suivant le second nombre gr\u00e2ce \u00e0 un projecteur  :</p> <pre><code>def second_proj(t: tuple) -&gt; int:\n    return t[1]\n</code></pre> <pre><code>&gt;&gt;&gt; tab = [(1, 2), (2, 5), (1, 1), (1, 3), (0, 1), (2, 2)]\n&gt;&gt;&gt; sorted(tab, key=second_proj)\n[(1, 1), (0, 1), (1, 2), (2, 2), (1, 3), (2, 5)]\n</code></pre> <p>Un second exemple</p> <p>Pour trier une liste de dictionnaires (une table), il faut n\u00e9cessairement sp\u00e9cifier un projecteur pour obtenir des \u00e9l\u00e9ments comparables. En effet, deux dictionnaires sont par d\u00e9faut incomparables.</p> <pre><code>releve =[{'Nom': 'Alice', 'Anglais': 17, 'Info': 18, 'Maths': 16},\n         {'Nom': 'Bob',   'Anglais': 19, 'Info': 13, 'Maths': 14},\n         {'Nom': 'Carol', 'Anglais': 15, 'Info': 17, 'Maths': 19}]\n</code></pre> <p>On peut trier la table suivant la note d'informatique gr\u00e2ce au projecteur :</p> <pre><code>def info_proj(d: dict):\n    return d['Info']\n</code></pre> <p>Ce projecteur prend donc un dictionnaire (un enregistrement) et renvoie la valeur \u00e0 la cl\u00e9 \"Info\" (le champ \"Info\").</p> <pre><code>&gt;&gt;&gt; sorted(releve, key=info_proj)\n[\n    {'Nom': 'Bob',   'Anglais': 19, 'Info': 13, 'Maths': 14},\n    {'Nom': 'Carol', 'Anglais': 15, 'Info': 17, 'Maths': 19},\n    {'Nom': 'Alice', 'Anglais': 17, 'Info': 18, 'Maths': 16},\n]\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/2operations/#exercices","title":"Exercices","text":"<p>Trier suivant la moyenne g\u00e9n\u00e9ral</p> <p>On travaille avec la m\u00eame table <code>releve</code> que pr\u00e9cedemment.</p> <ol> <li> <p>Ecrire le projecteur <code>moyenne_proj</code> qui permet de trier les enregistrements suivant la moyenne g\u00e9n\u00e9rale.</p> </li> <li> <p>En utilisant le param\u00e8tre <code>reverse</code>, trier la table <code>reverse</code> par ordre d\u00e9croissant de moyenne g\u00e9n\u00e9rale.</p> </li> </ol> <p>De retour \u00e0 Poudlard</p> <ol> <li> <p>Trier la table <code>table_hp</code> selon le champ <code>Character Name</code>.</p> </li> <li> <p>Trier la table <code>table_hp</code> selon le champ <code>\"House\"</code>, puis <code>\"Character Name\"</code>. (on rappelle que Python sait trier par d\u00e9faut des tuples...)</p> </li> </ol> <p>Encore des projecteurs</p> <p>On travaille maintenant sur la table des pays. Il faudra \u00e9crire les bons projecteurs pour r\u00e9pondre aux questions suivantes :</p> <ol> <li> <p>Afficher le nom des pays par ordre d\u00e9croissant de superficie.</p> </li> <li> <p>Afficher les 10 pays les moins peupl\u00e9s, dans l\u2019ordre inverse de leur population, sous la forme (pays, population).</p> </li> <li> <p>Afficher les 8 pays poss\u00e9dant la plus grande densit\u00e9 de population, dans l\u2019ordre inverse de densit\u00e9, sous la forme (pays, densit\u00e9). (attention aux conversions !)</p> </li> </ol>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/3fusion/","title":"Fusion de tables","text":""},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/3fusion/#fusion-de-tables","title":"Fusion de tables","text":"<p>Dans la vie r\u00e9elle, une base de donn\u00e9es se compose de plusieurs tables de donn\u00e9es plus ou moins reli\u00e9es entre-elles. Parfois deux tables partagent un m\u00eame champ qui va nous permettre de r\u00e9aliser une fusion de ces tables, c'est l'op\u00e9ration de jointure.</p>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/3fusion/#un-premier-exemple","title":"Un premier exemple","text":"<p>Par exemple, pr\u00e9sentons deux tables :</p> Nom Esp\u00e8ce Force Statut Dark Vador Humain oui Sith Obi-Wan Kenobi Humain oui Jedi R2-D2 Dro\u00efde non Astrom\u00e9cano Rey Humain oui Jedi Han Solo Humain non Contrebandier Leia Organa Humain oui S\u00e9natrice C-3PO Dro\u00efde non Protocole Luke Skywalker Humain oui Jedi Padm\u00e9 Amidala Humain non S\u00e9natrice Dark Sidious Humain oui Sith Nom Affiliation Dark Vador Empire Obi-Wan Kenobi R\u00e9publique R2-D2 R\u00e9publique Rey R\u00e9bellion Han Solo R\u00e9bellion Grand Moff Tarkin Empire Leia Organa R\u00e9bellion C-3PO R\u00e9publique Luke Skywalker R\u00e9bellion Padm\u00e9 Amidala R\u00e9publique Dark Sidious Empire <p>Ces deux tables partagent le m\u00eame champ \"Nom\", on peut donc les fusionner sur ce champ. C'est-\u00e0-dire construire une nouvelle table qui contient les valeurs des deux tables ( \u00e0 condition donc qu'elles poss\u00e8dent un champ commun) :</p> Nom Esp\u00e8ce Force Statut Affiliation Dark Vador Humain oui Sith Empire Obi-Wan Kenobi Humain oui Jedi R\u00e9publique R2-D2 Dro\u00efde non Astrom\u00e9cano R\u00e9publique Rey Humain oui Jedi R\u00e9bellion Han Solo Humain non Contrebandier R\u00e9bellion Leia Organa Humain oui S\u00e9natrice R\u00e9bellion C-3PO Dro\u00efde non Protocole R\u00e9publique Luke Skywalker Humain oui Jedi R\u00e9bellion Padm\u00e9 Amidala Humain non S\u00e9natrice R\u00e9publique Dark Sidious Humain oui Sith Empire"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/3fusion/#exercices","title":"Exercices","text":"<p>Les deux tables \u00e0 fusionner au format csv</p> <p>table1 et table2.</p> <p>Fusion par jointure</p> <p>La fusion par jointure consiste \u00e0 :</p> <ul> <li>cr\u00e9er une table vide qui accueillera les enregistrements contruits en fusionnant ceux des deux tables</li> <li>parcourir les enregistrements de la premi\u00e8re table</li> <li>pour chacun des enregistrements de la deuxi\u00e8me  table, regarder si les enregistrements ont la m\u00eame valeur pour le champ commun</li> <li>si c'est le cas, cr\u00e9er une copie de l'enregistrement de la premi\u00e8re table, \u00e0 laquelle on ajoute les donn\u00e9es (champ: valeur) de la deuxi\u00e8me table.</li> </ul> <pre><code>def fusion(table1: list, table2: list, champ: str) -&gt; list:\n    nouvelle_table = ...\n    for e1 in table1: # e pour enregistrement\n        for e2 in table2:\n            if ...:\n                e = dict(e1)\n                for champ in ...:\n                    if ...:\n                        e[champ] = ...\n                nouvelle_table.append(...)\n    return ...\n</code></pre>"},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/4tp/","title":"TP Pok\u00e9dex","text":""},{"location":"3%20%E2%80%93%20Tables%20de%20donn%C3%A9es/4tp/#tp-pokedex","title":"TP Pok\u00e9dex","text":"<p>Dans tout ce TP, on manipulera la table contenue dans ce fichier. </p> <ol> <li>Commencez par ouvrir le fichier avec l'\u00e9diteur de texte. Contr\u00f4lez le d\u00e9limiteur utilis\u00e9.</li> <li>Importez les donn\u00e9es dans une table.</li> <li>Existe-t-il un pokemon dont le nom est <code>Apireine</code> ? Si oui, quel est son <code>'Nom US'</code>?</li> <li>Modifiez la table pour ne conserver que les champs:      <pre><code>'Nom', 'Type', 'PV', 'Attaque', 'D\u00e9fense', 'code'\n</code></pre></li> <li>Combien de pokemons ont une <code>'Attaque'</code> sup\u00e9rieure ou \u00e9gale \u00e0 50?</li> <li>\u00c0 partir de la table initiale, cr\u00e9ez une nouvelle table qui ne contient que les pokemons de type <code>'Plante'</code>.</li> <li>Cr\u00e9ez une nouvelle table tri\u00e9e sur le champ <code>'PV'</code> par ordre d\u00e9croissant.</li> <li>Voici une table des coordonn\u00e9es g\u00e9ographiques des communes fran\u00e7aises. Cr\u00e9ez une nouvelle table en fusionnant les deux tables sur le champ <code>'code'</code>.</li> <li>Cr\u00e9ez une carte avec folium pour localiser les pok\u00e9mons !</li> </ol> <p>Cr\u00e9er une carte avec le module <code>folium</code></p> <p>Le module <code>folium</code> de Python permet de cr\u00e9er une carte au format <code>html</code> gr\u00e2ce \u00e0 OpenStreetMap et le module <code>webbrowser</code> permet de l'afficher dans un navigateur.</p> <pre><code>import folium\nimport webbrowser\n\npos = [48.8704, 2.31673] # coordonn\u00e9es g\u00e9ographiques\n\nc = folium.Map(location=pos, zoom_start=15) # cr\u00e9ation d'une carte centr\u00e9 en `pos`\n\nfolium.Marker(location=pos, popup=\"Qui habite ici ?\").add_to(c) # ajout d'un marqueur sur la carte\n\nc.save('maCarte.html') # sauvegarde la carte au format HTML\nwebbrowser.open('maCarte.html') # affiche la carte dans un navigateur\n</code></pre> <p>Il est possible d'ajouter autant de marqueurs que souhait\u00e9.</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/1intro/","title":"Interactions entre l'Homme et la Machine sur le Web","text":""},{"location":"4%20%E2%80%93%20IHM%20Web/1intro/#interactions-entre-lhomme-et-la-machine-sur-le-web","title":"Interactions entre l'Homme et la Machine sur le Web","text":"<p>Au cours de la s\u00e9ance de travaux pratiques sur Filius, nous avons \u00e9tudi\u00e9 le mod\u00e8le client-serveur. Dans ce mod\u00e8le, un h\u00f4te du r\u00e9seau, appel\u00e9 client, demande une ressource \u00e0 un autre h\u00f4te, le serveur Web, en utilisant g\u00e9n\u00e9ralement le protocole HTTP.</p> <p>En termes de terminologie, il est courant de dire que le client \u00e9met une requ\u00eate et que le serveur fournit une r\u00e9ponse.</p> <p></p> <p>L'une des ressources les plus courantes est une \u00ab page Web \u00bb, qui est g\u00e9n\u00e9ralement l'association de trois fichiers :</p> <ul> <li> <p> Un fichier HTML <code>.html</code> contenant le script qui d\u00e9finit la structure de base de la page.</p> </li> <li> <p> Un fichier CSS <code>.css</code> responsable de la mise en forme, du style ou de la pr\u00e9sentation de la page.</p> </li> <li> <p> Un fichier JavaScript <code>.js</code> ajoutant de l'interactivit\u00e9 au site Web.</p> </li> </ul> <p>Le navigateur Web (Firefox, Chrome, Edge, Opera, Safari etc.) combine alors ces diff\u00e9rents fichiers pour afficher le site Web \u00e0 l'utilisateur. Bien s\u00fbr, d'autres ressources telles que des images ou des vid\u00e9os sont \u00e9galement incluses dans de telles pages.</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/2static/","title":"Page statique : HTML & CSS","text":""},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#page-statique-html-css","title":"Page statique : HTML &amp; CSS","text":"<p>Concentrons-nous sur le sc\u00e9nario le plus simple, o\u00f9 le serveur envoie une page statique, c'est-\u00e0-dire identique pour tous les clients et qui ne pr\u00e9sente aucune interactivit\u00e9. Une telle page ne n\u00e9cessite qu'un fichier HTML et optionnellement un fichier CSS.</p> <p></p>"},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#les-bases-de-lhtml","title":"Les bases de l'HTML","text":""},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#un-langage-de-balisage","title":"Un langage de balisage","text":"<p>L'HTML n'est pas un langage de programmation, mais un langage de balisage utilis\u00e9 pour structurer le contenu des pages Web.</p> <p>Un fichier HTML est compos\u00e9 d'une s\u00e9rie d'\u00e9l\u00e9ments avec lesquels vous pouvez encadrer (ou baliser) diff\u00e9rentes parties du contenu pour les faire appara\u00eetre ou agir d'une certaine mani\u00e8re. Des balises encadrantes peuvent transformer une petite partie de contenu en un lien vers une autre page sur le Web, mettre des mots en italique, etc. Par exemple :</p> Code HTML Rendu <code>T'as les crampt\u00e9s ?</code> T'as les crampt\u00e9s ? <code>T'as les &lt;strong&gt;crampt\u00e9s&lt;/strong&gt; ?</code> T'as les crampt\u00e9s ? <p>Tester les exemples</p> <p>Pour tester un code HTML, il existe deux mani\u00e8res courantes. Soit simplement copier-coller le code HTML dans un fichier <code>ma_page.html</code> puis l'ouvrir avec un navigateur web. Soit utiliser un site web de type \u00ab sandbox \u00bb comme Playcode.io : cette derni\u00e8re m\u00e9thode est plus confortable pour tester rapidement et partager facilement des bouts de code.</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#anatomie-dun-element-html","title":"Anatomie d'un \u00e9l\u00e9ment HTML","text":""},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#imbrication-des-elements","title":"Imbrication des \u00e9l\u00e9ments","text":"<p>Les \u00e9l\u00e9ments peuvent \u00eatre imbriqu\u00e9s :</p> <pre><code>&lt;p&gt;T'as les &lt;strong&gt;crampt\u00e9s&lt;/strong&gt; ?&lt;/p&gt;\n</code></pre> <p>Question</p> <p>Quelles sont les erreurs dans l'extrait de code HTML suivant ?</p> <pre><code>&lt;/balise1&gt;\n    &lt;balise2&gt;\n    &lt;balise1&gt;\n&lt;/balise2&gt;\n</code></pre>"},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#elements-bloc-vs-en-ligne","title":"\u00c9l\u00e9ments bloc vs en ligne","text":"<p>Les \u00e9l\u00e9ments de niveau bloc forment un bloc visible sur une page, tandis que les \u00e9l\u00e9ments en ligne ne fait pas appara\u00eetre une nouvelle ligne.</p> <pre><code>&lt;em&gt;Alice&lt;/em&gt;&lt;em&gt;Bob&lt;/em&gt;&lt;em&gt;Charlie&lt;/em&gt;\n\n&lt;p&gt;\u2014 T'as les crampt\u00e9s ?&lt;/p&gt;&lt;p&gt;\u2014 Quoi ?&lt;/p&gt;&lt;p&gt;\u2014 Quoicoubet !&lt;/p&gt;\n</code></pre> <p>Question</p> <p>L'\u00e9l\u00e9ment <code>&lt;p&gt;</code> fait partie de quelle cat\u00e9gorie ? De m\u00eame pour <code>&lt;em&gt;</code> ?</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#une-premiere-page-web-structuree","title":"Une premi\u00e8re page web structur\u00e9e","text":"<p>Voici une page web compl\u00e8te et minimale :</p> <pre><code>&lt;!DOCTYPE html&gt; &lt;!-- (1)! --&gt;\n&lt;html lang=fr&gt; &lt;!-- (2)! --&gt;\n    &lt;head&gt; &lt;!-- (3)! --&gt;                                      \n        &lt;meta charset=\"utf-8\"&gt; \n        &lt;title&gt;Je suis le titre de l'onglet&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt; &lt;!-- (4)! --&gt; \n        &lt;h1&gt;Ma magnifique page web \ud83c\udf08&lt;/h1&gt; &lt;!-- (5)! --&gt; \n        &lt;p&gt; &lt;!-- (6)! --&gt; \n            Un texte tr\u00e8s &lt;strong&gt;int\u00e9ressant&lt;/strong&gt;. \n        &lt;/p&gt;\n        &lt;a href=\"http://www.lyceecivray.net\"&gt;Un super site !&lt;/a&gt; &lt;!-- (7)! --&gt; \n        &lt;!-- Un commentaire... --&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>D\u00e9clare quelle version du langage HTML utiliser.</li> <li> <ul> <li>l\u2019\u00e9l\u00e9ment <code>&lt;html&gt;</code> est l\u2019\u00e9l\u00e9ment racine du document. Tous les autres \u00e9l\u00e9ments du document en seront des descendants. </li> <li><code>lang</code> est ce qu'on appelle un attribut. Les \u00e9l\u00e9ments HTML peuvent recevoir des attributs, c'est-\u00e0-dire des informations suppl\u00e9mentaires.</li> </ul> </li> <li><code>&lt;head&gt;</code> fournit des informations et des m\u00e9tadonn\u00e9es sur le document HTML lui-m\u00eame. Il ne repr\u00e9sente pas le contenu visible de la page.</li> <li><code>&lt;body&gt;</code> est l'\u00e9lement qui contient le contenu visible de la page.</li> <li><code>&lt;h1&gt;</code> repr\u00e9sente un titre (header en anglais). Il existe diff\u00e9rents sous-niveaux de titre par ordre d\u00e9croissant d'importance : <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code> etc.</li> <li><code>&lt;p&gt;</code> repr\u00e9sente un paragraphe.</li> <li><code>&lt;a&gt;</code> repr\u00e9sente une ancre qui permet de d\u00e9finir un lien hypertexte absolu ou relatif.</li> </ol> <p>Question</p> <p>R\u00e9pondre \u00e0 l'aide de recherches sur le web :</p> <ol> <li>Quelle est la balise permettant d'ins\u00e9rer une image dans une page web ? Combien d'attributs obligatoires et non-obligatoires comporte-t-elle?</li> <li>Quelles sont les balises pour ins\u00e9rer des listes ordonn\u00e9es et non-ordonn\u00e9es ?</li> <li>Les tabulations sont-elles n\u00e9cessaires dans le code HTML ?</li> <li>R\u00e9aliser une petite page web qui pr\u00e9sente votre album de musique pr\u00e9f\u00e9r\u00e9 (titre, pochette, description, liste des titres, un lien vers le site du groupe etc.). Exemple de page. Un autre projet serait de r\u00e9aliser une page web pr\u00e9sentant la biographie d'une personnalit\u00e9.</li> </ol> <p>On retient</p> <p>On retient que le ficher HTML d\u00e9crit de mani\u00e8re structur\u00e9 le contenu d'une page web gr\u00e2ce \u00e0 un syst\u00e8me de balises.</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#styliser-sa-page-avec-du-css","title":"Styliser sa page avec du CSS","text":"<p>Soyons honn\u00eate, le site web cr\u00e9e pr\u00e9c\u00e9demment est objectivement laid. Le langage CSS (Cascading Style Sheets, feuilles de style en cascade) permet de mettre en forme, styliser, une page web comme changer la fonte de caract\u00e8res ou la couleur d'un titre, centrer une image, agencer diff\u00e9rents \u00e9l\u00e9ments sous la forme d'une grille etc.</p> <p>On peut par exemple incorporer du CSS directement dans le fichier HTML en sp\u00e9cifiant l'attribut <code>style</code> :</p> <pre><code>&lt;h1 style=\"color: red;\"&gt;Ma magnifique page web \ud83c\udf08&lt;/h1&gt;\n&lt;p style=\"text-align: center;\"&gt;\n    Un texte tr\u00e8s &lt;strong&gt;int\u00e9ressant&lt;/strong&gt;.\n&lt;/p&gt;\n</code></pre> <p>Toutefois, ceci est une mauvaise pratique, il est pr\u00e9f\u00e9rable de sp\u00e9cifier le style d'une page web dans un fichier CSS s\u00e9par\u00e9 du code HTML. Ainsi plusieurs documents HTML peuvent partager le m\u00eame style ! Toute modification ult\u00e9rieure du style sera ainsi plus ais\u00e9e.</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#appliquer-un-style-css","title":"Appliquer un style CSS","text":""},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#un-premier-exemple","title":"Un premier exemple","text":"<p>Dans un fichier nomm\u00e9 <code>mon_style.css</code> :</p> mon_style.css<pre><code>body {\nfont-family: sans-serif; /* (1)! */\n}\n\nh1 /*(2)!*/\n{\ncolor: red;\n}\n</code></pre> <ol> <li> <p>Change la police d'\u00e9criture de l'ensemble du document HTML <code>&lt;body&gt;</code>.</p> </li> <li> <p>Applique un style particulier \u00e0 tous les \u00e9l\u00e9ments <code>&lt;h1&gt;</code>.</p> </li> </ol> <p>Ce fichier CSS peut \u00eatre ensuite appliqu\u00e9 au document HTML au sein de l'\u00e9l\u00e9ment <code>&lt;head&gt;</code> :</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"style.css\"/&gt;\n</code></pre> <p>Question</p> <p>Qu'ajouter au fichier CSS pour que tous les paragraphes soient bleus ?</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#anatomie-dune-regle-css","title":"Anatomie d'une r\u00e8gle CSS","text":""},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#proprietes","title":"Propri\u00e9t\u00e9s","text":"<p>On peut modifier plusieurs propri\u00e9t\u00e9s d'un coup :</p> <pre><code>p {\ncolor: red;\nwidth: 500px;\nborder: 1px solid black;\n}\n</code></pre> <p>Comment centrer une page ? Comment mettre la police en gras ? Comment changer la couleur d'un lien quand le curseur le survole ? Le Web et ChatGPT seront vos plus pr\u00e9cieux alli\u00e9s pour mettre en forme votre page. Et comme pour tous langages, il existe aussi de nombreux cheatsheets pour le CSS.</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/2static/#selecteurs","title":"S\u00e9lecteurs","text":"<p>Il existe de nombreuses mani\u00e8res de s\u00e9lectionner des \u00e9l\u00e9ments sp\u00e9cifiques de la page pour modifier leur apparence. Gr\u00e2ce \u00e0 des attributs :  </p> S\u00e9lection par IDS\u00e9lection par Classe <p>Un \u00e9l\u00e9ment HTML peut se voir attribuer un identifiant (id) :</p> HTML<pre><code>&lt;p id=\"rage\"&gt;JE SUIS TR\u00c8S \u00c9NERV\u00c9&lt;/p&gt;\n</code></pre> CSS<pre><code>#rage {\nfont-size: 36px;\ntext-align: center;\ncolor: red;\n}\n</code></pre> <p>Un identifiant doit \u00eatre sp\u00e9cifique \u00e0 un unique \u00e9l\u00e9ment !</p> <p>De mani\u00e8re plus g\u00e9n\u00e9rale, plusieurs \u00e9l\u00e9ments HTML peuvent se voir attribuer une classe : </p> HTML<pre><code>&lt;p class=\"rome\"&gt;Senatus populusque romanus&lt;/p&gt;\n</code></pre> CSS<pre><code>.rome {\nfont-family: 'Courier New';\nfont-weight: bold;\ntext-transform: uppercase;\nborder: 3px solid black;\n}\n</code></pre> <p>Cette m\u00e9thode est tr\u00e8s utilis\u00e9e en combinaison avec les \u00e9l\u00e9ments HTML <code>&lt;div&gt;</code> et <code>&lt;span&gt;</code> qui agissent comme des conteneurs universels. </p> <p>Question</p> <p>\u00c9crire un style CSS pour votre page web.</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/3js/","title":"Page dynamique : JavaScript","text":""},{"location":"4%20%E2%80%93%20IHM%20Web/3js/#page-dynamique-javascript","title":"Page dynamique : JavaScript","text":"<p>Une page web peut aussi comporter du code JavaScript qui est ex\u00e9cut\u00e9 par le navigateur Web du client. Le langage de programmation JavaScript  (abr\u00e9g\u00e9 JS) permet de modifier dynamiquement le contenu d'une page web, de manipuler et de mettre \u00e0 jour le document HTML, le style CSS et m\u00eame d'interagir avec des \u00e9l\u00e9ments multim\u00e9dias, des formulaires et des donn\u00e9es.</p> <p>Il est important de noter que le serveur Web fournit ici toujours la m\u00eame page web (les m\u00eames fichiers HTML, CSS et JS) aux diff\u00e9rents clients. Le serveur Web peut aussi g\u00e9n\u00e9rer dynamiquement du contenu en utilisant des langages de programmation c\u00f4t\u00e9 serveur (backend) tels que PHP, Python, Ruby, Java, ou des frameworks tels que Node.js et g\u00e9n\u00e9rer une r\u00e9ponse personnalis\u00e9e pour chaque client.</p>"},{"location":"4%20%E2%80%93%20IHM%20Web/3js/#un-premier-script-js","title":"Un premier script JS","text":"Document HTMLScript JS page.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Un premier script&lt;/title&gt;\n&lt;script src=\"/script.js\"&gt;&lt;/script&gt; &lt;!-- (1)! --&gt;\n&lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Une page web extr\u00eamement dynamique&lt;/h1&gt;\n    &lt;p&gt;\n      Pour changer la couleur de l'arri\u00e8re-plan :\n      &lt;button onclick=\"change_couleur()\"&gt;Cliquez ici !&lt;/button&gt; &lt;!-- (2)! --&gt;\n&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li> <p>On lie le script JavaScript <code>script.js</code> au document HTML. </p> </li> <li> <p>Quand l'utilisateur clique sur le bouton, la fonction <code>change_couleur</code> est ex\u00e9cut\u00e9e.</p> </li> </ol> script.js<pre><code>console.log(\"D\u00e9marrage du script...\"); //(1)! \n\nfunction change_couleur()\n{\nif (document.body.style.backgroundColor === 'lightblue') {\ndocument.body.style.backgroundColor = 'lightcoral';\n} else {\ndocument.body.style.backgroundColor = 'lightblue';\n}\n}\n</code></pre> <ol> <li>Affiche du texte dans la console.</li> </ol> <p>Question</p> <p>Modifier la page Web pour rajouter plusieurs boutons qui change la couleur de l'arri\u00e8re-plan. On veut aboutir \u00e0 :</p> <pre><code>&lt;button onclick=\"change_couleur('red')\"&gt;Rouge&lt;/button&gt;\n</code></pre>"},{"location":"4%20%E2%80%93%20IHM%20Web/3js/#un-lancer-de-des","title":"\ud83c\udfb2 Un lancer de d\u00e8s","text":"<p>Modifier un \u00e9l\u00e9ment HTML suivant son identifiant</p> page.html<pre><code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;\n\n&lt;p id=\"toto\"&gt;Oui&lt;/p&gt;\n&lt;button onclick=\"modifier_texte()\"&gt;Clic&lt;/button&gt;\n</code></pre> script.js<pre><code>function modifier_texte()\n{\nvar toto = document.getElementById(\"toto\");\ntoto.innerHTML = \"Non\";\n}\n</code></pre> <p>Nombre al\u00e9atoire en JavaScript</p> <p>Pour tirer un entier al\u00e9atoirement en JavaScript entre <code>0</code> et <code>max</code> (extr\u00e9mit\u00e9s incluses) :  </p><pre><code>var resultat = Math.floor(Math.random() * max);\n</code></pre> <p>Question</p> <p>G\u00e9n\u00e9rer une page web qui puisse simuler un lancer de d\u00e8s \u00e0 6 faces (une am\u00e9lioration serait de proposer des d\u00e8s \u00e0 20 faces et 100 faces). Inclure un style CSS !</p>"},{"location":"5%20%E2%80%93%20Architecture/1intro/","title":"Le mod\u00e8le d'architecture s\u00e9quentielle (Von Neumann)","text":""},{"location":"5%20%E2%80%93%20Architecture/1intro/#le-modele-darchitecture-sequentielle-von-neumann","title":"Le mod\u00e8le d'architecture s\u00e9quentielle (Von Neumann)","text":""},{"location":"5%20%E2%80%93%20Architecture/1intro/#introduction","title":"Introduction","text":""},{"location":"5%20%E2%80%93%20Architecture/1intro/#les-deux-elements-constitutifs-de-toute-machine","title":"Les deux \u00e9l\u00e9ments constitutifs de toute machine","text":"<p>Une machine manipule des donn\u00e9es. Une machine est donc constitu\u00e9e de deux \u00e9l\u00e9ments principaux :</p> <ul> <li> <p> La m\u00e9moire (RAM) qui stocke les donn\u00e9es, dont les programmes dans le mod\u00e8le de Von Neumann.</p> </li> <li> <p> Le processeur (CPU) qui traite les donn\u00e9es (addition, soustraction, et logique, etc.).</p> </li> </ul> <p> </p>"},{"location":"5%20%E2%80%93%20Architecture/1intro/#le-cycle-instruction","title":"Le cycle instruction","text":"<p>Le cycle de base d'une machine s\u00e9quentielle est le suivant :</p> <ol> <li> <p>Le processeur r\u00e9cup\u00e8re l'instruction \u00e0 ex\u00e9cuter en m\u00e9moire</p> </li> <li> <p>Le processeur d\u00e9code et ex\u00e9cute l'instruction</p> </li> <li> <p>Le processeur passe \u00e0 l'instruction suivante et ainsi de suite</p> </li> </ol> <p>Pour plus de d\u00e9tails.</p>"},{"location":"5%20%E2%80%93%20Architecture/1intro/#la-memoire","title":"La m\u00e9moire","text":"<p>La m\u00e9moire est un simple tableau d\u00e9coup\u00e9 en octets dont les indices sont appel\u00e9es adresses. Elle est aussi appel\u00e9e m\u00e9moire vive, ou encore RAM pour Random Access Memory, car l'acc\u00e8s \u00e0 une valeur \u00e0 une adresse arbitraire est imm\u00e9diat (de complexit\u00e9 constante).</p> <p> </p> La taille des adresses <p>Une machine est dite 32 bits si une adresse s'\u00e9crit sur 32 bits. On peut donc adresser \\(2^{32}\\) valeurs (octets). La taille maximale d'une telle m\u00e9moire est donc de \\(2^{32}\\) octets, soit \\(8 \\cdot 2^{32}\\) bits, soit 4 Gio.</p> <p>Aujourd'hui les machines sont g\u00e9n\u00e9ralement 64 bits. Quelle serait la taille maximale d'une telle m\u00e9moire ?</p> <p>Les adresses d'une GameBoy sont cod\u00e9es sur 16 bits. Quelle serait la taille maximale d'une telle m\u00e9moire ?</p> <p>Les donn\u00e9es sont transf\u00e9r\u00e9es entre la processeur et la m\u00e9moire via un bus.</p>"},{"location":"5%20%E2%80%93%20Architecture/1intro/#le-processeur","title":"Le processeur","text":""},{"location":"5%20%E2%80%93%20Architecture/1intro/#les-registres","title":"Les registres","text":"Le besoin d'une m\u00e9moire de travail <p>Imaginons les 4 instructions suivantes :</p> <ol> <li> <p>Lire l\u2019octet \u00e0 l\u2019adresse  <code>0x781A</code> 42</p> </li> <li> <p>Lire l\u2019octet \u00e0 l\u2019adresse <code>0xEF01</code> 24</p> </li> <li> <p>Additionner ces deux valeurs  66</p> </li> <li> <p>\u00c9crire le r\u00e9sultat \u00e0 l'adresse <code>0x1123</code></p> </li> </ol> <p>O\u00f9 sont stock\u00e9es temporairement les valeurs lues et la somme calcul\u00e9e ? Dans la petite m\u00e9moire de travail int\u00e9gr\u00e9e au processeur, les registres !</p> <p>Le processeur poss\u00e8de un petit nombre de cases m\u00e9moires rapides appel\u00e9es registres qui lui permet de stocker temporairement des donn\u00e9es pour les manipuler.</p> Les registres d'une GameBoy <p>Par exemple, le processeur d'une GameBoy poss\u00e8de 7 registres principaux d'un octet chacun, nomm\u00e9s <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code>, <code>H</code> et <code>L</code>. Le programme pr\u00e9c\u00e9dent peut s'\u00e9crire plus pr\u00e9cis\u00e9ment :</p> <ol> <li> <p>Lire l'octet \u00e0 l'adresse <code>0x781A</code> et l'affecter au registre <code>A</code></p> </li> <li> <p>Lire l'octet \u00e0 l'adresse <code>0xEF01</code> et l'affecter au le registre <code>B</code></p> </li> <li> <p>Ajouter la valeur du registre <code>B</code> \u00e0 la valeur du registre <code>A</code></p> </li> <li> <p>\u00c9crire la valeur du registre <code>A</code> \u00e0 l'adresse <code>0x1123</code></p> </li> </ol> <p>Un processeur stocke aussi l'adresse de l'instruction en cours d\u2019ex\u00e9cution (ou la suivante selon l'architecture) dans le registre <code>PC</code> (Program Counter en anglais, ou compteur ordinal en fran\u00e7ais) et cette instruction en elle-m\u00eame dans le registre <code>IR</code> (ou <code>CIR</code> pour Current Instruction Register, le Registre d'Instruction).</p>"},{"location":"5%20%E2%80%93%20Architecture/1intro/#les-deux-unites-alu-et-cu","title":"Les deux unit\u00e9s ALU et CU","text":"<p>Un processeur peut \u00eatre d\u00e9compos\u00e9e en deux unit\u00e9s :</p> <ul> <li> <p> L\u2019Unit\u00e9 Arithm\u00e9tique et Logique (ALU) permet de r\u00e9aliser un petit nombre d\u2019op\u00e9rations simples (addition, soustraction, op\u00e9rateurs logiques, comparisons etc.). Le r\u00e9sultat de ces op\u00e9rations est stock\u00e9 dans un registre appel\u00e9 accumulateur (souvent le registre <code>A</code>).</p> </li> <li> <p> L\u2019Unit\u00e9 de Commande (CU) organise le flot de s\u00e9quencement des instructions. Il g\u00e8re par exemple le registre <code>PC</code> et <code>IR</code>, la r\u00e9cup\u00e9ration des instructions, les instructions de saut etc.</p> </li> </ul>"},{"location":"5%20%E2%80%93%20Architecture/1intro/#resume","title":"R\u00e9sum\u00e9","text":""},{"location":"5%20%E2%80%93%20Architecture/1intro/#les-instructions","title":"Les instructions","text":""},{"location":"5%20%E2%80%93%20Architecture/1intro/#code-operation","title":"Code op\u00e9ration","text":"<p>Une instruction est un simple mot binaire cod\u00e9 sur un ou plusieurs octets. Par exemple, si le processeur de la GameBoy lit l'instruction <code>00111100</code> (opcode, ou code op\u00e9ration), il ex\u00e9cutera \"Augmenter de 1 le registre <code>A</code>\". Chaque type de processeur interpr\u00e8te donc ces mots binaires suivant sa propre architecture et l'agencement de ses transistors.</p> <p>Le jeu d'instructions est l'ensemble des instructions qu'un processeur peut ex\u00e9cuter. Par exemple, les instructions du processeur DMG-01 de la GameBoy sont disponibles ici.</p>"},{"location":"5%20%E2%80%93%20Architecture/1intro/#lassembleur","title":"L'assembleur","text":"<p>On peut associer au code binaire des instructions un code mn\u00e9monique. Par exemple, le code op\u00e9ration <code>00111100</code> peut se lire plus facilement comme <code>INC A</code> (incr\u00e9menter le registre <code>A</code>). C'est l'assembleur, le langage de plus bas niveau qui repr\u00e9sente le langage machine sous une forme lisible par un humain. </p> Code Pok\u00e9mon Bleu <p>Par exemple, on peut r\u00e9cup\u00e9rer quelques instructions du code du jeu Pok\u00e9mon Bleu :</p> <p><code>00011010 00100010 00010011 01111000</code> (ou en hexad\u00e9cimal <code>0x1A 0x22 0x13 0x03 0x78</code>)</p> <p>Ce qui correspond au code assembleur suivant :</p> <pre><code>LD A, (DE) # (1)!\nLD (HL+), A # (2)!\nINC DE # (3)!\nDEC BC # (4)!\nLD A, B # (5)!\n</code></pre> <ol> <li> <p>On lit l'octet \u00e0 l'adresse <code>DE</code> (une adresse de 16 bits) dans la m\u00e9moire et on l'affecte au registre <code>A</code>. On remarque que la GameBoy peut combiner deux registres d'un octet pour former un registre de 16 bits ! <code>LD</code> veut dire Load, charger.</p> </li> <li> <p>On affecte la valeur du registre <code>A</code> dans la m\u00e9moire \u00e0 l'adresse <code>HL</code>, on incr\u00e9mente le registre <code>HL</code> ensuite.</p> </li> <li> <p>On incr\u00e9mente le registre <code>DE</code>.</p> </li> <li> <p>On d\u00e9cr\u00e9mente le registre <code>BC</code>.</p> </li> <li> <p>On affecte <code>B</code> \u00e0 <code>A</code>. </p> </li> </ol> <p>Ce qui est bien plus compr\u00e9hensible !</p> <p>Le langage assembleur permet notamment d'\u00e9crire les valeurs manipul\u00e9es en base d\u00e9cimale, de nommer les adresses (similaire au nom d'une variable !), d'agencer des sections etc. Le programme assembleur convertit alors ce code en code machine de fa\u00e7on quasi-imm\u00e9diate.</p>"},{"location":"5%20%E2%80%93%20Architecture/1intro/#operandes","title":"Op\u00e9randes","text":"<p>Les op\u00e9randes d\u00e9signent les entr\u00e9es des instructions, par exemple l'op\u00e9ration <code>LD</code> (Load, l'affectation) demande deux op\u00e9randes sous la forme <code>LD OP1, OP2</code>, ce qui correspond \u00e0 affecter <code>OP2</code> \u00e0 <code>OP1</code>.</p> <p><code>OP1</code> peut d\u00e9signer un registre, une valeur dans la m\u00e9moire (gr\u00e2ce \u00e0 son adresse) etc. Si <code>OP2</code> peut \u00eatre un registre ou un emplacement m\u00e9moire, elle peut aussi d\u00e9signer une valeur imm\u00e9diate, c'est-\u00e0-dire une valeur qui est soit dans l'instruction-machine en elle-m\u00eame ou une valeur qui suit imm\u00e9diatement l'instruction (d\u00e9pend de l'architecture).</p> Adressage indirect <p>Une valeur peut \u00eatre d\u00e9r\u00e9f\u00e9renc\u00e9e pour qu'elle soit interpr\u00e9t\u00e9e comme une adresse. Par exemple, un registre peut contenir une adresse, on dit alors qu'il est un pointeur, car il pointe vers un emplacement m\u00e9moire. On peut alors acc\u00e9der \u00e0 la valeur \u00e0 cette adresse gr\u00e2ce au d\u00e9r\u00e9f\u00e9rencement :</p> <pre><code>    LD A, B    #(1)!\nLD A, (B)  #(2)!\n</code></pre> <ol> <li> <p>On affecte \u00e0 <code>A</code>, la valeur <code>B</code>.</p> </li> <li> <p>On affecte \u00e0 <code>A</code>, la valeur \u00e0 l'emplacement d'adresse <code>B</code>.</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/2complements/","title":"Compl\u00e9ments","text":""},{"location":"5%20%E2%80%93%20Architecture/2complements/#complements","title":"Compl\u00e9ments","text":""},{"location":"5%20%E2%80%93%20Architecture/2complements/#lalu-plus-en-details","title":"L'ALU plus en d\u00e9tails","text":"<p>L'unit\u00e9 arithm\u00e9tique et logique est souvent repr\u00e9sent\u00e9e par ce sch\u00e9ma en V :</p> <p> </p> <p>Les drapeaux (flags) sont des r\u00e9sultats secondaires de l'ALU.</p> Les drapeaux de la GameBoy <p>Par exemple, la GameBoy poss\u00e8de 4 drapeaux de 1 bit chacun, qui correspondent aux 4 derniers bits de son registre <code>F</code> :</p> <ul> <li> <p><code>Z</code>(Zero Flag) vaut 1 si le r\u00e9sultat est nul, 0 sinon.</p> </li> <li> <p><code>CY</code> (Carry Flag) vaut 1 s'il y a eu un d\u00e9passement, 0 sinon.</p> </li> <li> <p><code>N</code> (Subtract Flag) vaut 1 si l'op\u00e9ration \u00e9tait une soustraction, 0 sinon.</p> </li> <li> <p><code>HC</code>(Half-Carry Flag) vaut 1 s'il y a eu un d\u00e9passement sur les 4 premiers bits, 0 sinon.</p> </li> </ul> <p>Par exemple, on ex\u00e9cute l'instruction <code>ADD A, B</code> (ajouter le registre <code>B</code> au registre <code>A</code>) avec le registre <code>A = 10010001</code> (\\(145_{10}\\)) et <code>B = 10010001</code> (\\(131_{10}\\)). La fonction demand\u00e9e \u00e0 l'ALU est la fonction d'addition <code>ADD</code>. Math\u00e9matiquement, \\(145 + 131 = 276 = (100010100)_2\\), le r\u00e9sultat s'\u00e9crit donc sur 9 bits. Ainsi le r\u00e9sultat, de taille fixe limit\u00e9e \u00e0 8 bits (la taille du registre de destination <code>A</code>), sera la valeur tronqu\u00e9e <code>00010100</code>. Comme il y a eu un d\u00e9passement, le drapeau de retenue <code>CY</code>sera lev\u00e9, c'est-\u00e0-dire mis \u00e0 1.</p> <p>Quelles seraient les valeurs des autres drapeaux apr\u00e8s une telle op\u00e9ration ?</p> <p>L'ALU est un circuit compos\u00e9 de transistors assembl\u00e9s en portes logiques. Puisque vous avez d\u00e9j\u00e0 r\u00e9alis\u00e9 un additionneur binaire 8 bits avec des portes logiques, vous avez en quelque sorte d\u00e9j\u00e0 con\u00e7u un mini-ALU !</p>"},{"location":"5%20%E2%80%93%20Architecture/2complements/#cycles-dhorloge","title":"Cycles d'horloge","text":"<p>Le processeur est cadenc\u00e9 au rythme d'une horloge interne de fr\u00e9quence constante (en Hertz). Un cycle d'horloge correspond \u00e0 la dur\u00e9e d'un cycle, soit l'inverse de la fr\u00e9quence. Par exemple, le CPU de mon ordinateur est cadenc\u00e9 \u00e0 3.3 Ghz, il effectue donc 3.3 milliards de cycles par seconde. Une instruction peut prendre un ou plusieurs cycles pour \u00eatre compl\u00e8tement r\u00e9alis\u00e9e.</p> <p> </p>"},{"location":"5%20%E2%80%93%20Architecture/2complements/#les-differents-types-de-memoire","title":"Les diff\u00e9rents types de m\u00e9moire","text":""},{"location":"5%20%E2%80%93%20Architecture/2complements/#volatilite","title":"Volatilit\u00e9","text":"<p>On distingue deux types de m\u00e9moire :</p> <ul> <li> <p>La m\u00e9moire volatile si la m\u00e9moire perd son contenu lorsqu'elle n'est plus aliment\u00e9e.</p> </li> <li> <p>La m\u00e9moire permanente si la m\u00e9moire converse son contenu lorsqu'elle n'est plus aliment\u00e9e.</p> </li> </ul>"},{"location":"5%20%E2%80%93%20Architecture/2complements/#memoire-de-stockage","title":"M\u00e9moire de Stockage","text":"<p>Si la m\u00e9moire RAM vue jusqu'\u00e0 pr\u00e9sent est volatile, les m\u00e9moires permanentes comme les disques durs (HDD) ou les SDD sont n\u00e9cessaires pour stocker des donn\u00e9es une fois la machine \u00e9teinte. On les appelle m\u00e9moire de stockage (ou m\u00e9moire de masse) pour cette raison. Ces m\u00e9moires visent \u00e0 obtenir une capacit\u00e9 de stockage \u00e9lev\u00e9e \u00e0 faible co\u00fbt, avec la contrepartie d'\u00eatre moins rapides.</p> La m\u00e9moire morte (ROM) <p>Une m\u00e9moire de stockage peut \u00eatre de type ROM (Read Only Memory, ou m\u00e9moire morte), qui ne peut \u00eatre que lue (pas d'\u00e9criture possible) : les cartouches de jeu de la GameBoy en sont un bon exemple. Les ROM servent surtout \u00e0 stocker des programmes.</p>"},{"location":"5%20%E2%80%93%20Architecture/2complements/#caches-du-processeur","title":"Caches du processeur","text":"<p>Au sein du processeur, il existe des m\u00e9moires interm\u00e9diaires entre les registres et la m\u00e9moire RAM, les caches. Ils permettent de ne pas limiter les performances en obligeant le processeur \u00e0 attendre (on parle de goulot d'\u00e9tranglement) la r\u00e9cup\u00e9ration des donn\u00e9es dans la RAM. Typiquement, lorsque vous acc\u00e9der \u00e0 une valeur dans la RAM, une tranche de celle-ci est copi\u00e9e dans ces caches sous l'hypoth\u00e8se probable que les valeurs que vous allez lire par la suite se situent dedans.</p> <p> </p>"},{"location":"5%20%E2%80%93%20Architecture/2complements/#ordres-de-grandeur","title":"Ordres de grandeur","text":"<p>Les ordres de grandeur typiques pour chaque type de m\u00e9moire pour un ordinateur actuel (ma machine) :</p> M\u00e9moire Volatilit\u00e9 Capacit\u00e9 D\u00e9bit Latence Co\u00fbt  Registres Volatile 32 ko 500 Go/s 1 ns  Caches Volatile 512 ko ~ 16 Mo 300 Go/s 10 ns  RAM Volatile 16 Go 50 Go/s 60 ns  Stockage Permanent 1 To 500 Mo/s 100 \u00b5s <p>Les donn\u00e9es se d\u00e9placent \u00e0 travers ces diff\u00e9rentes m\u00e9moires via des bus dans ce m\u00eame ordre : Stockage  RAM  Caches  Registres</p> Latence <p>La latence d'une m\u00e9moire est le temps n\u00e9cessaire pour qu'une donn\u00e9e soit r\u00e9cup\u00e9r\u00e9e depuis cette m\u00e9moire. </p>"},{"location":"5%20%E2%80%93%20Architecture/2complements/#architecture-monoprocesseur-et-multiprocesseur","title":"Architecture monoprocesseur et multiprocesseur","text":""},{"location":"5%20%E2%80%93%20Architecture/2complements/#la-loi-de-moore","title":"La loi de Moore","text":"<p>La loi de Moore est une observation empirique formul\u00e9e par Gordon Moore en 1965, qui \u00e9non\u00e7ait que le nombre de transistors dans les microprocesseurs doubles environ tous les deux ans. Cela signifie que la puissance de traitement des ordinateurs augmente \u00e9galement de mani\u00e8re exponentielle au fil du temps.</p> <ul> <li> <p>En 1971, le premier processeur produit par Gordon Moore, l'Intel 4004, \u00e9tait cadenc\u00e9 \u00e0 750 kHz et contenait 2300 transistors de 10 \u00b5m (gravure).</p> </li> <li> <p>En 2023, l'Intel Core i9-12900K cadenc\u00e9 \u00e0 5.2 GHz contient 3 milliards de transistors de 7 nm.</p> </li> </ul> <p> </p> Chaque point repr\u00e9sente ici un processeur entre 2000 et 2023. <p>H\u00e9las, l'augmentation de la fr\u00e9quence devenant techniquement de plus en plus difficile (probl\u00e8me de surchauffe) et la miniaturisation des transistors se heurtant \u00e0 la physique quantique, une nouvelle id\u00e9e permet de poursuivre la loi de Moore, celle d'ajouter plusieurs processeurs au sein d'une m\u00eame machine.</p>"},{"location":"5%20%E2%80%93%20Architecture/2complements/#architecture-multiprocesseur-et-processeur-multicurs","title":"Architecture multiprocesseur et processeur multic\u0153urs","text":"<p>Une architecture monoprocesseur est une architecture ne comprenant qu'un seul processeur. D'un autre c\u00f4t\u00e9, une architecture multiprocesseur est une architecture dans laquelle plusieurs processeurs distincts fonctionnent simultan\u00e9ment pour ex\u00e9cuter des instructions.</p> <p>Les processeurs d'aujourd'hui ont plusieurs unit\u00e9s de traitement appel\u00e9es c\u0153urs, chacune avec ses propres registres, unit\u00e9 arithm\u00e9tique et logique, unit\u00e9 de commande et une m\u00e9moire cache (L1). Bien que ces c\u0153urs partagent aussi certaines m\u00e9moires caches (L2, L3), ils peuvent ex\u00e9cuter des instructions ind\u00e9pendamment les uns des autres, permettant de traiter plusieurs instructions simultan\u00e9ment. Un processeur multic\u0153ur est donc une forme d'architecture multiprocesseur qui utilise plusieurs unit\u00e9s de traitement sur une seule puce, tandis que les architectures multiprocesseur traditionnelles utilisent plusieurs processeurs physiques distincts.</p> <p> </p> Zoom sur une puce d'un processeur. <p>L'ajout de processeurs ou de c\u0153urs ne garantit pas automatiquement de meilleures performances. Les programmes qui ne sont pas con\u00e7ues pour ces architectures ne b\u00e9n\u00e9ficieront que peu, voire pas du tout, d'une augmentation du nombre de c\u0153urs. En effet, les c\u0153urs doivent partager l'acc\u00e8s \u00e0 la m\u00e9moire vive et \u00e0 la m\u00e9moire cache, ce qui peut entra\u00eener des ralentissements. La programmation parall\u00e8le et la programmation concurrente sont deux approches de programmation qui permettent de tirer parti de toutes les ressources de calculs de telles architectures.</p>"},{"location":"5%20%E2%80%93%20Architecture/2complements/#et-python-dans-tout-ca","title":"Et Python dans tout \u00e7a ?","text":""},{"location":"5%20%E2%80%93%20Architecture/2complements/#langages-de-bas-et-haut-niveau","title":"Langages de bas et haut niveau","text":"<p>Le langage machine et l'assembleur sont des langages de bas niveau qui sont proches du langage machine et qui n\u00e9cessitent une compr\u00e9hension plus approfondie de l'architecture mat\u00e9rielle de l'ordinateur. Ces langages primitifs sont souvent plus difficiles \u00e0 lire et \u00e0 comprendre pour les programmeurs.</p> <p>Les langages de haut niveau (Python, C, Java etc.), en revanche, sont des langages de programmation qui sont con\u00e7us pour \u00eatre plus proches du langage naturel humain, ce qui les rend plus faciles \u00e0 lire et \u00e0 comprendre pour les programmeurs. Ces langages sont \u00e9galement con\u00e7us pour \u00eatre plus abstraits, c'est-\u00e0-dire qu'ils se concentrent sur les concepts et les structures de haut niveau, plut\u00f4t que sur les d\u00e9tails de bas niveau.</p> <p>Si certains langages de programmation peuvent facilement se positionner sur un spectre allant de bas niveau \u00e0 haut niveau, d'autres, tels que le C++, fusionnent ces deux approches.</p>"},{"location":"5%20%E2%80%93%20Architecture/2complements/#langages-compiles-et-interpretes","title":"Langages compil\u00e9s et interpr\u00e9t\u00e9s","text":"<p>Une fois qu'un script Python est ex\u00e9cut\u00e9, il est traduit au fur et \u00e0 mesure de son ex\u00e9cution en code machine, c'est un langage dit interpr\u00e9t\u00e9.</p> <p>En revanche, certains langages sont dit compil\u00e9s (comme le C), ce qui signifie que le code source est enti\u00e8rement traduit en code machine avant son ex\u00e9cution.</p> <p> </p>"},{"location":"5%20%E2%80%93%20Architecture/3sim/","title":"TP Simulation d'une machine & Assembleur","text":""},{"location":"5%20%E2%80%93%20Architecture/3sim/#tp-simulation-dune-machine-assembleur","title":"TP Simulation d'une machine &amp; Assembleur","text":""},{"location":"5%20%E2%80%93%20Architecture/3sim/#un-simulateur-basique","title":"Un simulateur basique","text":"<p>On se propose de mettre en pratique les connaissance acquises gr\u00e2ce au simulateur d\u00e9velopp\u00e9 par Peter L. Higgison. Ce simulateur est bas\u00e9 sur l'architecture de Von Neumann \u00e9tudi\u00e9 pr\u00e9c\u00e9demment, on y retrouve donc un processeur, ses registres et une m\u00e9moire.</p> <p>L'interface de ce simulateur est d\u00e9coup\u00e9 en quatre grandes parties :</p> <ul> <li> <p> Le programme o\u00f9 vous allez saisir vos diff\u00e9rents programmes en assembleur.</p> </li> <li> <p> Le processeur avec l'\u00e9tat de ses diff\u00e9rents registres (notamment l'adresse de la prochaine instruction <code>PC</code>, ses registres de travail <code>R0</code> \u00e0 <code>R12</code>, ses drapeaux <code>N Z C V</code>).</p> </li> <li> <p> La m\u00e9moire dont vous pouvez modifier la repr\u00e9sentation des valeurs (hexad\u00e9cimale, binaire, d\u00e9cimal etc.)</p> </li> <li> <p> Les entr\u00e9es / sorties qui permet \u00e0 la machine de communiquer avec le monde ext\u00e9rieur !</p> </li> </ul> <p>Des valeurs de 32 bits ?</p> <p>Comme vous pouvez le constater, une cellule de la m\u00e9moire du simulateur correspond \u00e0 32 bits. La m\u00e9moire est pourtant bien d\u00e9coup\u00e9e en octets, les adresses font bien r\u00e9f\u00e9rence \u00e0 des octets. On ne pourra h\u00e9las utiliser que les adresses divisibles par 4 dans notre programme.</p> Questions 1 <ol> <li> <p>Les adresses de la m\u00e9moire de cette machine vont de <code>0x0000</code>\u00e0 <code>0xFFFFF</code>. Quelle est la taille de la m\u00e9moire ?</p> </li> <li> <p>Quelle est la taille en bits d'un registre du processeur dans cette simulation ?</p> </li> </ol> <p>\u00c0 vos claviers, nous allons manger un peu d'assembleur.</p>"},{"location":"5%20%E2%80%93%20Architecture/3sim/#un-premier-programme","title":"Un premier programme","text":"<p>Copier ce programme (bouton EDIT) :</p> <pre><code>    MOV R2, #0xABCD ; (1)!\nMOV R7, #0x1234\nADD R0, R2, R7 ; (2)!\nHALT ; (3)!\n</code></pre> <ol> <li> <p><code>R2</code> <code>0xABCD</code> Le symbole <code>#</code> permet de pr\u00e9ciser une valeur imm\u00e9diate. <code>MOV</code> vient du mot anglais move, d\u00e9placer.</p> </li> <li> <p><code>R0</code> <code>R2</code> + <code>R7</code></p> </li> <li> <p>Permet d'arr\u00eater (ou mettre en pause) l'ex\u00e9cution du programme.</p> </li> </ol> <p>Lorsque le programme est assembl\u00e9 (bouton SUBMIT), le programme est stock\u00e9 dans la m\u00e9moire, pr\u00eat \u00e0 \u00eatre ex\u00e9cut\u00e9 :</p> <pre><code>0xe30a2bcd 0xe3017234 0xe0820007 0xe1000070\n</code></pre> Questions 2 <ol> <li> <p>Ex\u00e9cuter ce programme (). Que fait ce programme ? V\u00e9rifier que le r\u00e9sultat obtenu est correct en passant \u00e0 une repr\u00e9sentation d\u00e9cimale (non-sign\u00e9).</p> </li> <li> <p>Sur combien de bits est stock\u00e9e une instruction ? Quel est le code machine de l'instruction <code>HALT</code> ?</p> </li> <li> <p>Que vaut le Compteur de Programme (<code>PC</code>) au d\u00e9but et \u00e0 la fin de l'ex\u00e9cution du programme ? De combien augmente-t-il \u00e0 chaque \u00e9tape ( pour reset le simulateur,  pour ex\u00e9cuter le programme pas \u00e0 pas) ? Justifier.</p> </li> <li> <p>En analysant attentivement le code machine des deux premi\u00e8res instructions <code>MOV</code> indiquer o\u00f9 se trouve l'information du registre de destination et celle de la valeur imm\u00e9diate dans le code machine.</p> </li> <li> <p>Quelle serait l'instruction pour incr\u00e9menter un registre ?</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/3sim/#deplacer-des-valeurs-entre-les-registres-et-la-memoire","title":"D\u00e9placer des valeurs entre les registres et la m\u00e9moire","text":"Instruction Exemples Signification <code>MOV R, &lt;Op\u00e9rande2&gt;</code> <code>MOV R0, #25</code> <code>MOV R0, R1</code> <code>R</code> <code>&lt;Op\u00e9rande2&gt;</code> Permet d'affecter une valeur \u00e0 un registre, ou copier un registre dans un autre. <code>LDR R, &lt;Adresse&gt;</code> <code>LDR R0, 0xFC</code> <code>R</code> <code>M\u00e9moire[&lt;Adresse&gt;]</code>  Permet d'affecter une valeur (32 bits) depuis son un emplacement m\u00e9moire \u00e0 un registre. <code>STR R, &lt;Adresse&gt;</code> <code>STR R1, 120</code> <code>M\u00e9moire[&lt;Adresse&gt;]</code> <code>R</code> Permet d'affecter la valeur d'un registre \u00e0 un emplacement de la m\u00e9moire. Questions 3 <ol> <li> <p>\u00c9crire un programme qui affecte la valeur 42 \u00e0 l'emplacement d'adresse <code>0xA4</code>. \u00c0 la fin du programme, la ligne <code>0x000a</code> de la m\u00e9moire doit \u00eatre :</p> <p><code>0x000a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a042\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00</code></p> </li> <li> <p>Modifier ce programme pour qu'il affecte ensuite la valeur 13 \u00e0 l'emplacement suivant : </p> <p><code>0x000a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a042\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a013\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00</code></p> </li> <li> <p>Modifier le programme pour qu'il ensuite \u00e9change de place les valeurs de ces deux emplacements. Le programme doit marcher peu importe les valeurs initiales (ici 42 et 13) et peu importe les valeurs courantes des registres :</p> <p><code>0x000a\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a013\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a042\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00</code></p> </li> <li> <p>Que fait l'instruction <code>LDR R0, .InputNum</code> ?</p> </li> </ol> <p>Adressage indirect</p> <p>Un registre <code>R</code> peut stocker une adresse (le registre est alors appel\u00e9 pointeur). On \u00e9crit <code>[R]</code> pour r\u00e9cup\u00e9rer la valeur \u00e0 cette adresse dans la m\u00e9moire. Par exemple <code>LDR R0, [R1]</code> affecte \u00e0 <code>R0</code> la valeur \u00e0 l'adresse <code>R1</code> (et non la valeur de <code>R1</code> en elle-m\u00eame).</p>"},{"location":"5%20%E2%80%93%20Architecture/3sim/#les-labels","title":"Les labels","text":"<p>Un label (ou \u00e9tiquette en fran\u00e7ais) permet de nommer symboliquement une adresse. </p> <pre><code>    MOV R0, #0\nmon_label: ;(1)!\nADD R0, R0, #1\nB mon_label ;(2)!\nHALT\n</code></pre> <ol> <li> <p><code>mon_label</code> d\u00e9signe ici l'adresse de l'instruction suivante <code>ADD R0, R0, #1</code>, c'est-\u00e0-dire <code>0x04</code>.</p> </li> <li> <p><code>B</code> est un saut (ou branchement) inconditionnel, il permet de sauter \u00e0 une instruction particuli\u00e8re gr\u00e2ce \u00e0 son adresse (<code>mon_label</code>).</p> </li> </ol> <p>Saut relatif</p> <p>On peut sauter \u00e0 un label, mais aussi un nombre d'instructions relativement \u00e0 sa position. Par exemple : <code>B .+3</code> sautera jusqu'\u00e0 la 3\u00e8me prochaine instruction (en ignorant donc les 2 instructions entre). <code>B .-5</code> sautera 5 instructions en arri\u00e8re.</p> Questions 4 <ol> <li> <p>Ex\u00e9cuter ce programme pas \u00e0 pas. Que fait-il ?</p> </li> <li> <p>Modifier le programme pour utiliser un saut relatif \u00e0 la place.</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/3sim/#les-conditions-et-les-boucles","title":"Les conditions et les boucles","text":"<p>Si les instructions <code>if</code> et <code>while</code> n'existent pas en assembleur, il existe \u00e0 la place les sauts conditionnels. On compare deux valeurs \u00e0 tester, et suivant le r\u00e9sultat de cette comparaison on saute ou non \u00e0 une ligne de code (gr\u00e2ce \u00e0 un label ou relativement).</p>"},{"location":"5%20%E2%80%93%20Architecture/3sim/#comparaison","title":"Comparaison","text":"<p>On compare une valeur d'un registre avec une autre valeur gr\u00e2ce \u00e0 l'instruction <code>CMP</code> (compare). Le r\u00e9sultat de cette comparaison est stock\u00e9 dans les diff\u00e9rents drapeaux (<code>N Z C V</code>) du processeur.</p> <pre><code>    MOV R0, #10\nCMP R0, #20 ;(1)!\nHALT\n</code></pre> <ol> <li>Compare la valeur du registre <code>R0</code> avec la valeur imm\u00e9diate 20.</li> </ol> Questions 5 <ol> <li> <p>Que valent les drapeaux (status bits dans le simulateur) <code>N Z C V</code> avant d\u2019ex\u00e9cuter le programme ?</p> </li> <li> <p>Ex\u00e9cuter ce programme. Noter la valeur des diff\u00e9rents drapeaux.</p> </li> <li> <p>De m\u00eame en modifiant la valeur qui est compar\u00e9e \u00e0 <code>R0</code> \u00e0 5 puis \u00e0 10.</p> </li> <li> <p>Conclure.</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/3sim/#sauts-conditionnels","title":"Sauts conditionnels","text":"<p>Une fois les drapeaux modifi\u00e9s par <code>CMP</code>, on effectue un saut conditionnel suivant le r\u00e9sultat de la comparaison gr\u00e2ce aux instructions :</p> Instruction Symbole Signification <code>BEQ label</code> \\(=\\) Branch if EQqual <code>BNE label</code> \\(\\ne\\) Branch if Not EQqual <code>BLT label</code> \\(&lt;\\) Branch if Less Than <code>BGT label</code> \\(&gt;\\) Branch if Greater Than <p>Modifions le code de la section pr\u00e9c\u00e9dente, en transformant le saut inconditionnel <code>B</code> en un saut conditionnel :</p> <pre><code>    MOV R0, #0\nmon_label:\nADD R0, R0, #1\nCMP R0, #10\nBLT mon_label\nHALT\n</code></pre> Questions 6 <ol> <li> <p>Ex\u00e9cuter ce programme pas \u00e0 pas. Que fait-il ?</p> </li> <li> <p>Modifier le programme pour faire la multiplication \\(7 \\times 8\\) dans le registre <code>R0</code>.</p> </li> <li> <p>Modifier le programme pour qu'il demande deux nombres \u00e0 l'utilisateur (gr\u00e2ce \u00e0 <code>LDR R, .InputNum</code>) et effectue la multiplication de ces deux nombres.</p> </li> <li> <p>\u00c9crire le programme qui demande un nombre \\(n\\) \u00e0 l'utilisateur et affiche \\(n!\\) (factorielle). Pour afficher le contenu d'un registre <code>R</code> dans la console, on utilise l'instruction <code>STR R, .WriteUnsignedNum</code>.</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/3sim/#hello-world","title":"Hello, World!","text":"<p>Raghu Venkatesh</p> <p>If you can write \"hello world\" you can change the world.</p> <p>Je n'allais tout de m\u00eame pas vous apprendre l'assembleur sans vous faire afficher \u00ab Hello, World. \u00bb dans la console ! Pour afficher un message dans la console, il faut d'abord le stocker dans la m\u00e9moire :</p> <pre><code>mon_message:\n.ASCIZ \"Hello, World!\"\n</code></pre> Une cha\u00eene de caract\u00e8res dans la m\u00e9moire <p>Regardons la m\u00e9moire apr\u00e8s avoir assembl\u00e9 le code pr\u00e9c\u00e9dent :</p> <pre><code>0x6c6c6548\u00a0\u00a00x57202c6f\u00a0\u00a00x646c726f\u00a0\u00a00x00000021\n</code></pre> <p>Les caract\u00e8res sont cod\u00e9s en ASCII donc sur un octet, on d\u00e9coupe ainsi :</p> <pre><code>6c\u00a06c\u00a065\u00a048\u00a0\u00a0\u00a0\u00a057\u00a020\u00a02c\u00a06f\u00a0\u00a0\u00a0\u00a064\u00a06c\u00a072\u00a06f\u00a0\u00a0\u00a0\u00a000\u00a000\u00a000\u00a021\n</code></pre> <p>On regarde enfin la table ASCII pour d\u00e9terminer les caract\u00e8res correspondants :</p> <pre><code>l\u00a0\u00a0l\u00a0\u00a0e\u00a0\u00a0H \u00a0\u00a0\u00a0\u00a0W\u00a0\u00a0\u00a0\u00a0\u00a0,\u00a0\u00a0o\u00a0\u00a0\u00a0\u00a0\u00a0d\u00a0\u00a0l\u00a0\u00a0r\u00a0\u00a0o\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\0\u00a0!\n</code></pre> <p>Pourquoi les caract\u00e8res sont renvers\u00e9s ? La notion de boutisme.</p> <p>On laissera ces donn\u00e9es \u00e0 la fin du programme. On affecte la premi\u00e8re adresse de ce message dans un registre, comme <code>R0</code>, puis on utilise <code>STR</code> pour l'envoyer \u00e0 la console :</p> <pre><code>    MOV R0, #mon_message ;(1)!\nSTR R0, .WriteString ;(2)!\nHALT\n\nmon_message:\n.ASCIZ \"Hello, World!\"\n</code></pre> <ol> <li> <p>On copie l'adresse de d\u00e9but de <code>mon_message</code>, soit <code>0xC</code>.</p> </li> <li> <p>On envoie l'adresse <code>0xC</code> \u00e0 la console qui va ensuite lire le contenu du message.</p> </li> </ol> Questions 7 <ol> <li> <p>La console ne re\u00e7oit que l'adresse du d\u00e9but du message. Or, le message s'\u00e9tale sur plusieurs emplacements m\u00e9moire. Comment la console fait-elle pour savoir quand s'arr\u00eater ?</p> </li> <li> <p>\u00c9crire le programme qui demande \u00e0 l'utilisateur son \u00e2ge et affiche s'il est majeur ou non. </p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/4os/","title":"Les syst\u00e8mes d'exploitation","text":""},{"location":"5%20%E2%80%93%20Architecture/4os/#les-systemes-dexploitation","title":"Les syst\u00e8mes d'exploitation","text":""},{"location":"5%20%E2%80%93%20Architecture/4os/#definition","title":"D\u00e9finition","text":"<p>Un syst\u00e8me d'exploitation (ou Operating System, OS) est un logiciel syst\u00e8me, un ensemble de programmes, qui sert d'interm\u00e9diaire entre les applications (les programmes, le software) et les diff\u00e9rents composants mat\u00e9riels d'une machine (le hardware), tel que le processeur, la m\u00e9moire, les disques durs, les p\u00e9riph\u00e9riques entr\u00e9e/sortie etc.</p> <p>L'OS fournit ainsi une interface abstraite et standardis\u00e9e aux applications. Cette interface leur permet de communiquer avec le mat\u00e9riel sans avoir besoin de prendre en compte les d\u00e9tails sp\u00e9cifiques de ce dernier.</p> <p>Au d\u00e9marrage de la machine, l'OS est le premier programme \u00e0 \u00eatre ex\u00e9cut\u00e9 et le seul \u00e0 rester en permanence en ex\u00e9cution, c'est le \u00ab chef d'orchestre \u00bb de tous les programmes.</p> <p>Windows, Linux, Android, MacOS et iOS sont les syst\u00e8mes d'exploitation les plus utilis\u00e9s \u00e0 ce jour. </p> <p> </p> Parts de march\u00e9 des syst\u00e8mes d'exploitation (F\u00e9vrier 2023)"},{"location":"5%20%E2%80%93%20Architecture/4os/#le-noyau","title":"Le noyau","text":"<p>Le noyau (ou kernel) est une composante centrale du syst\u00e8me d'exploitation qui assure la gestion des ressources mat\u00e9rielles et logicielles de l'ordinateur. Le kernel est responsable de l'interaction directe avec le hardware de l'ordinateur.</p> <p> </p> <p>Quelques-unes des principales fonctionnalit\u00e9s du noyau :</p> Fonctionnalit\u00e9 Description Gestion de la m\u00e9moire G\u00e8re la m\u00e9moire RAM allou\u00e9e aux programmes en cours d'ex\u00e9cution. Gestion des processus et des threads Permet l'ex\u00e9cution simultan\u00e9e de plusieurs programmes (processus) en r\u00e9partissant les t\u00e2ches \u00e0 ex\u00e9cuter par le processeur. Gestion des entr\u00e9es/sorties Permet aux  programmes en cours d'ex\u00e9cution de communiquer de mani\u00e8re contr\u00f4l\u00e9e avec les p\u00e9riph\u00e9riques mat\u00e9riels (clavier, m\u00e9moire de stockage, carte r\u00e9seau, \u00e9cran etc.). Gestion des droits G\u00e8re les droits d'acc\u00e8s aux ressources syst\u00e8me et aux fichiers. <p>Outre le noyau, un syst\u00e8me d'exploitation est constitu\u00e9 de plusieurs composants cl\u00e9s, comme la gestion des fichiers, les biblioth\u00e8ques syst\u00e8me, les utilitaires syst\u00e8me, l'interface graphique utilisateur (GUI) etc.</p> Les appels syst\u00e8me <p>Afin de rendre moins abstrait la relation entre les programmes et le syst\u00e8me d'exploitation, analysons ce petit programme en C :</p> <p></p> Code source Code compil\u00e9 <pre><code>#include &lt;cstdio&gt;\n\nint main()\n{\nprintf(\"Hello, World.\");\n}\n</code></pre> <p></p> <pre><code>.LC0:\n.string \"Hello, World.\"\nmain:\npush    rbp\nmov     rbp, rsp\nmov     edi, OFFSET FLAT:.LC0\nmov     eax, 0\ncall    printf\nmov     eax, 0\npop     rbp\nret\n</code></pre> <p></p> <p>L'instruction qui est en charge d'afficher le message dans la console <code>call printf</code> est ce que l'on nomme un appel syst\u00e8me, le programme appelle ici la fonction <code>printf</code> fournie par l'OS. Un appel syst\u00e8me permet au programme de demander \u00e0 l'OS un service sp\u00e9cifique, tel qu'afficher un message avec <code>printf</code>, allouer de la m\u00e9moire avec <code>malloc</code>, ouvrir un fichier avec <code>fopen</code>, cr\u00e9er un processus etc. </p>"},{"location":"5%20%E2%80%93%20Architecture/4os/#histoire-des-systemes-dexploitation","title":"Histoire des syst\u00e8mes d'exploitation","text":"<p>Deux excellentes vid\u00e9os r\u00e9alis\u00e9es par l'Institut Mines-T\u00e9l\u00e9com :</p> <ul> <li> <p>Gen\u00e8se des syst\u00e8mes d'exploitation</p> </li> <li> <p>L'histoire d'UNIX</p> </li> </ul>"},{"location":"5%20%E2%80%93%20Architecture/4os/#systeme-dexploitation-libre-et-proprietaire","title":"Syst\u00e8me d'exploitation libre et propri\u00e9taire","text":"<p>On distingue deux types de logiciels :</p> <ul> <li> <p>Les logiciels propri\u00e9taires dont le code source est la propri\u00e9t\u00e9 exclusive de l'entreprise ou de l'individu qui l'a cr\u00e9\u00e9. Les utilisateurs n'ont pas acc\u00e8s au code source du logiciel, ils ne peuvent donc ni le modifier, ni examiner ce que fait pr\u00e9cis\u00e9ment le logiciel en arri\u00e8re-plan. Ces logiciels sont g\u00e9n\u00e9ralement payants. </p> </li> <li> <p>Le code source d'un logiciel libre est en revanche disponible publiquement. Les utilisateurs peuvent l\u00e9galement l'utiliser \u00e0 n'importe quelle fin, l'\u00e9tudier, le copier, le modifier et le distribuer librement. Ils peuvent aussi contribuer \u00e0 l'am\u00e9lioration du logiciel en apportant des modifications \u00e0 son code source, en signalant et en r\u00e9solvant des probl\u00e8mes etc. ce qui profite \u00e0 l'ensemble de la communaut\u00e9 des utilisateurs du logiciel libre.</p> </li> </ul> <p>Windows, MacOS, iOS, Android sont des syst\u00e8mes d'exploitation propri\u00e9taires. Linux, OpenBSD, Ubuntu, Debian, LineageOS etc. sont des exemples de syst\u00e8mes d'exploitation libres.</p>"},{"location":"5%20%E2%80%93%20Architecture/5shell/","title":"TP Shell","text":""},{"location":"5%20%E2%80%93%20Architecture/5shell/#tp-shell","title":"TP Shell","text":"<p>La r\u00e9daction du document r\u00e9ponse Capytale est en cours... notez vos r\u00e9ponses dans un fichier texte pour l'instant.</p>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#introduction","title":"Introduction","text":"<p>Les premiers syst\u00e8mes d'exploitation \u00e9taient d\u00e9pourvus d'interface graphique. Il n'y avait pas de fen\u00eatres ni de curseur de souris pour interagir avec l'ordinateur. Au lieu de cela, les utilisateurs devaient communiquer avec le syst\u00e8me d'exploitation en utilisant des lignes de commandes, qui sont du texte saisi via un programme appel\u00e9 shell. Le Shell est une interface entre le noyau et l'utilisateur :</p> <p> </p> <p>Le shell permet \u00e0 l'utilisateur d'ex\u00e9cuter des commandes et des scripts pour interagir avec le syst\u00e8me d'exploitation (ex\u00e9cuter des programmes, g\u00e9rer des fichiers et des r\u00e9pertoires, contr\u00f4ler les processus en cours etc.). Le shell est toujours disponible dans les OS actuels et encore tr\u00e8s utilis\u00e9 de nos jours. On se propose dans ce TP de d\u00e9couvrir les commandes de base du shell.</p> Diff\u00e9rence entre shell et terminal <p>Le terminal et le shell sont souvent confondus dans le langage courant.</p> <ul> <li> <p>Le terminal est un programme permet \u00e0 l'utilisateur de saisir des commandes et de les ex\u00e9cuter en mode texte, sans avoir besoin d'une interface graphique. Il ex\u00e9cute par d\u00e9faut un shell.</p> </li> <li> <p>Le shell est le programme qui s'ex\u00e9cute \u00e0 l'int\u00e9rieur du terminal et qui interpr\u00e8te les commandes saisies par l'utilisateur et qui permet d'interagir avec le syst\u00e8me d'exploitation.</p> </li> </ul> <p>Comme il n'est g\u00e9n\u00e9ralement pas possible d'interagir avec le shell sans utiliser un terminal, les deux termes sont confondus. Le terminal est l'interface du shell qui est l'interface du noyau qui est l'interface du mat\u00e9riel. Vous suivez ?</p>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#larborescence-des-dossiers-et-des-fichiers","title":"L'arborescence des dossiers et des fichiers","text":"<p>Dans les syst\u00e8mes d'exploitation bas\u00e9s sur UNIX (par exemple Linux ou macOS), nous avons un syst\u00e8me de fichiers et de dossiers en arborescence :</p> <p> </p>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#chemins-absolus","title":"Chemins absolus","text":"<p>On peut acc\u00e9der \u00e0 n'importe quel dossier ou fichier gr\u00e2ce \u00e0 un chemin. Par exemple, <code>/home/joel/images/photo1.jpg</code> permet d'acc\u00e9der au fichier <code>photo1.jpg</code>. Quand le chemin part de le racine <code>/</code>, on parle de chemin absolu.</p>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#chemins-relatifs","title":"Chemins relatifs","text":"<p>On peut aussi acc\u00e9der \u00e0 un fichier ou \u00e0 un dossier gr\u00e2ce \u00e0 un chemin relatif. Par exemple, si l'on se situe dans le dossier <code>/home/joel</code>, on peut acc\u00e9der \u00e0 <code>luge.mp4</code> gr\u00e2ce au chemin relatif <code>./images/ski/luge.mp4</code> : <code>.</code> fait r\u00e9f\u00e9rence au r\u00e9pertoire (dossier) courant. Il est d'ailleurs facultatif.</p> <p>Il est courant aussi de vouloir revenir en arri\u00e8re. Par exemple, si l'on se situe dans le dossier <code>/home/joel</code> et que l'on souhaite acc\u00e9der \u00e0 <code>rapport.txt</code>, on \u00e9crit alors <code>../ellie/documents/rapport.txt</code> : <code>..</code> fait r\u00e9f\u00e9rence au r\u00e9pertoire parent.</p> Questions 1 <ol> <li> <p>Quel est le chemin absolu pour acc\u00e9der au fichier <code>hello.py</code> ? </p> </li> <li> <p>On se situe dans le dossier <code>travail</code> de ce fichier <code>hello.py</code>. Quel est alors le chemin relatif \u00e0 ce r\u00e9pertoire pour acc\u00e9der \u00e0 <code>photo1.jpg</code> ? </p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#les-commandes-de-base","title":"Les commandes de base","text":"<p>D\u00e9couvrons les commandes UNIX les plus courantes gr\u00e2ce \u00e0 au petit jeu Terminux ! Pr\u00eat pour l'aventure ?</p> <p> </p> <p>Dans ce jeu, les diff\u00e9rents lieux correspondent \u00e0 des dossiers et les diff\u00e9rents objets et personnages \u00e0 des fichiers !</p> Questions 2 <p>Au fur et \u00e0 mesure de l'aventure :</p> <ol> <li> <p>Noter les commandes d\u00e9couvertes et leur fonction :</p> Nom de la commande Description Utilisation <code>ls</code> Lister le contenu d'un dossier. <code>ls</code> puis Enter pour lister les fichiers du r\u00e9pertoire courant. ... ... ... </li> <li> <p>Remplir aussi le tableau des raccourcis claviers :</p> Nom de la commande Description Up Down ... Tab ... </li> <li> <p>R\u00e9aliser le plan du jeu de mani\u00e8re collaborative ! </p> <p> </p> <p>Le lien du diagramme partag\u00e9 est disponible ici. Il faudra alors vous connectez \u00e0 votre compte Google du lyc\u00e9e @lyceecivray.net et ouvrir le fichier avec l'application Diagrams. Veuillez respecter le code couleur (copier-coller simplement les n\u0153uds du diagramme) !</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#complements-sur-les-commandes","title":"Compl\u00e9ments sur les commandes","text":""},{"location":"5%20%E2%80%93%20Architecture/5shell/#un-vrai-terminal","title":"Un vrai terminal !","text":"<p>Comme Windows diff\u00e8re des autres syst\u00e8mes d'exploitation qui sont majoritairement bas\u00e9s sur Unix, son langage de shell est relativement peu utilis\u00e9. Ainsi, nous opterons plut\u00f4t pour l'\u00e9mulation d'un syst\u00e8me d'exploitation Linux en utilisant JSLinux, un \u00e9mulateur propos\u00e9 par Fabrice Bellard. Merci Fabrice.</p> Questions 3 <p>Dans le document r\u00e9ponse, veuillez bien inscrire les diff\u00e9rentes commandes que vous avez utilis\u00e9es pour r\u00e9pondre aux questions.</p> <ol> <li> <p>En inscrivant la bonne commande dans le shell, dans quel dossier sommes-nous quand le syst\u00e8me d\u00e9marre ? Donner son chemin absolu. </p> </li> <li> <p>Que contient ce dossier ?</p> </li> <li> <p>Que contient le fichier <code>readme.txt</code> ?</p> </li> <li> <p>Cr\u00e9er le dossier <code>programmes</code> (gr\u00e2ce \u00e0 la commande <code>mkdir nom_du_dossier</code>) et y d\u00e9placer les 3 fichiers correspondants \u00e0 des programmes. Sauriez-vous d\u00e9placer ces 3 fichiers en une seule ligne de commande ?</p> </li> <li> <p>Se d\u00e9placer dans ce nouveau r\u00e9pertoire et y cr\u00e9er un fichier vide <code>bonjour.py</code> gr\u00e2ce \u00e0 la commande <code>touch nom_du_fichier</code>.</p> </li> <li> <p>Modifier ce programme Python pour qu'il affiche un message de bienvenue. Pour cela on utilisera l'\u00e9diteur nano (<code>nano nom_du_fichier</code>) : Ctrl+O, Enter pour enregistrer le programme puis Ctrl+X pour quitter l'\u00e9diteur. Ex\u00e9cuter le programme ainsi cr\u00e9e gr\u00e2ce au programme <code>python</code> (<code>python nom_du_fichier_py</code>).</p> </li> <li> <p>Dans le r\u00e9pertoire initial (<code>cd ~</code>), qu'affiche la commande <code>tree</code> ?    Note : Ne faites pas cette commande \u00e0 la racine du syst\u00e8me <code>/</code> ( Ctrl+C pour stopper une commande en cours si jamais).</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#les-options-et-les-arguments","title":"Les options et les arguments","text":"<p>Les lignes de commande que l'on a \u00e9crites jusqu'\u00e0 pr\u00e9sent \u00e9taient de la forme : </p> <pre><code>$ nom_de_la_commande argument1 argument2 ...\n</code></pre> <p>Le nombre d'arguments est variable, par exemple :</p> <ul> <li> <p><code>ls</code> ne prend aucun argument.</p> </li> <li> <p><code>cd</code> prend un chemin en argument.</p> </li> <li> <p><code>mv</code> prend plusieurs arguments : les noms des fichiers \u00e0 d\u00e9placer et un r\u00e9pertoire de destination.</p> </li> </ul> <p>On peut param\u00e9trer plus finement une commande gr\u00e2ce \u00e0 des options. Une option s'\u00e9crit de deux mani\u00e8res : <code>--option</code> ou <code>-o</code>. La syntaxe courte ne poss\u00e8de qu'un caract\u00e8re ! Toute ligne de commande s'\u00e9crit comme :</p> <pre><code>$ nom_de_la_commande --option1 --option2 ... argument1 argument2 ...\n</code></pre> Questions 4 <ol> <li> <p>Dans le dossier o\u00f9 se situent les diff\u00e9rents fichiers des programmes, ex\u00e9cuter la commande <code>ls -l</code>. Que fait l'option <code>-l</code> ?</p> </li> <li> <p>En utilisant l'option <code>--help</code> ou <code>-h</code> qui permet de lire une description rapide d'une commande, donner l'option qui permet de trier la liste des fichiers affich\u00e9e par <code>ls</code>  par ordre d\u00e9croissant de taille.</p> </li> <li> <p>Ex\u00e9cuter alors <code>ls</code> avec cette nouvelle option dans le r\u00e9pertoire des programmes. Donner le r\u00e9sultat affich\u00e9.</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#la-gestion-des-droits-et-permission-dacces-aux-fichiers","title":"La gestion des droits et permission d'acc\u00e8s aux fichiers","text":""},{"location":"5%20%E2%80%93%20Architecture/5shell/#introduction_1","title":"Introduction","text":"<p>Si on ex\u00e9cute <code>ls -l</code> dans le dossier parent : </p> <pre><code>localhost:~# ls -l\ntotal 8\ndrwxr-xr-x    2 root     root           111 Mar 28 17:35 programmes\n-rw-r--r--    1 root     root           151 Jul  5  2020 readme.txt\n</code></pre> <p>Si l'on arrive \u00e0 distinguer \u00e0 droite, le nom du fichier/dossier <code>readme.txt</code>, la date de derni\u00e8re modification  <code>Jul  5  2020</code> et le poids du fichier/dossier <code>151</code> (en octets), la partie \u00e0 gauche reste l\u00e9g\u00e8rement cryptique ! Un autre exemple sur ma machine :</p> <p></p> <p>La correspondance des quatres champs \u00e0 gauche est la suivante :</p> <pre><code>drwxr-xr-x      2      arthur    arthur \n     \u2191          \u2191         \u2191         \u2191\n  Droits     #Liens  Utilisateur  Groupe\n</code></pre> <p>Nous allons voir \u00e0 quoi correspond ces diff\u00e9rents champs, except\u00e9 <code>#Liens</code> le nombre de liens, qui n'est pas au programme.</p>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#utilisateur","title":"<code>Utilisateur</code>","text":"<p>Un syst\u00e8me UNIX est multi-utilisateur, chaque utilisateur (personne physique ou un programme) est identifi\u00e9 par un nom et un identifiant unique (UID), et poss\u00e8de un ensemble de droits qui d\u00e9terminent les op\u00e9rations qu'il peut effectuer sur le syst\u00e8me, telles que l'acc\u00e8s \u00e0 un fichier ou \u00e0 un dossier, l'ex\u00e9cution de programmes, etc.</p> Questions 5 <ol> <li> <p>Pour conna\u00eetre les utilisateurs du syst\u00e8me, on consulte le fichier <code>/etc/passwd</code>. Que contient ce fichier ?</p> <p>Les utilisateurs sont enregistr\u00e9s au format : <code>nom:motdepasse:UID:GID:informations:repertoire:shell</code></p> </li> <li> <p>Vous \u00eates l'utilisateur <code>root</code>. Quel est votre UID ?</p> </li> </ol> Je suis root ! <p>L'utilisateur <code>root</code> est en fait le super-utilisateur du syst\u00e8me qui a tous les pouvoirs sur le syst\u00e8me ! Pour ex\u00e9cuter une commande r\u00e9serv\u00e9e au super-utilisateur, un utilisateur lambda doit utiliser la commande <code>sudo</code> (super user do) qui n\u00e9cessite de conna\u00eetre le mot de passe root qui en g\u00e9n\u00e9ral n'est connu que de l'administrateur du syst\u00e8me.</p> <p> </p>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#groupe","title":"<code>Groupe</code>","text":"<p>Chaque utilisateur est associ\u00e9 \u00e0 un ou plusieurs groupes. Ils permettent de regrouper des utilisateurs pour leur attribuer des droits d'acc\u00e8s communs aux fichiers ou applications.</p> Question 6 <p>Le fichier qui stocke les diff\u00e9rents groupes se situe dans le m\u00eame r\u00e9pertoire que pr\u00e9c\u00e9demment, sauriez-vous le retrouver ? Que contient-il ?</p>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#les-types-dutilisateurs-ugo","title":"Les types d'utilisateurs <code>ugo</code>","text":"<p>Avec ces notions d'utilisateurs et de groupes, chaque fichier distingue alors trois types d'utilisateurs :</p> Utilisateur Anglais Symbole Son propri\u00e9taire User <code>u</code> Un groupe associ\u00e9 Group <code>g</code> Les autres utilisateurs Others <code>o</code>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#droits","title":"<code>Droits</code>","text":"<p>Il existe trois droits concernant un fichier ou un r\u00e9pertoire :</p> Droit Anglais Symbole Description Droit de lecture Read <code>r</code> Il est possible de lire le contenu du fichier Droit d'\u00e9criture Write <code>w</code> Il est possible de modifier le contenu du fichier Droit d'ex\u00e9cution eXecution <code>x</code> Il est possible d'ex\u00e9cuter le contenu du fichier(quand le fichier est du code ex\u00e9cutable) <p>Chaque fichier se voit ainsi attribuer pour chaque type d'utilisateurs (propri\u00e9taire, groupe, autres) leurs droits correspondants. Toutes ces informations sont encod\u00e9es dans le champ <code>Droits</code>, par exemple :</p> <pre><code>-rwxr-xr--\n</code></pre> <p>Le champ <code>Droits</code> s'\u00e9crit sur 10 caract\u00e8res :</p> <ul> <li> <p>Le 1er caract\u00e8re <code>-</code> ou <code>d</code> indique s'il s'agit d'un fichier ou d'un r\u00e9pertoire</p> </li> <li> <p>Les 9 caract\u00e8res suivants repr\u00e9sentent dans l'ordre les droits <code>rwx</code> pour les 3 types d'utilisateurs dans l'ordre <code>ugo</code>.</p> </li> </ul> <p>Par exemple, la s\u00e9quence <code>-rwxr-xr--</code> se d\u00e9compose comme :</p> <pre><code>-    r  w  x    r  -  x    r  -  -\n    \u2514-- u --\u2518  \u2514-- g --\u2518  \u2514-- o --\u2518\n</code></pre> Type d'utilisateur Droit lecture<code>r</code> Droit \u00e9criture<code>w</code> Droit ex\u00e9cution<code>x</code> Propri\u00e9taire <code>u</code> Groupe       <code>g</code> Autres       <code>o</code>"},{"location":"5%20%E2%80%93%20Architecture/5shell/#modification-des-droits-avec-chmod","title":"Modification des droits avec <code>chmod</code>","text":"<p>Seuls le propri\u00e9taire et l'utilisateur root peuvent modifier les droits d'un fichier ou d'un r\u00e9pertoire gr\u00e2ce \u00e0 la commande <code>chmod</code> (de l'anglais change mode).</p> <p>Elle s'utilise ainsi, en pr\u00e9cisant l'utilisateur (<code>a</code> pour tous), l'ajout <code>+</code> ou la suppression <code>-</code> ou la r\u00e9initialisation <code>=</code> de la permission et enfin les droits :</p> <pre><code>chmod [u g o a] [+ - =] [r w x] nom_du_fichier\n</code></pre> <p>Par exemple,</p> <pre><code>chmod g+w bulletin.txt\n</code></pre> <p>attribuera la permission de modifier le fichier au groupe associ\u00e9 au fichier <code>bulletin.txt</code></p> Questions 7 <p>Dans le document r\u00e9ponse, veuillez bien inscrire les diff\u00e9rentes commandes que vous avez utilis\u00e9es pour r\u00e9pondre aux questions.</p> <ol> <li> <p>Cr\u00e9er un fichier vide <code>test.txt</code> avec la commande <code>touch</code>.</p> </li> <li> <p>Quels sont les permission actuelles du fichier ? </p> </li> <li> <p>Changer les permissions du fichier pour que tout le monde ait les permissions de lecture et d'\u00e9criture.</p> </li> <li> <p>Finalement non, enlevez les droits \u00e0 ces gueux d'utilisateurs <code>o</code> !</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/6filius/","title":"TP Filius","text":""},{"location":"5%20%E2%80%93%20Architecture/6filius/#tp-filius","title":"TP Filius","text":"<p>Filius</p> <p>Filius est un logiciel qui permet de simuler un r\u00e9seau informatique. Si les ordinateurs de la r\u00e9gion n'autorisent pas l'installation de logiciels non approuv\u00e9s, on peut toutefois les ex\u00e9cuter en version \u00ab portable \u00bb. Copier le fichier <code>filius.zip</code> depuis l'espace NSI dans votre espace personnel et d\u00e9compressez-le. Il suffira d'ex\u00e9cuter <code>Lancer Filius.bat</code>.</p> <p>Document R\u00e9ponse Capytale</p> <p>Le TP est en cours de r\u00e9daction, le document r\u00e9ponse Capytale aura un peu de retard. Notez vos r\u00e9ponses au diff\u00e9rentes questions (Bloc-Notes) pour les copier plus tard. </p>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#un-reseau-local","title":"Un r\u00e9seau local","text":"<p>Objectif</p> <p>L'objectif de cette partie est de comprendre comment le switch achemine les trames d'un n\u0153ud source vers le bon n\u0153ud de destination gr\u00e2ce aux adresses MAC.</p>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#un-premier-reseau","title":"Un premier r\u00e9seau","text":"<ul> <li>Dans Filius, r\u00e9aliser le r\u00e9seau suivant. Cocher \u00ab Utiliser l'adresse IP comme nom \u00bb et \u00ab Utiliser l'adresse MAC comme nom \u00bb. Veuillez \u00e0 bien d\u00e9finir les adresses IP des h\u00f4tes.</li> </ul> <ul> <li>A travers ce TP, on associe aux diff\u00e9rentes machines un utilisateur :</li> </ul> Utilisateur Adresse IP Alice <code>192.168.0.1</code> Bob <code>192.168.0.2</code> Charlie <code>192.168.0.3</code> <ul> <li> <p>Lancer la simulation.</p> </li> <li> <p>D\u00e9finir la vitesse de la simulation \u00e0 1%.</p> </li> </ul>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#avant-lenvoie-de-donnees-sur-le-reseau","title":"Avant l'envoie de donn\u00e9es sur le r\u00e9seau","text":"<ul> <li> <p>Cliquer le switch pour r\u00e9v\u00e9ler sa table interne SAT avant l'envoie de donn\u00e9es sur le r\u00e9seau.</p> </li> <li> <p>Cliquer sur le premier h\u00f4te <code>192.168.0.1</code> (Alice). Installer le logiciel Ligne de commande sur cette machine et ex\u00e9cuter-le.</p> </li> </ul> Questions 1 <ol> <li> <p>Que vaut la table SAT du switch ?</p> </li> <li> <p>Que renvoie la commande <code>ipconfig</code> ?</p> </li> <li> <p>Que renvoie la commande <code>arp</code> ?</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#apres-lenvoie-de-donnees-sur-le-reseau-local","title":"Apr\u00e8s l'envoie de donn\u00e9es sur le r\u00e9seau local","text":"<ul> <li>R\u00e9aliser un ping de Alice <code>192.168.0.1</code> vers Charlie <code>192.168.0.3</code> gr\u00e2ce \u00e0 la commande <code>ping 192.168.0.3</code>.</li> </ul> Questions 2 <ol> <li> <p>Que vaut maintenant la table SAT du switch ? \u00c0 quoi sert-elle ?</p> </li> <li> <p>Que renvoie maintenant la commande <code>arp</code> ? \u00c0 quoi sert la table ARP ?</p> </li> <li> <p>Que renvoie la commande <code>arp</code> sur l'h\u00f4te de destination Charlie <code>192.168.0.3</code> ? Et Bob <code>192.168.0.2</code> ?</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#ou-est-charlie","title":"O\u00f9 est Charlie ?","text":"<p>Avant le premier ping, les diff\u00e9rents h\u00f4tes et le switch n'ont aucune connaissance du r\u00e9seau local auquel ils sont connect\u00e9s. Ainsi quand Alice envoie un message \u00e0 Charlie, elle ne conna\u00eet pas encore l'adresse MAC de ce dernier. Quelle adresse MAC de destination doit-elle inscrire sur la trame qu'elle envoie sur le r\u00e9seau ?</p> <p>Elle envoie simplement un message \u00e0 tout le monde sur le r\u00e9seau local pour trouver Charlie ! C'est ce que l'on appelle une diffusion g\u00e9n\u00e9rale, ou un broadcast.</p> Analyse de la d\u00e9couverte du r\u00e9seau <ol> <li> <p>Alice g\u00e9n\u00e8re une trame : Alice fait une demande de ping, le message est \u00ab Bonjour Bob, c'est Alice, ceci est un ping. Renvoie-moi un message. \u00bb. Le protocole TCP encapsule ce message dans un segment, puis le protocole IP encapsule ce segment TCP dans un paquet IP. Ce paquet est enfin encapsul\u00e9 dans une trame Ethernet.</p> </li> <li> <p>** En-t\u00eate de la trame : Sur la trame qu'elle envoie sur le r\u00e9seau, Alice y inscrit l'adresse MAC de destination <code>FF:FF:FF:FF:FF:FF</code>, c'est l'adresse de diffusion g\u00e9n\u00e9rale (broadcast)**.</p> </li> <li> <p>R\u00e9ception par le switch : Le switch re\u00e7oit la trame broadcast d'Alice et la diffuse sur tous ses autres ports, \u00e0 Bob et \u00e0 Charlie donc. Par ailleurs, il enregistre dans sa table SAT l'adresse MAC d'Alice (l'adresse MAC source de la trame) en y associant le port o\u00f9 Alice est connect\u00e9e.</p> </li> <li> <p>R\u00e9ception par Bob : Bob re\u00e7oit la trame broadcast depuis le switch. Il la d\u00e9capsule en un paquet et regarde l'adresse IP de destination. Ce n'est pas la sienne, donc il ignore le paquet.</p> </li> <li> <p>R\u00e9ception par Charlie : Charlie re\u00e7oit la trame broadcast et la d\u00e9capsule, l'adresse IP de destination indiqu\u00e9e sur le paquet est la sienne. Il d\u00e9capsule enfin le paquet jusqu'\u00e0 lire le message d'Alice \u00ab Bonjour Bob, c'est Alice, ceci est un ping. Renvoie-moi un message. \u00bb. Il note aussi l'adresse MAC d'Alice dans sa table ARP. </p> </li> <li> <p>Charlie g\u00e9n\u00e8re une trame : Charlie renvoie donc un message \u00e0 Alice. Il y inscrit l'adresse IP d'Alice sur le paquet et son adresse MAC sur la trame.</p> </li> <li> <p>R\u00e9ception par le switch : La trame de Charlie passe tout d'abord par le switch. Ce dernier ajoute l'adresse MAC de Charlie dans sa table ARP. Le switch conna\u00eet l'adresse MAC d'Alice, donc il aiguille la trame sur le bon port. </p> </li> <li> <p>R\u00e9ception par Alice : Alice re\u00e7oit le message de Charlie et note son adresse MAC dans sa table ARP.</p> </li> </ol> En vid\u00e9o <p>N'h\u00e9sitez pas \u00e0 faire pause \u00e0 chaque \u00e9tape :</p> <p></p> Questions 3 <ol> <li> <p>Quelles sont les adresses MAC source et de destination inscrit dans l'en-t\u00eate dans la premi\u00e8re trame envoy\u00e9e par Alice ?</p> </li> <li> <p>Cette trame encapsule un paquet. Quelles sont les adresses IP source et de destination inscrit dans l'en-t\u00eate de ce paquet ? </p> </li> <li> <p>Comment Charlie sait alors que cette trame lui est destin\u00e9e ?</p> </li> <li> <p>Comment Bob sait que cette trame ne lui est pas destin\u00e9e ?</p> </li> <li> <p>Quelles sont les adresses MAC source et de destination inscrit dans l'en-t\u00eate dans la trame envoy\u00e9e par Charlie ? Et les adresses IP source et de destination du paquet encapsul\u00e9 dans la trame ?</p> </li> <li> <p>Est-ce que le switch d\u00e9capsule les trames qu'il re\u00e7oit ? C'est-\u00e0-dire, regarde-t-il les adresses IP du paquet contenu dans la trame ? Change-t-il les adresses MAC source/destination de la trame ? </p> </li> <li> <p>Est-ce que les diff\u00e9rents h\u00f4tes, Alice, Bob et Charlie d\u00e9capsulent les trames qu'ils re\u00e7oivent ?</p> </li> <li> <p>Que se passe-t-il si Alice envoie un ping \u00e0 l'adresse IP <code>192.168.0.4</code> dans la simulation (remettre la vitesse de simulation \u00e0 100%) ? </p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#sous-reseaux","title":"Sous-r\u00e9seaux","text":"<p>Objectif</p> <p>L'objectif de cette partie est de comprendre comment la notion de sous-r\u00e9seaux : la division d'un r\u00e9seau en plusieurs sous-groupes.</p>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#une-introduction","title":"Une introduction","text":"<ul> <li>Renommer le switch en \u00ab SwitchFrance \u00bb. Cr\u00e9er un second r\u00e9seau de trois machines d'adresses IP <code>192.168.1.1</code>, <code>192.168.1.2</code> et <code>192.168.1.3</code> avec un \u00ab SwitchUkraine \u00bb. Relier les deux switchs.</li> </ul> Utilisateur Adresse IP Anastasia <code>192.168.1.1</code> Boris <code>192.168.1.2</code> Katia <code>192.168.1.3</code> Questions 4 <ol> <li> <p>Tester un ping de <code>192.168.0.1</code> (Alice) vers <code>192.168.1.2</code> (Boris). Que se passe-t-il?</p> </li> <li> <p>Renommer la machine <code>192.168.1.2</code> (Boris) en <code>192.168.0.4</code> et retenter le ping. Que se passe-t-il?</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#masque-de-sous-reseau","title":"Masque de sous-r\u00e9seau","text":"<p>Lorsqu'une machine A veut envoyer un message \u00e0 une machine B, elle doit d\u00e9terminer si cette machine :</p> <ul> <li> <p>appartient au m\u00eame sous-r\u00e9seau : auquel cas le message est envoy\u00e9 directement via un ou plusieurs switchs.</p> </li> <li> <p>n'appartient pas au m\u00eame sous-r\u00e9seau : auquel cas le message doit d'abord transiter par un routeur (voir plus loin).</p> </li> </ul> <p>La notion de sous-r\u00e9seau n'est pas topologique \u2014 il ne suffit pas de relier physiquement les dispositifs entre eux \u2014 mais ob\u00e9it \u00e0 des r\u00e8gles num\u00e9riques. C'est le masque de sous-r\u00e9seau (parfois simplement masque, ou netmask en anglais) qui permet de d\u00e9terminer quelles adresses font partie d'un m\u00eame sous-r\u00e9seau.</p>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#adresse-ip-et-masque-de-sous-reseau","title":"Adresse IP et masque de sous-r\u00e9seau","text":"<p>Une adresse IP est cod\u00e9e sur 4 octets (32 bits) et peut \u00eatre coup\u00e9 en deux :</p> <ul> <li> <p>L'adresse du r\u00e9seau : les \\(k\\) premiers bits</p> </li> <li> <p>L'adresse du r\u00e9seau : les \\(32 - k\\) bits restants.</p> </li> </ul> Exemple 1Exemple 2 <ul> <li> <p>Par d\u00e9faut, le masque de Filius est <code>255.255.255.0</code>, soit en binaire <code>11111111.11111111.11111111.00000000</code>.</p> </li> <li> <p>Donc \\(k = 24\\). On note souvent l'adresse IP d'Alice comme <code>192.168.0.1 /24</code></p> </li> <li> <p>Suivant ce masque, 256 machines peuvent donc appartenir au m\u00eame sous-r\u00e9seau (ce n'est pas tout \u00e0 fait le cas car des adresses finissant par 0 ou par 255 sont r\u00e9serv\u00e9es).</p> </li> <li> <p>Deux machines appartiennent a un m\u00eame sous-r\u00e9seau si elles partagent donc les 24 premiers bits, c'est \u00e0 dire les 3 premiers nombres (octets). Ainsi Alice est dans le sous-r\u00e9seau \u00ab <code>192.168.0</code> \u00bb.</p> </li> </ul> <ul> <li> <p>Soit le masque <code>255.255.248.0</code>, en binaire <code>11111111.11111111.11111000.00000000</code>.</p> </li> <li> <p>Donc \\(k = 21\\). L'adresse IP d'Alice se note <code>192.168.0.1 /21</code>.</p> </li> <li> <p>Deux machines appartiennent au m\u00eame sous-r\u00e9seau si elles partagent les 21 premiers bits de leur adresse IP.</p> </li> </ul> Question 5 <p>Dans l'exemple 2, combien de machines peuvent appartenir \u00e0 ce m\u00eame sous-r\u00e9seau ?</p>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#appartenance-a-un-meme-sous-reseau","title":"Appartenance \u00e0 un m\u00eame sous-r\u00e9seau","text":"<p>Pour que deux machines appartiennent \u00e0 un m\u00eame sous-r\u00e9seau, il faut donc que leurs adresses IP respectives partagent les m\u00eames \\(k\\) premiers bits d\u00e9finis par le masque.</p> <p>Pour cela, on extrait les \\(k\\) premiers bits correspondant au sous-r\u00e9seau d'une adresse IP quelconque gr\u00e2ce l'op\u00e9ration du ET logique bit \u00e0 bit (bitwise and en anglais) que l'on note <code>&amp;</code> pour le diff\u00e9rencier du ET logique usuel <code>&amp;&amp;</code>. On effectue le calcul <code>Adresse IP &amp; Masque</code>. Par exemple :</p> <pre><code>\u2022 Adresse IP :  192.168.1.2    =  11000000.10101000.00000001.00000010\n\u2022 Masque     :  255.255.248.0  =  11111111.11111111.11111000.00000000\n\n\u2022 Adresse IP &amp; Masque :\n\n    11000000.10101000.00000001.00000010  \u25c0  Adresse IP\n &amp;  11111111.11111111.11111000.00000000  \u25c0  Masque\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    11000000.10101000.00000000000000000  \u25c0  Sous-r\u00e9seau\n</code></pre> <p>Comme vous pouvez le constater, les bits \u00e0 <code>0</code> masque la partie inf\u00e9rieure de l'adresse IP !</p> Question 6 <p>On consid\u00e8re trois h\u00f4tes A, B et C aux adresses IP respectives <code>192.168.129.10</code>, <code>192.168.135.200</code> et <code>192.168.145.1</code> configur\u00e9es avec le masque de sous-r\u00e9seau <code>255.255.248.0</code>. Remplir le tableau :</p> <p></p> Machines Adresse IP Masque Adresse IP &amp; Masque A <code>192.168.129.10</code> <code>255.255.248.0</code> B <code>192.168.135.200</code> <code>255.255.248.0</code> C <code>192.168.145.1</code> <code>255.255.248.0</code> <p></p>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#le-routeur","title":"Le routeur","text":"<p>Objectif</p> <p>L'objectif de cette partie est de comprendre comment le routeur interconnecte deux sous-r\u00e9seaux en routant les paquets.</p> <p>Fichier Filius</p> <p>Si vous n'avez pas sauvegard\u00e9 votre r\u00e9seau, t\u00e9l\u00e9chargez ce fichier.</p> <p>Comment faire pour que le sous-r\u00e9seau \u00ab France \u00bb communique avec le sous-r\u00e9seau \u00ab Ukraine \u00bb ? Comment interconnecter les deux sous-r\u00e9seaux con\u00e7us pr\u00e9c\u00e9demment ? Gr\u00e2ce \u00e0 un \u00e9quipement de la couche 3 (couche r\u00e9seau), le routeur. Ce dispositif, parfois appel\u00e9 passerelle, est \u00e9quip\u00e9 de deux cartes r\u00e9seaux (chacune ayant une adresse physique MAC et une adresse logique IP) ou plus.</p> <p></p> <ol> <li> <p>En mode conception , ajouter un routeur \u00e0 deux interfaces et le relier aux deux switchs. Si vous ne l'avez pas d\u00e9j\u00e0 fait, supprimer le c\u00e2ble entre les deux switchs.</p> <p>Pourquoi deux interfaces ? Il faut bien une carte r\u00e9seau par sous-r\u00e9seau !</p> </li> <li> <p>Configurer le routeur :</p> <ul> <li>Son interface reli\u00e9e au \u00ab SwitchFrance \u00bb doit appartenir au sous-r\u00e9seau \u00ab France \u00bb. Donc on doit configurer son adresse IP sous la forme <code>192.168.0.XXX</code> (on conserve le masque par d\u00e9faut <code>255.255.255.0</code>).</li> </ul> <p>G\u00e9n\u00e9ralement, on donne une adresse finissant par <code>254</code> (<code>255</code> \u00e9tant r\u00e9serv\u00e9 pour effectuer un ping l'int\u00e9gralit\u00e9 d'un sous-r\u00e9seau).</p> <ul> <li> <p>Faire de m\u00eame pour la deuxi\u00e8me interface du routeur.</p> </li> <li> <p>S\u00e9lectionner \u00ab Routage automatique \u00bb dans l'onglet \u00ab G\u00e9n\u00e9ral \u00bb.</p> </li> </ul> <p> </p> </li> <li> <p>En mode simulation  , tester un <code>ping</code> depuis la machine <code>192.168.0.1</code> (Alice) vers <code>192.168.1.1</code> (Anastasia). Que se passe-t-il ?</p> <p>La carte r\u00e9seau d'Alice ne sait pas o\u00f9 envoyer les paquets car l'adresse IP d'Anastasia ne fait pas parti de son sous-r\u00e9seau. Alice ne sait pas non plus qu'il existe un routeur (passerelle) dans son sous-r\u00e9seau.</p> </li> <li> <p>En mode configuration , cliquer sur la machine d'Alice et lui renseigner la passerelle de son sous-r\u00e9seau. Retenter le ping.</p> <p>Le ping se termine en <code>timeout</code> ? Il ne faut pas oublier qu'un ping renvoie un \u00e9cho pong... </p> </li> <li> <p>Une fois qu'Alice et Anastasia peuvent communiquer, effectuer un <code>traceroute</code> pour afficher le nombre de sauts n\u00e9cessaires.</p> </li> </ol> Questions 7 <p>Ex\u00e9cuter l'invite de commandes de Windows : Win+R puis <code>cmd</code> puis Enter.</p> <ol> <li> <p>Gr\u00e2ce \u00e0 la commande <code>ipconfig /all</code>, donner l'adresse IP et MAC de la carte r\u00e9seau du PC.</p> </li> <li> <p>Donner aussi l'adresse IP de la passerelle par d\u00e9faut.</p> </li> <li> <p>Afficher aussi la table ARP gr\u00e2ce \u00e0 la commande <code>arp -a</code>. Quelle est l'adresse MAC de la passerelle ?</p> </li> <li> <p><code>traceroute</code> devient <code>tracert</code> sous Windows. L'adresse IP du serveur Web www.lyceecivray.net est <code>188.130.25.202</code>. Combien faut-il de sauts pour y parvenir depuis votre poste ?</p> </li> </ol>"},{"location":"5%20%E2%80%93%20Architecture/6filius/#un-serveur-web","title":"Un serveur Web","text":"<p>Objectif</p> <p>Apr\u00e8s avoir \u00e9tudi\u00e9 les trois premi\u00e8res couches du mod\u00e8le OSI (\u00e0 savoir, la couche physique, la couche liaison de donn\u00e9es et la couche r\u00e9seau), nous allons maintenant nous concentrer sur la couche 4 (transport), o\u00f9 se trouve le protocole TCP, ainsi que sur les couches 5 et sup\u00e9rieures (application), o\u00f9 r\u00e9side le protocole HTTP.</p> <p>Fichier Filius</p> <p>Si vous n'avez pas sauvegard\u00e9 votre r\u00e9seau, t\u00e9l\u00e9chargez ce fichier.</p> <p>Si envoyer des pings sur le r\u00e9seau est int\u00e9ressant, envoyer de r\u00e9elles donn\u00e9es sur le r\u00e9seau l'est encore plus !</p> <p>Maintenant que nous avons reli\u00e9 deux machines situ\u00e9es dans deux sous-r\u00e9seaux diff\u00e9rents, nous obtenons un mod\u00e8le r\u00e9duit d'Internet. On peut d\u00e9sormais simuler le service Web avec \u00e9change client/serveur.</p> <ol> <li> <p>En mode configuration , connecter un ordinateur au \u00ab SwitchUkraine \u00bb, il s'agira de notre serveur Web. Configurer correctement la machine :</p> <ul> <li> <p>Lui donner une adresse IP du sous-r\u00e9seau (<code>192.168.1.10</code> par exemple).</p> </li> <li> <p>Ne pas oublier de lui renseigner la passerelle.</p> </li> </ul> </li> <li> <p>En mode simulation , installer un serveur Web sur cette nouvelle machine et le d\u00e9marrer.</p> <p>Par d\u00e9faut, Filius g\u00e9n\u00e8re une page HTML <code>index.html</code>. En installant un \u00e9diteur de texte, vous pouvez modifier cette page web.</p> </li> <li> <p>Installer un navigateur Web sur la machine d'Alice <code>192.168.0.1</code>. Dans la barre d'adresse, y inscrire l'adresse IP du serveur. Une page devrait s'afficher.</p> <p>Que s'est-il pass\u00e9 ? Le navigateur web d'Alice a g\u00e9n\u00e9r\u00e9 une requ\u00eate HTTP (de type <code>GET</code>) qu'elle envoie au serveur Web. Le serveur re\u00e7oit la requ\u00eate et renvoie le fichier <code>index.html</code> au navigateur Web d'Alice qui l'affiche.</p> </li> <li> <p>Pour avoir le d\u00e9tail des \u00e9changes de donn\u00e9es entre les deux machines, faites clique-droit sur la machine d'Alice <code>192.168.0.1</code> et \u00ab Afficher les \u00e9changes de donn\u00e9es \u00bb.</p> </li> </ol> <p></p> Questions 8 <p>Trouver la requ\u00eate HTTP <code>GET</code> qu'Alice a envoy\u00e9e au serveur. Dans le d\u00e9tail de cette requ\u00eate, on peut identifier les quatre couches R\u00e9seau, Internet, Transport et Application qui constituent les diff\u00e9rents en-t\u00eates.</p> <ol> <li> <p>A quel dispositif correspond l'adresse IP de destination du paquet envoy\u00e9e par Alice ? </p> </li> <li> <p>A quel dispositif correspond l'adresse MAC de destination de la trame envoy\u00e9e par Alice ?</p> </li> <li> <p>Que fait le routeur lorsqu'il re\u00e7oit la trame contenant la requ\u00eate d'Alice au niveau des adresses MAC ?</p> <p>On remarque en bleu clair des \u00e9changes qui suivent tous les \u00e9changes HTTP (bleu fonc\u00e9), en regardant de plus pr\u00e8s on s'aper\u00e7oit qu'il s'agit d'un simple segment TCP avec le commentaire <code>ACK</code>. Il ne contient pas de donn\u00e9es.</p> </li> <li> <p>Juste apr\u00e8s la requ\u00eate GET d'Alice, quelle machine \u00e9met le segment <code>ACK</code> ? Qui la re\u00e7oit ? </p> </li> <li> <p>De m\u00eame apr\u00e8s la r\u00e9ponse du serveur contenant les donn\u00e9es de la page <code>index.html</code>, quelle machine \u00e9met le segment <code>ACK</code> ? Qui la re\u00e7oit ? </p> </li> <li> <p>D\u2019apr\u00e8s vos connaissances sur le protocole TCP, quel r\u00f4le peut bien jouer ce segment ?</p> </li> <li> <p>TCP a aussi le r\u00f4le d'initialiser et terminer la connexion entre Alice et le serveur Web. Rep\u00e9rer les trames TCP marquant le d\u00e9but et la fin de connexion. Compl\u00e9ter le diagramme suivant (sur Paint par exemple) :</p> </li> </ol> <p> </p>"},{"location":"6%20%E2%80%93%20Programmation/1intro/","title":"Introduction","text":""},{"location":"6%20%E2%80%93%20Programmation/1intro/#introduction","title":"Introduction","text":""},{"location":"6%20%E2%80%93%20Programmation/1intro/#python-un-langage-populaire","title":"Python, un langage populaire","text":"<p>Python est un langage de programmation invent\u00e9 par Guido Van Rossum en 1991. C'est un langage tr\u00e8s populaire dans l'industrie du num\u00e9rique (pour le d\u00e9veloppement d'applications, de sites Web etc.) et le monde scientifique (notamment en intelligence artificielle) de par sa clart\u00e9, sa concision et la richesse de ses biblioth\u00e8ques (du code ext\u00e9rieur permettant d'ajouter d'autres fonctionnalit\u00e9s au langage). Il est aussi tr\u00e8s adapt\u00e9 pour l'apprentissage de la programmation. </p>"},{"location":"6%20%E2%80%93%20Programmation/1intro/#quest-ce-un-programme","title":"Qu'est-ce un programme ?","text":""},{"location":"6%20%E2%80%93%20Programmation/1intro/#definition","title":"D\u00e9finition","text":"<p>Un programme est une s\u00e9quence d'instructions qui manipulent des donn\u00e9es (nombres, cha\u00eenes de caract\u00e8res, des tableaux, des images etc.). Un programme fera exactement ce que vous lui demandez de faire.</p>"},{"location":"6%20%E2%80%93%20Programmation/1intro/#langage-de-programmation-une-abstraction","title":"Langage de programmation, une abstraction","text":"<p>La machine ne parle pas anglais. Par le biais de son processeur, une machine ex\u00e9cute ces instructions cod\u00e9es sous forme binaire. \u00c9videmment, ce serait frustrant de coder directement en binaire (comme \u00e0 l'\u00e9poque sur cartes perfor\u00e9es), c'est la raison pour laquelle les langages de programmation ont \u00e9t\u00e9 invent\u00e9 pour s'\u00e9loigner du code machine et se rapprocher du langage et raisonnement humain.</p> <p>Diff\u00e9rence langage de bas/haut niveau</p> <ul> <li> <p>Les langages de bas niveau, comme le code machine ou l'assembleur, sont tr\u00e8s complexes \u00e0 utiliser, car tr\u00e8s \u00e9loign\u00e9s du langage naturel, on dit que ce sont des langages \u00ab proches de la machine \u00bb, en contrepartie ils permettent de faire des programmes tr\u00e8s rapides \u00e0 l'ex\u00e9cution. Par exemple en assembleur, l'instruction <code>LD A, 0x03</code> permet de mettre le nombre 3 dans le registre A du processeur.</p> </li> <li> <p>Les langages de haut niveau (C, C++, Java, Python...) sont eux plus faciles \u00e0 utiliser, car plus proches du langage. Par exemple, l'instruction <code>i = 12 if b &gt; 3 else 0</code> en Python. </p> </li> </ul> <p>Notion de langage compil\u00e9 et interpr\u00e9t\u00e9</p> <p>Chaque instruction que vous \u00e9crivez en Python va \u00eatre traduit au fur et \u00e0 mesure de son ex\u00e9cution en code machine, c'est un langage dit interpr\u00e9t\u00e9. D'autres langages comme le C n\u00e9cessitent de traduirement enti\u00e8rement le script en langage machine avant son \u00e9xecution, c'est un langage compil\u00e9.</p> <p>Une machine poss\u00e8de un nombre limit\u00e9 d'instructions basiques qui permettent de g\u00e9rer par exemple des donn\u00e9es stock\u00e9es dans des variables, faire des tests sur ces variables, r\u00e9p\u00e9ter des instructions etc.</p> <p>La difficult\u00e9 en programmation est donc de traduire sa fa\u00e7on de penser et de r\u00e9soudre un probl\u00e8me sp\u00e9cifique en une s\u00e9quence de ces quelques instructions basiques. Il n'y a pas de lignes de code superflues.</p> <p>La syntaxe souvent rigide de ces instructions est \u00e0 conna\u00eetre, la machine h\u00e9las ne corrige pas vos erreurs. </p>"},{"location":"6%20%E2%80%93%20Programmation/2variables/","title":"Les variables et les types","text":""},{"location":"6%20%E2%80%93%20Programmation/2variables/#les-variables-et-les-types","title":"Les variables et les types","text":""},{"location":"6%20%E2%80%93%20Programmation/2variables/#definition-et-affectation","title":"D\u00e9finition et affectation","text":"<p>Une variable en programmation n'a pas du tout le m\u00eame sens qu'en math\u00e9matiques. Une variable est une association entre un nom (son identifiant) et une valeur (de n'importe quel type). C'est bien la plus petite brique de base pour stocker une information et la manipuler. On peut se repr\u00e9senter une variable comme une bo\u00eete \u00e9tiquet\u00e9e dans laquelle on met quelque chose. Par exemple :</p> <pre><code>toto = 42\n</code></pre> <p>La notion d'affectation</p> <p>L'instruction qui permet d'associer une valeur \u00e0 une variable (nouvelle ou d\u00e9j\u00e0 cr\u00e9\u00e9e) s'appelle une affectation. En python, on utilise le symbole <code>=</code>. A ne pas confondre avec l'\u00e9galit\u00e9 math\u00e9matiques ! Certains langages utilisent le symbole <code>\u2190</code> comme symbole d'affection.</p> <p>La notion d'initialisation</p> <p>La premi\u00e8re fois qu'on affecte une valeur \u00e0 une variable, on dit qu'on l'initialise. On parle aussi de d\u00e9claration.</p> <p>Info</p> <p>Par abus de langage, on confond souvent variable et nom de variable. Ici on parlera de la variable <code>toto</code>.</p>"},{"location":"6%20%E2%80%93%20Programmation/2variables/#ce-quil-se-passe-en-memoire","title":"Ce qu'il se passe en m\u00e9moire","text":"<p>Regardons ce qu'il se passe physiquement lorsqu'on initialise une variable. Une machine peut \u00eatre vue comme la r\u00e9union de deux composants :</p> <ul> <li> <p>Un centre de calcul, le processeur, charg\u00e9 de manipuler des donn\u00e9es (copie, addition, tests etc.).</p> </li> <li> <p>Une m\u00e9moire permettant de stocker des donn\u00e9es.</p> </li> </ul> <p>Toutes les donn\u00e9es qu'on manipule dans un programme sont stock\u00e9es dans la m\u00e9moire vive (RAM) de l'ordinateur. C'est un tr\u00e8s grand tableau d\u00e9coup\u00e9 en octet :</p> <p>Chaque case (octet) de ce tableau se r\u00e9f\u00e8re par un indice, que l'on appelle adresse. Lorsque j'initialise <code>toto</code> \u00e0 42, un entier cod\u00e9 sur 32 bits imaginons, plusieurs \u00e9tapes se succ\u00e8dent :</p> <ul> <li>\u00c9tape 1 : La machine commence par trouver un emplacement disponible de la taille souhait\u00e9e. Ici, elle nous renvoie 312.</li> </ul> <ul> <li> <p>\u00c9tape 2 : On associe cet emplacement \u00e0 l'identifiant <code>toto</code>. </p> </li> <li> <p>\u00c9tape 3 : Finalement, on copie l'entier 42 \u00e0 cet emplacement.</p> </li> </ul> <p>L'identifiant <code>toto</code> n'est qu'une simple adresse dans la m\u00e9moire !</p>"},{"location":"6%20%E2%80%93%20Programmation/2variables/#expressions-et-evaluations","title":"Expressions et \u00e9valuations","text":"<p>Python permet d'effectuer tout type de calcul, comme une calculatrice ordinaire. Les r\u00e8gles de priorit\u00e9 des calculs sont les m\u00eames qu'en math\u00e9matiques. On utilise des parenth\u00e8ses lorsqu'on a besoin de changer l'ordre de priorit\u00e9.</p> Op\u00e9ration Symbole Exemple R\u00e9sultat Addition <code>+</code> <code>10 + 20</code> <code>30</code> Soustraction <code>-</code> <code>2 - 7</code> <code>-5</code> Multiplication <code>*</code> <code>5 * 9</code> <code>45</code> Puissance <code>**</code> <code>2 ** 3</code> <code>8</code> Division <code>/</code> <code>5 / 2</code> <code>2.5</code> Division enti\u00e8re <code>//</code> <code>5 // 2</code> <code>2</code> Reste (modulo) <code>%</code> <code>5 % 2</code> <code>1</code> <p>Analysons cette courte s\u00e9quence d'instructions :</p> <pre><code>&gt;&gt;&gt; a = 2\n&gt;&gt;&gt; a = 4\n&gt;&gt;&gt; a\n4\n&gt;&gt;&gt; b = a + 3\n&gt;&gt;&gt; b\n7\n&gt;&gt;&gt; b = c + 1\nTraceback (most recent call last):\n  File \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nNameError: name 'c' is not defined\n&gt;&gt;&gt; \n</code></pre> <p>Analyse ligne par ligne</p> Ligne 1Ligne 2Ligne 3 et 4Ligne 5Ligne 8 <p>On initialise une variable <code>a</code> \u00e0 2.</p> <p>On r\u00e9affecte une nouvelle valeur, 4, \u00e0 la variable <code>a</code>.</p> <p>On demande la valeur associ\u00e9e \u00e0 <code>a</code>. L'ancienne valeur 2 a bien \u00e9t\u00e9 \u00e9cras\u00e9e.</p> <p>On initialise une nouvelle valeur <code>b</code> avec l'expression <code>a + 3</code>. La machine doit au pr\u00e9alable l'\u00e9valuer avant de l'affecter. Dans l'ordre :</p> <ul> <li> <p>Python lit le membre de droite  <code>a + 3</code>.</p> </li> <li> <p>Il r\u00e9cup\u00e8re la valeur stock\u00e9e dans <code>a</code>, c'est-\u00e0-dire 4.</p> </li> <li> <p>Il \u00e9value l'expression <code>4 + 3</code>.</p> </li> <li> <p>Il affecte \u00e0 <code>b</code> la somme obtenue, c'est-\u00e0-dire 7.</p> </li> </ul> <p>On retient que l'affection se d\u00e9roule toujours en dernier (g\u00e9n\u00e9ralement).</p> <p>On tente de r\u00e9affecter \u00e0 <code>b</code> le r\u00e9sultat de l'expression <code>c + 1</code>. Or aucune variable nomm\u00e9e <code>c</code> n'a \u00e9t\u00e9 d\u00e9clar\u00e9e auparavant, on obtient donc une erreur.</p> <p>Syntaxe abr\u00e9g\u00e9e</p> <p>On a souvent besoin d'incr\u00e9menter une variable (augmenter sa valeur de 1) ou de la d\u00e9cr\u00e9menter (diminuer sa valeur de 1). Au lieu d'\u00e9crire <code>a = a + 1</code>, on peut \u00e9crire de fa\u00e7on plus courte : <code>a += 1</code>.</p> <p>Cette syntaxe raccourcie fonctionne pour n'importe quelle valeur de l'incr\u00e9ment, ainsi que pour les op\u00e9rateurs <code>+ , - , *, **, / , //, %</code> :</p> <pre><code>&gt;&gt;&gt; a = 20\n&gt;&gt;&gt; a -= 15\n5\n&gt;&gt;&gt; a /= 2\n2.5\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/2variables/#types-de-variables","title":"Types de variables","text":"<p>Pour l'instant, nos variables ne contenaient que des nombres entiers. Pour diff\u00e9rencier la nature de ce que peut contenir une variable, on parle alors de type de variable. Voici les types que nous allons manipuler tout au long de l'ann\u00e9e :</p> Syntaxe Type Exemple <code>int</code> Entier <code>42</code> <code>float</code> Flottant (\u00e0 virgule) <code>2.71828</code> <code>str</code> Cha\u00eene de caract\u00e8res (ou string) <code>'Hello, World'</code> <code>bool</code> Bool\u00e9en (<code>True</code> ou <code>False</code>) <code>True</code> <code>tuple</code> p-uplet <code>(255, 127, 0)</code> <code>list</code> Tableau <code>[0, 1, 2, 3, 4, 5]</code> <code>dict</code> Dictionnaire <code>{'prenom': 'Thomas', 'age': 44, 'taille': 184}</code> <code>function</code> Fonction <code>print</code> <p>D\u00e9terminer le type d'une variable</p> <p>Il suffit d'utiliser la fonction <code>type</code> : </p><pre><code>&gt;&gt;&gt; a = 'Au secours!'\n&gt;&gt;&gt; type(a)\n&lt;class 'str'&gt;\n</code></pre> <p>Typage dynamique/statique</p> <p>En Python, on omet de pr\u00e9ciser le type de variable utilis\u00e9. Dans le langage C par exemple, il est n\u00e9cessaire de pr\u00e9ciser le type par un mot-clef :</p> <pre><code>int a = 42\n</code></pre> <p>Ce typage est dit statique car la variable <code>a</code> ne pourra pas changer de type au cours du programme, elle n'aura le droit que de contenir un nombre entier. Python offre une plus grande souplesse :</p> <pre><code>&gt;&gt;&gt; a = 1\n&gt;&gt;&gt; type(a)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; a = 'test'\n&gt;&gt;&gt; type(a)\n&lt;class 'str'&gt;\n</code></pre> <p>Python a chang\u00e9 tout seul le type de notre variable, sans intervention ! On parle alors de typage dynamique.</p> <p>Mauvaise pratique</p> <p>Changer le type d'une variable au cours d'un programme est une grande source d'erreur. Pour que votre code reste clair et facilement compr\u00e9hensible, n'utilisez pas le typage dynamique.</p> <p>Conversion entre les diff\u00e9rents types</p> <p>On peut parfois souhaiter passer d'un type \u00e0 un autre, si cela fait sens \u00e9videmment.</p> <pre><code>&gt;&gt;&gt; float(3)\n3.0\n&gt;&gt;&gt; int(2.47)\n2\n&gt;&gt;&gt; str(47)\n'47'\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/2variables/#regles-de-nommage","title":"R\u00e8gles de nommage","text":"<p>Python et la plupart des langages de programmation suivent les m\u00eames r\u00e8gles de nommage des variables :</p> <ul> <li> <p>Seuls les lettres non-accentu\u00e9es ( miniscule et majuscule sont des caract\u00e8res diff\u00e9rents, ainsi les variables <code>a</code> et <code>A</code> sont bien deux variables distincts), les chiffres et le tiret du bas <code>_</code> sont autoris\u00e9es. Les espaces ne sont donc pas autoris\u00e9s.</p> </li> <li> <p>Le nom de la variable ne doit pas commencer par un chiffre.</p> </li> <li> <p>Le nom de la variable ne doit pas \u00eatre un mot-clef (keyword en anglais) du langage comme <code>while</code>, <code>if</code>, <code>def</code> etc.</p> </li> </ul> <p>Les bonnes pratiques</p> <ul> <li> <p>Le nom de la variable doit \u00eatre explicite et donner du sens \u00e0 votre code. Par exemple si on doit manipuler une variable qui stocke un \u00e2ge, il faut l'\u00e9crire non pas <code>a</code> mais <code>age</code>. Pour les indices de tableau et les incr\u00e9ments dans les boucles on utilise souvent les noms <code>i</code>, <code>j</code>, <code>k</code>.</p> </li> <li> <p>Le nom des variables (et fonctions) commencent par une minuscule. Les noms qui commencent par une majuscule seront r\u00e9serv\u00e9s pour les types construits / classes.</p> </li> <li> <p>Si le nom est compos\u00e9, il existe deux mani\u00e8res :</p> <ul> <li> <p><code>snake_case</code> : les mots sont s\u00e9par\u00e9s par des underscores.</p> </li> <li> <p><code>camelCase</code> : les mots sont s\u00e9par\u00e9s par des majuscules mais la 1\u00e8re lettre est minuscule.</p> </li> </ul> <p>C'est une question de pr\u00e9f\u00e9rence, la chose \u00e0 retenir est de ne pas m\u00e9langer les deux, il faut rester consistent. </p> </li> </ul>"},{"location":"6%20%E2%80%93%20Programmation/2variables/#afficher-une-variable","title":"Afficher une variable","text":""},{"location":"6%20%E2%80%93%20Programmation/2variables/#methode-directe","title":"M\u00e9thode directe","text":"<p>La fonction <code>print</code> permet d'afficher dans la console ce qu'on lui donne en argument. Cela peut \u00eatre simplement du texte :</p> <pre><code>&gt;&gt;&gt; print(\"Hello, World.\")\nHello, World.\n</code></pre> <p>Ou m\u00eame un nombre :</p> <pre><code>&gt;&gt;&gt; print(3.1415)\n3.1415\n</code></pre> <p>On peut alors afficher nos variables :</p> <pre><code>&gt;&gt;&gt; a = \"une cha\u00eene de caract\u00e8re\"\n&gt;&gt;&gt; print(a)\nune cha\u00eene de caract\u00e8re\n&gt;&gt;&gt; toto = 42\n&gt;&gt;&gt; print(toto)\n42\n</code></pre> <p>Ce qui est tr\u00e8s utile lorsqu'on con\u00e7oit des scripts ! L'inter\u00eat est assez limit\u00e9 dans le shell (la console <code>&gt;&gt;&gt;</code>) effectivement.</p> <p>Formatage avanc\u00e9</p> <p>Parfois, on souhaite m\u00e9langer du texte pr\u00e9d\u00e9fini et des variables. Il existe 3 m\u00e9thodes :</p> Utiliser la variadicit\u00e9 de <code>print</code>Concat\u00e9ner les cha\u00eenes de caract\u00e8resfstring <p>Une fonction est dite variadique si elle accepte un nombre variable de param\u00e8tres. C'est le cas pour la fonction <code>print</code> :</p> <p></p><pre><code>&gt;&gt;&gt; age = 18\n&gt;&gt;&gt; print(\"Vous avez\", age, \"ans.\")\nVous avez 18 ans.\n</code></pre> Le probl\u00e8me, c'est que finalement on n'a pas r\u00e9ussi \u00e0 cr\u00e9er directement la cha\u00eene de caract\u00e8res <code>'Vous avez 18 ans'</code>.  <p>Quand on utilise l'addition <code>+</code> entre deux cha\u00eenes de caract\u00e8res, l'expression s'\u00e9value comme la concat\u00e9nation de celles-ci.</p> <pre><code>&gt;&gt;&gt; age = 18\n&gt;&gt;&gt; texte = \"Vous avez \" + str(age) + \" ans.\"\n&gt;&gt;&gt; print(texte)\nVous avez 18 ans.\n</code></pre> <p>Attention, il faut bien convertir l'entier <code>age</code> en cha\u00eene de caract\u00e8res !</p> <p>C'est d\u00e9sormais la m\u00e9thode standard (\u00e0 partir de la version 3.5 de Python) pour ins\u00e9rer des variables dans une cha\u00eene de caract\u00e8res :</p> <p></p><pre><code>&gt;&gt;&gt; age = 18\n&gt;&gt;&gt; texte = f\"Vous avez {age} ans.\"\n&gt;&gt;&gt; print(texte)\nVous avez 18 ans.\n</code></pre> La syntaxe est bien plus claire et courte ! Surtout si on utilise directement <code>print(f\"Vous avez {age} ans.\")</code>."},{"location":"6%20%E2%80%93%20Programmation/2variables/#demander-une-entree-a-lutilisateur","title":"Demander une entr\u00e9e \u00e0 l'utilisateur","text":"<p>Parfois, on voudrait demander \u00e0 l'utilisateur de nous fournir un nombre ou une saisie clavier. On utilise alors la fonction <code>input</code> :</p> <pre><code>&gt;&gt;&gt; input()\nje tape sur mon clavier\n'je tape sur mon clavier'\n</code></pre> <p>Elle renvoie toujours une cha\u00eene de caract\u00e8re, c'est pourquoi il ne faut pas oublier de convertir l'entr\u00e9e dans le format souhait\u00e9 :</p> <pre><code>&gt;&gt;&gt; age = int(input())\n18\n&gt;&gt;&gt; age\n18\n</code></pre> <p>On peut aussi passer en entr\u00e9e une cha\u00eene de caract\u00e8re :</p> <pre><code>&gt;&gt;&gt; age = int(input('Donne moi ton \u00e2ge : '))\nDonne moi ton \u00e2ge : 18\n&gt;&gt;&gt; age\n18\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/3if/","title":"L'instruction conditionnelle if","text":""},{"location":"6%20%E2%80%93%20Programmation/3if/#linstruction-conditionnelle-if","title":"L'instruction conditionnelle if","text":"<p>L'instruction conditionnelle <code>if</code> permet de d\u00e9cider si des instructions doivent \u00eatre ex\u00e9cut\u00e9es suivant une certaine condition.</p> <pre><code>if une_certaine_condition:\n    instruction1\n    instruction2\n    ...\n</code></pre> <p>Ainsi si la condition s'\u00e9value \u00e0 <code>True</code> (vrai), alors la suite d'instructions indent\u00e9es sera ex\u00e9cut\u00e9e. Sinon ce bloc sera ignor\u00e9.</p> <p>Un caract\u00e8re important</p> <p>Ne pas oublier le caract\u00e8re <code>:</code> \u00e0 la fin de la condition, juste avant l'indentation !</p>"},{"location":"6%20%E2%80%93%20Programmation/3if/#ecrire-une-condition-les-booleens","title":"Ecrire une condition : Les bool\u00e9ens","text":"<p>En math\u00e9matiques, une proposition est une phrase qui est soit vraie, soit fausse. Par exemple, la proposition \"1 plus 1 \u00e9gal 11\" est fausse, tandis que la proposition \"7 plus 2 \u00e9gal 9\" est vraie.</p> <p>En python, ces deux affirmations s'\u00e9criront <code>1 + 1 == 11</code> et <code>7 + 2 == 9</code> (notez bien le double signe \u00e9gal, le signe \u00e9gal simple \u00e9tant r\u00e9serv\u00e9 pour l'affectation). Ce sont des expressions que Python va \u00e9valuer :</p> <pre><code>&gt;&gt;&gt; 1 + 1 == 11\nFalse\n&gt;&gt;&gt; 7 + 2 == 9\nTrue\n&gt;&gt;&gt; type(False)\n&lt;class 'bool'&gt;\n</code></pre> <p>Elles nous renvoient une valeur bool\u00e9enne, c'est-\u00e0-dire de type <code>bool</code>. Les autres op\u00e9rateurs usuelles de comparaison sont disponibles :</p> Op\u00e9rateur Signification Symbole math\u00e9matiques <code>==</code> \"est \u00e9gale \u00e0\" \\(=\\) <code>!=</code> \"est diff\u00e9rent de\" \\(\\ne\\) <code>&lt;</code> \"est inf\u00e9rieur \u00e0\" \\(&lt;\\) <code>&lt;=</code> \"est inf\u00e9rieur ou \u00e9gale \u00e0\" \\(\\leq\\) <code>&gt;</code> \"est sup\u00e9rieur \u00e0\" \\(&gt;\\) <code>&gt;=</code> \"est sup\u00e9rieur ou \u00e9gale \u00e0\" \\(\\geq\\) <p>Retenir l'ordre des caract\u00e8res des op\u00e9rateurs de comparaison</p> <p>Parfois on s'emm\u00eale les pinceaux et on ne sait plus si c'est <code>&lt;=</code> ou bien <code>=&lt;</code>. On remarque en fait une certaine coh\u00e9rence entre <code>&lt;=</code>, <code>&gt;=</code>, et <code>!=</code>... le signe <code>=</code>est toujours \u00e0 la fin !</p> <p>Les op\u00e9rateurs de compraison pour d'autres types</p> <p>Parfois cela fait sens de vouloir tester si deux cha\u00eenes de caract\u00e8res sont identiques, et il est tout naturel d'utiliser l'op\u00e9rateur <code>==</code> dans ce cas :</p> <pre><code>&gt;&gt;&gt; devoir_paul = \"La r\u00e9ponse est 42.\"\n&gt;&gt;&gt; devoir_pierre = \"La r\u00e9ponse est 42.\"\n&gt;&gt;&gt; devoir_paul == devoir_pierre\nTrue\n</code></pre> <p>Parfois on veut v\u00e9rifier plusieurs conditions. On utilise les op\u00e9rateurs logiques <code>not</code>, <code>and</code> et <code>or</code> (respectivement non, et, ou). Quelques exemples d'utilisation :</p> <pre><code>&gt;&gt;&gt; not True\nFalse\n&gt;&gt;&gt; not False\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; moyenne = 15\n&gt;&gt;&gt; est_mention_AB = moyenne &gt;= 12 and moyenne &lt; 14\n&gt;&gt;&gt; est_mention_AB \nFalse\n</code></pre> <p></p><pre><code>&gt;&gt;&gt; couleur = 'rouge'\n&gt;&gt;&gt; est_primaire = couleur == 'rouge' or couleur == 'bleu' or couleur == 'vert'\n&gt;&gt;&gt; est_primaire\nTrue\n</code></pre> Voici la table de v\u00e9rit\u00e9 de ces trois op\u00e9rateurs logiques :  C1 C2 C1 and C2 C1 or C2 not C1 False  False  False  False  True  False   True  False  True  True  True  False  False  True  False  True  True  True  True  False"},{"location":"6%20%E2%80%93%20Programmation/3if/#exemples","title":"Exemples","text":"<p>Quelques codes \u00e0 essayer pour diff\u00e9rentes entr\u00e9es.</p>"},{"location":"6%20%E2%80%93%20Programmation/3if/#if","title":"<code>if</code>","text":"<pre><code>age = int(input('Donne moi ton age : '))\n\nif n &gt;= 18:\n    print(\"Tu es majeur !\")\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/3if/#else","title":"<code>else</code>","text":"<p>Le mot-clef <code>else</code> permet de faire le branchement \"sinon\". Il n'y a pas de condition \u00e0 mettre.</p> <pre><code>if une_certaine_condition:\n    # si la condition est \u00e9valu\u00e9e \u00e0 True, on ex\u00e9cute :\n    instruction1\n    instruction2\n    ...\nelse:\n    # si la condition est \u00e9valu\u00e9e \u00e0 False, on ex\u00e9cute :\n    instruction1\n    instruction2\n    ...\n</code></pre> <pre><code>age = int(input('Donne moi ton age : '))\n\nif n &gt;= 18:\n    print('Tu es majeur !')\nelse:\n    print('Tu es mineur !')\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/3if/#imbrication-if-else","title":"Imbrication <code>if else</code>","text":"<p>On peut s'amuser \u00e0 imbriquer des conditions dans des conditions.</p> <pre><code>moyenne = int(input('Ta moyenne au bac : '))\n\nif moyenne &lt; 8:\n    print(\"Coup dur. Rat\u00e9.\")\nelse:\n    if moyenne &lt; 10:\n        print(\"Rep\u00eachage.\")\n    else:\n        if moyenne &lt; 12:\n            print(\"Admis.\")\n        else:\n            if moyenne &lt; 14:\n                print(\"Mention AB.\")\n            else:\n                if moyenne &lt; 16:\n                    print(\"Mention B.\")\n                else:\n                    print(\"Mention TB.\")\n</code></pre> <p>La syntaxe peut \u00eatre rendue plus lisible grace au mot-clef <code>elif</code> (contraction de <code>else if</code>, \"sinon si\") :</p> <pre><code>moyenne = int(input('Ta moyenne au bac : '))\n\nif moyenne &lt; 8:\n    print(\"Coup dur. Rat\u00e9.\")\nelif moyenne &lt; 10:\n    print(\"Rep\u00eachage.\")\nelif moyenne &lt; 12:\n    print(\"Admis.\")\nelif moyenne &lt; 14:\n    print(\"Mention AB.\")\nelif moyenne &lt; 16:\n    print(\"Mention B.\")\nelse:\n    print(\"Mention TB.\")\n</code></pre> <p>On remarque bien l'aspect s\u00e9quentiel des tests.</p>"},{"location":"6%20%E2%80%93%20Programmation/4while/","title":"La boucle while","text":""},{"location":"6%20%E2%80%93%20Programmation/4while/#la-boucle-while","title":"La boucle while","text":"<p>Lorsqu'on souhaite r\u00e9p\u00e9ter une s\u00e9rie d'instructions plusieurs fois d'affil\u00e9, les boucles sont l'outil adpat\u00e9. Il en existe deux types en Python, la boucle born\u00e9e <code>for</code> (pour) et la boucle non-born\u00e9e <code>while</code> (tant que). Sa syntaxe est la suivante :</p> <p></p><pre><code>while condition_est_vraie:\n    instruction1\n    instruction2\n    instruction3\n    ...\n</code></pre> Tant que la condition est vraie, alors le bloc indent\u00e9 est ex\u00e9cut\u00e9e. La condition est v\u00e9rifi\u00e9e en entr\u00e9e de la boucle, les instructions peuvent \u00eatre donc totalement ignor\u00e9es. La condition est r\u00e9\u00e9valu\u00e9e \u00e0 la fin du bloc d'instructions indent\u00e9.  <p>Indentation</p> <p>C'est le d\u00e9calage par rapport \u00e0 la marge - qu'on appelle indentation - qui d\u00e9termine quelles sont les instructions \u00e0 r\u00e9p\u00e9ter !</p>"},{"location":"6%20%E2%80%93%20Programmation/4while/#quelques-exemples","title":"Quelques exemples","text":""},{"location":"6%20%E2%80%93%20Programmation/4while/#un-premier-exemple","title":"Un premier exemple","text":"<p>Si l'on ex\u00e9cute ce programme :</p> <pre><code>x = 1\nwhile x &lt; 10:\n    print('x a pour valeur', x)\n    x *= 2  # Syntaxe abr\u00e9g\u00e9e pour x = x * 2\nprint('Fin')\n</code></pre> <p>On obtient la sortie :</p> <pre><code>x a pour valeur 1\nx a pour valeur 2\nx a pour valeur 4\nx a pour valeur 8\nFin\n</code></pre> <p>Que vaut <code>x</code> \u00e0 la fin de la boucle ?</p>"},{"location":"6%20%E2%80%93%20Programmation/4while/#un-exemple-un-peu-utile","title":"Un exemple un peu utile","text":"<p>Combien de fois doit-on plier une feuille de papier pour que son \u00e9paisseur d\u00e9passe la hauteur de la Tour Eiffel (324 m) ?</p> <p>On suppose une feuille de papier classique, d'\u00e9paisseur de 0.1 mm. Plier la feuille en deux revient \u00e0 multiplier son \u00e9paisseur par deux.</p> <pre><code>epaisseur = 0.0001\nnombre_pliages = 0\n\nwhile epaisseur &lt; 324:\n    epaisseur = 2 * epaisseur\n    nombre_pliages += 1\n\nprint(\"Il faut\", nombre_pliages, \"pliages.\")\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/4while/#quelques-precautions","title":"Quelques pr\u00e9cautions","text":"<p>Boucle infinie</p> <p>La boucle while est une boucle non-born\u00e9e, elle peut donc \u00eatre infinie. Par exemple :</p> <pre><code>toto = 1\nwhile toto &lt; 10:\n    toto = 2\n    print('Encore un tour...')\nprint('Fin')\n</code></pre> <p>Pas d'entre\u00e9 dans la boucle</p> <p>Parfois la condition est fausse d\u00e8s le d\u00e9but, le code de la boucle sera donc ignor\u00e9e :</p> <pre><code>i = 1\nwhile i &gt;= 1:\n    i += 1\n    print('Ce texte ne sera jamais affich\u00e9.')\nprint('Fin')\n</code></pre> <p>C'est parfois un effet souhait\u00e9 dans certains algorithmes.</p> <p>Conseils</p> <ul> <li> <p>Toujours traduire while en \"tant que\" pour mieux raisonner sur la condition.</p> </li> <li> <p>Raisonner sur les bornes extr\u00eames de votre condition. Que vaudra ma condition au tout d\u00e9but (juste avant la boucle) ? Et \u00e0 la toute fin (derni\u00e8re it\u00e9ration) ?</p> </li> </ul>"},{"location":"6%20%E2%80%93%20Programmation/5for/","title":"La boucle for","text":""},{"location":"6%20%E2%80%93%20Programmation/5for/#la-boucle-for","title":"La boucle for","text":"<p> Activit\u00e9 Capytale </p> <p>Si \u00e9crire correctement la condition d'une boucle <code>while</code> est parfois difficile, la pluplart des boucles utilis\u00e9es en programmation sont finies. On utilisera dans ce cas la boucle <code>for</code> (pour en anglais).</p>"},{"location":"6%20%E2%80%93%20Programmation/5for/#la-notion-diterables-ou-ensembles-de-valeurs-enumerables","title":"La notion d'it\u00e9rables (ou ensembles de valeurs \u00e9num\u00e9rables)","text":"<p>La notion d'it\u00e9rables est une notion clef en programmation. Un it\u00e9rable d\u00e9signe un objet que l'on peut \u00e9num\u00e9rer, ou plut\u00f4t it\u00e9rer, c'est-\u00e0-dire le d\u00e9composer en une suite d'\u00e9l\u00e9ments. Quelques exemples concrets :</p> <ul> <li> <p>La chaine de caract\u00e8re <code>'pantoufle'</code> est it\u00e9rable : <code>'p'</code>, <code>'a'</code>, <code>'n'</code>, <code>'t'</code>, <code>'o'</code>, <code>'u'</code>, <code>'f'</code>, <code>'l'</code>, <code>'e'</code></p> </li> <li> <p>Le tableau (type <code>list</code>qu'on \u00e9tudiera plus tard) <code>[4, 3, 17]</code> est it\u00e9rable : <code>4</code>, <code>3</code>, <code>17</code> </p> </li> <li> <p>Le nombre <code>42</code> n'est pas it\u00e9rable, il n'est pas d\u00e9composable.</p> </li> </ul> <p>Il sera plus tard possible de d\u00e9finir vos propres \"types\" de variable et vos propres it\u00e9rateurs !</p>"},{"location":"6%20%E2%80%93%20Programmation/5for/#syntaxe","title":"Syntaxe","text":"<pre><code>for variable in it\u00e9rable:\n    instruction1\n    instruction2\n    instruction3\n    ...\n</code></pre> <p>Ont dit la variable <code>variable</code> parcourt l'ensemble <code>it\u00e9rable</code>, elle va \"capturer\" chacun des \u00e9lements de l'it\u00e9rable \u00e0 chaque tour de boucle !</p>"},{"location":"6%20%E2%80%93%20Programmation/5for/#exemples","title":"Exemples","text":"Cha\u00eene de caract\u00e8resTableau d'entiersSans utilisation de la variableRange <p>Programme :</p> <pre><code>for caractere in 'NSI':\n    print(caractere)\n</code></pre> <p>Sortie :</p> <pre><code>N\nS\nI\n</code></pre> <p>Programme :</p> <pre><code>for valeur in [1, 5, 17]:\n    print(valeur)\n</code></pre> <p>Sortie :</p> <pre><code>1\n5\n17\n</code></pre> <p>Programme :</p> <pre><code>for jenesersarien in [1, 2, 3, 4, 5, 6]:\n    print(\"OK\")\n</code></pre> <p>Sortie :</p> <pre><code>OK\nOK\nOK\nOK\nOK\nOK\nOK\n</code></pre> <p>Programme :</p> <pre><code>for i in range(7):\n    print(i)\n</code></pre> <p>Sortie :</p> <pre><code>0\n1\n2\n3\n4\n5\n6\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/5for/#precisions-sur-range","title":"Pr\u00e9cisions sur <code>range</code>","text":"<p>Il est tr\u00e8s fr\u00e9quent de vouloir une variable qui doit parcourir un ensemble de nombres entiers cons\u00e9cutifs. On y arrive plut\u00f4t facilement avec la boucle <code>while</code> :</p> <pre><code>i = 0\nwhile i &lt; 10:\n    print(i)\n    i += 1\n</code></pre> <p>Avec la boucle <code>for</code>, on pourrait arriver au m\u00eame r\u00e9sultat avec un tableau :</p> <pre><code>for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n    print(i)\n</code></pre> <p>Mais c'est extr\u00eamement p\u00e9nible \u00e0 \u00e9crire et peu g\u00e9n\u00e9rique. Heureusement, comme vous avez remarqu\u00e9 pr\u00e9cedemment, l'objet de type <code>range</code> permet de g\u00e9n\u00e9rer ce genre d'ensemble de nombres entiers cons\u00e9cutifs.</p> <p>G\u00e9n\u00e9rer une plage de nombres entiers</p> <p>L'objet <code>range(start, stop, step)</code> renvoie une \"s\u00e9quence\" de nombres entiers en partant de <code>start</code> (inclus) jusqu'\u00e0 <code>stop</code> (exclus), en incr\u00e9mentant de <code>step</code> (pas en anglais).</p> <ul> <li> <p><code>start</code> est facultatif et vaut 0 par d\u00e9faut.</p> </li> <li> <p><code>step</code> est facultatif et vaut 1 par d\u00e9faut. Mais si on veut pr\u00e9ciser <code>step</code>, alors il faut donner aussi <code>start</code>, m\u00eame si sa valeur est 0.</p> </li> </ul> <p>Un peu de d\u00e9tails</p> <p>On peut convertir un objet de ttype <code>range</code> vers un tableau (<code>list</code>) :</p> <pre><code>&gt;&gt;&gt; range(10)\nrange(0, 10)\n&gt;&gt;&gt; list(range(5))\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; list(range(1, 20 , 3))\n[1, 4, 7, 10, 13, 16, 19]\n</code></pre> <p><code>range</code> en fait va g\u00e9n\u00e9rer ces valeurs \u00e0 la vol\u00e9e, on \u00e9vite ainsi de stocker tout un tableau en m\u00e9moire. On parle aussi du concept plus large de lazy evaluation en anglais, ou \u00e9valuation parresseuse : on ne g\u00e9n\u00e8re le nombre qu'\u00e0 la demande.</p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/","title":"Les fonctions","text":""},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#les-fonctions","title":"Les fonctions","text":"<p> Activit\u00e9 Capytale \u00e0 rendre jusqu'au 12 octobre </p> <p>Une fonction est un bloc d'instruction qui ne s'ex\u00e9cute que lorsqu'il est appel\u00e9. Vous pouvez transmettre des donn\u00e9es, appel\u00e9es arguments, \u00e0 une fonction. Une fonction peut renvoyer des donn\u00e9es comme r\u00e9sultat.</p> <p>Une fonction en programmation est donc semblable au concept de fonctions en math\u00e9matiques.</p> <p>Vous avez d\u00e9j\u00e0 en fait manipul\u00e9 tout un tas de fonctions :  <code>print</code>, <code>input</code>, <code>int</code>, <code>type</code> etc.</p> <p>Exemple</p> <p>La fonction <code>bin</code> prend un nombre entier (type <code>int</code>) comme argument et renvoie son \u00e9criture binaire :</p> <pre><code>&gt;&gt;&gt; bin(42)\n'0b101010'\n</code></pre> <p>Une fonction permet donc d'organiser son code en le d\u00e9coupant en sous-programmes qui ont une t\u00e2che bien pr\u00e9cises. Non seulement cela vous permet de r\u00e9utiliser une fonction \u00e0 tout moment dans un programme, mais aussi de rendre votre code plus lisible, plus facile \u00e0 modifier et \u00e0 corriger.</p> <p>Tester les exemples</p> <p>Lire simplement les programmes ne suffit pas ! Copier le code dans une console Python, sur Pyzo, sur l'IDLE Python, sur un \u00e9diteur quelconque... \u00e9xecute-le et n'h\u00e9sitez pas \u00e0 le modifier pour comprendre ce qu'il se passe !</p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#syntaxe","title":"Syntaxe","text":""},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#creer-une-fonction","title":"Cr\u00e9er une fonction","text":"<p>En python, une fonction se cr\u00e9e avec le mot-clef <code>def</code> :</p> <pre><code>def ma_fonction():\n    print('Bonjour depuis une fonction :)')\n</code></pre> <p>Une fois le code de ma fonction \u00e9crit, il ne s'ex\u00e9cute pas directement. Pour cela, il faut explicitement l'appeler !</p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#appeler-une-fonction","title":"Appeler une fonction","text":"<p>Pour appeler une fonction dans le programme, on l'appelle gr\u00e2ce \u00e0 son nom suivi de sa liste d'arguments entre parenth\u00e8ses. Ici, la fonction ne demande aucun argument, ni ne renvoie de valeur.</p> <pre><code>def ma_fonction():\n    print('Bonjour depuis une fonction :)')\n\nma_fonction()\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#passer-des-arguments","title":"Passer des arguments","text":"<p>On peut transmettre des donn\u00e9es aux fonctions par le biais d'arguments. Les arguments sont sp\u00e9cifi\u00e9s apr\u00e8s le nom de la fonction, \u00e0 l'int\u00e9rieur des parenth\u00e8ses. Vous pouvez ajouter autant d'arguments que vous le souhaitez, il suffit de les s\u00e9parer par une virgule.</p> <pre><code>def saluer_dupont(prenom):\n    print(f'Bonjour {prenom} Dupont, \u00e7a va ?')\n\nsaluer_dupont('Jean')\nsaluer_dupont('Pierre')\nsaluer_dupont('Jacques')\n</code></pre> <p>Ici la fonction <code>saluer_dupont</code> capture un argument, une cha\u00eene de caract\u00e8re, dans une variable que l'on a nomm\u00e9e <code>prenom</code>. Lorsque la fonction est appel\u00e9e, par exemple <code>saluer_dupont('Jean')</code>, le param\u00e8tre <code>prenom</code> prend comme valeur <code>'Jean'</code> et le corps de la fonction est ensuite ex\u00e9cut\u00e9. </p> <p>D'un point de vue s\u00e9mantique</p> <ul> <li> <p><code>prenom</code> est un argument \u00e0 l'ext\u00e9rieur de la fonction, au moment de son appel. On dit qu'on lui passe l'argument.</p> </li> <li> <p><code>prenom</code> est un param\u00e8tre \u00e0 l'int\u00e9rieur de la fonction.</p> </li> </ul> <p>On peut passer plusieurs arguments :</p> <pre><code>def saluer(prenom, nom):\n    print(f'Bonjour {prenom} {nom}, \u00e7a va ?')\n\nsaluer('Arthur', 'Rouquan')\nsaluer('Leo\u0161', 'Jan\u00e1\u010dek')\nsaluer('Cho', 'Chikun')\n</code></pre> <p>Si vous ne passez qu'un argument, par exemple <code>saluer('Bob')</code>, vous aurez droit \u00e0 une erreur !</p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#renvoyerretourner-une-valeur","title":"Renvoyer/retourner une valeur","text":"<p>Renvoyer une valeur depuis une fonction se fait gr\u00e2ce au mot-clef <code>return</code> :</p> <pre><code>def double(nombre):\n    return nombre * 2\n\nprint(double(4))\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#syntaxe-generale","title":"Syntaxe g\u00e9n\u00e9rale","text":"<pre><code>def nom_de_la_fonction(argument1, argument2, ...):\n    # intructions\n    return valeur_renvoyee\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#quelques-exemples-demonstratifs","title":"Quelques exemples d\u00e9monstratifs","text":""},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#test-de-parite-lisibilite","title":"Test de parit\u00e9 -- Lisibilit\u00e9","text":"<p>Pour tester si un nombre est pair, on regarde si le reste de la division de celui-ci par 2 vaut 0. On peut d\u00e9finir une fonction <code>est_pair</code> qui nous renvoie <code>True</code> si le nombre est pair, <code>False</code> sinon :</p> <pre><code>def est_pair(nombre):\n    return nombre % 2 == 0\n</code></pre> <p>Ici, on nomme explicitement l'intention du code. Ces deux codes sont strictement identiques, mais le dernier est beaucoup plus clair !</p> <pre><code>if n % 2 == 0:\n    # blabla\n</code></pre> <pre><code>if est_pair(n):\n    # blabla\n</code></pre> <p>Qui plus est, il existe une mani\u00e8re plus rapide de tester la parit\u00e9 d'un entier. S'il faudrait alors modifier chacune des \u00e9galit\u00e9s dans le premier cas, dans le second cas il suffirait de modifier juste le corps de la fonction <code>est_pair</code>.</p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#somme-des-entiers-genericite","title":"Somme des entiers -- G\u00e9n\u00e9ricit\u00e9","text":"<p>Imaginons le programme qui calcule la somme des entiers naturels jusqu'\u00e0 1000 :</p> <pre><code>s = 0\nfor i in range(1, 1001):\n    s += i\nprint(s)\n</code></pre> <p>Transformons-le en une fonction. Un des principes clefs de la programmation est de g\u00e9n\u00e9raliser ses fonctions, de les rendre g\u00e9n\u00e9riques. Ici, l'objectif est de pouvoir utiliser cette fonction quand on en aura besoin, et \u00e9ventuellement pour calculer la somme des entiers jusqu'\u00e0 n'importe quelle valeur \\(n\\), pas n\u00e9cessairement 1000. Cette valeur \\(n\\) va \u00eatre le param\u00e8tre de la fonction. Et on ne veut plus afficher la somme, mais que cette somme soit renvoy\u00e9e par la fonction (pour l'affecter \u00e0 une variable, ou bien pour l'afficher ensuite).</p> <pre><code>def somme(n):\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s\n</code></pre> <p>Si l'on ex\u00e9cute :</p> <pre><code>&gt;&gt;&gt; somme(42)\n903\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#quelques-subtilites","title":"Quelques subtilit\u00e9s","text":""},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#sejecter-du-code-avec-return","title":"S'\u00e9jecter du code avec <code>return</code>","text":"<p>L'emploi du mot-clef <code>return</code> provoque une \u00e9jection du code : tout ce qui suit cette instruction ne sera pas ex\u00e9cut\u00e9.</p> <pre><code>def bidon(n):\n    if n % 2 == 0:\n        print(f'Ce texte est affich\u00e9 car {n} est pair.')\n        return 'Bravo !'\n    else:\n        return 'Mauvais choix de nombre...'\n    print('Ce texte ne sera jamais affich\u00e9.')\n\nprint(bidon(12))\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#respecter-lordre-des-arguments","title":"Respecter l'ordre des arguments","text":"<pre><code>def repete_lettres(chaine, nombre):\n    sortie = ''\n    for caractere in chaine:\n        sortie += nombre * caractere\n    return sortie\n</code></pre> <p>Il faut alors respecter l'ordre des param\u00e8tres lors de l'appel de la fonction :</p> <pre><code>&gt;&gt;&gt; repete_lettres('NSI', 3)\n'NNNSSSIII'\n&gt;&gt;&gt; repete_lettres(3, 'NSI')\nTraceback (most recent call last):\nFile \"&lt;pyshell&gt;\", line 1, in &lt;module&gt;\nFile \"\", line 3, in repete_lettres\n    for lettre in chaine:\nTypeError: 'int' object is not iterable\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#la-portee-des-variables","title":"La port\u00e9e des variables","text":""},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#variables-locales","title":"Variables locales","text":"<p>Les param\u00e8tres d'une fonction, ainsi que les variables d\u00e9clar\u00e9es \u00e0 l'int\u00e9rieur du corps de la fonction n'existent que dans le corps de cette fonction. Il n'est pas possible d'y faire r\u00e9f\u00e9rence depuis une autre instruction, et ce m\u00eame si la fonction a \u00e9t\u00e9 appel\u00e9e.</p> <pre><code>def aire_rectangle(longueur, largeur):\n    aire = longueur * largeur\n    return aire\n</code></pre> <pre><code>&gt;&gt;&gt; aire_rectangle(6, 3)\n18\n&gt;&gt;&gt; longueur\nNameError: name 'longueur' is not defined\n&gt;&gt;&gt; aire\nNameError: name 'aire' is not defined\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#variables-globales","title":"Variables globales","text":"<p>M\u00eame si c'est possible, il est fortement recommand\u00e9 de ne pas utiliser dans le corps d'une fonction des variables d\u00e9finies \u00e0 l'ext\u00e9rieur de cette fonction. En effet, si plusieurs fonctions agissent sur ces variables, le programme peut aboutir \u00e0 des valeurs ou des comportements non pr\u00e9vus. On parle alors d'effet de bord.</p> Pas bienBien <pre><code>a = 5\ndef fonction_idiote(n):\n    return n + a\n\nfonction_idiote(1)\n</code></pre> <pre><code>a = 5\ndef fonction_idiote(n, m):\n    return n + m\n\nfonction_idiote(1, a)\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#correction-des-exercices","title":"Correction des exercices","text":""},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#exercice-1-maximum","title":"Exercice 1 -- Maximum","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c9crire une fonction <code>maximum</code> qui prend deux nombres en param\u00e8tres et qui renvoie le plus grand des deux.</p> Programme attenduAvec une condition ternaire <pre><code>def maximum(x, y):\n    if x &gt; y:\n        return x\n    else:\n        return y\n</code></pre> <p>Exemple d'utilisation :</p> <pre><code>&gt;&gt;&gt; maximum(17, 38)\n38\n&gt;&gt;&gt; maximum(120, 2)\n120\n</code></pre> <pre><code>def maximum(x, y):\n    return x if x &gt; y else y\n</code></pre> <p>Op\u00e9rateur ternaire</p> <p>L'op\u00e9rateur ternaire permet de simplifier la syntaxe de certaines op\u00e9rations conditionnelles : </p><pre><code>on_true if condition else on_false\n</code></pre> Ici la valeur <code>on_true</code> est renvoy\u00e9e si <code>condition</code> est \u00e9valu\u00e9e \u00e0 <code>True</code>, <code>on_false</code> sinon."},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#exercice-2-maximum-entre-3-nombres","title":"Exercice 2 -- Maximum entre 3 nombres","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c9crire une fonction <code>maximum3</code> qui prend trois nombres en param\u00e8tres et qui renvoie le plus grand des trois.</p> Programme attenduEn r\u00e9utilisant la fonction pr\u00e9c\u00e9denteOu encore... <pre><code>def maximum3(x, y, z):\n    if x &gt; y and x &gt; z:\n        return x\n    elif y &gt; z:\n        return y\n    else:\n        return z\n</code></pre> <p>On effectue au plus 2 conditions ici. En effet, si <code>x &gt; y</code> est faux alors Python ne va \u00e9valuer le second membre de l'op\u00e9rateur <code>and</code>, \u00e0 savoir <code>x &gt; z</code> (cette optimisation est appel\u00e9e short-circuit evaluation en anglais), car la condition sera quoiqu'il arrive fausse.</p> <pre><code>def maximum3(x, y, z):\n    if x &gt; y and x &gt; z:\n        return x\n    else:\n        return maximum(y, z)\n</code></pre> <p>En utilisant une condition ternaire :</p> <pre><code>def maximum3(x, y, z):\n    return x if x &gt; y and x &gt; z else maximum(y, z)\n</code></pre> <pre><code>def maximum3(x, y, z):\n    return maximum(maximum(x, y), maximum(y, z))\n</code></pre> <p>Mais ce programme n'est pas efficient, on effectue toujours 3 comparaisons. En effet, chaque fontion <code>maximum</code> fera une comparaison.</p> <p>Analyse de vos solutions</p> <p>Une remarque concernant ce genre de solutions :</p> <pre><code>def maximum3(x, y, z):\n    if maximum(x, y) &gt; z:\n        return maximum(x, y)\n    else:\n        return z\n</code></pre> <p>Ici, <code>maximum(x, y)</code> est calcul\u00e9 une deuxi\u00e8me fois inutilement si la condition est vraie. Imaginez si la fonction <code>maximum</code> prenait 10 minutes \u00e0 s'ex\u00e9cuter... une solution serait de stocker le r\u00e9sultat de cette fonction :</p> <pre><code>def maximum3(x, y, z):\n    max_xy = maximum(x, y)\n    if max_xy &gt; z:\n        return max_xy\n    else:\n        return z\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#exercice-3-compter-le-nombre-de-voyelles","title":"Exercice 3 -- Compter le nombre de voyelles","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c9crire une fonction <code>nombre_voyelles</code> qui prend une cha\u00eene de caract\u00e8res (minuscules) en param\u00e8tre et renvoie le nombre de voyelles qu'elle contient.</p> Avec l'op\u00e9rateur d'appartenance <code>in</code>M\u00e9thode na\u00efveFlex <pre><code>def nombre_voyelles(chaine):\n    nombre_voyelles = 0\n    for caractere in chaine:\n        if caractere in 'aeiouy':\n            nombre_voyelles += 1\n    return nombre_voyelles\n</code></pre> <pre><code>def nombre_voyelles(chaine):\n    nombre_voyelles = 0\n    for l in chaine:\n        if l == 'a' or l == 'e' or l == 'i' or l == 'o' or l == 'u' or l == 'y':\n            nombre_voyelles += 1\n    return nombre_voyelles\n</code></pre> <pre><code>def nombre_voyelles(chaine):\n    return sum(1 for caractere in chaine if caractere in 'aeiouy')\n</code></pre> <p>Ici, on utilise une expression g\u00e9n\u00e9ratrice avec un filtre que l'on agr\u00e8ge avec <code>sum</code>. </p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#exercice-4-factorielle","title":"Exercice 4 -- Factorielle","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c9crire une fonction <code>factorielle</code> qui prend un nombre \\(n\\) en param\u00e8tre et renvoie \\(\ud835\udc5b!\\), c'est-\u00e0-dire le produit des termes de 1 \u00e0 \\(n\\)  (inclus) : $$     n! = \\prod_{i=1}^n i $$</p> Programme attenduVersion de LucasVersion r\u00e9cursive <pre><code>def factorielle(n):\n    produit = 1\n    for terme in range(2, n + 1):\n        produit *= terme\n    return produit\n</code></pre> <pre><code>def factorielle(n):\n    for terme in range(2, n):\n        n *= terme\n    return n\n</code></pre> <pre><code>def factorielle(n):\n    return 1 if n == 1 else n * factorielle(n - 1)\n</code></pre> <p>Une fonction est dites r\u00e9cursive si elle s'appelle elle-m\u00eame. Ici notre condition d'arr\u00eat de la r\u00e9cursion est le cas de base \\(n = 1\\).</p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#exercice-5-leet-speak","title":"Exercice 5 -- Leet Speak","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c9crire une fonction <code>leet_speak</code> qui prend en param\u00e8tre une chaine de caract\u00e8res (en minuscules) et qui renvoie sa traduction en \u00ab Leet Speak \u00bb. C'est-\u00e0-dire la m\u00eame cha\u00eene de caract\u00e8res en ayant remplac\u00e9 :</p> <ul> <li> <p>les a par des 4</p> </li> <li> <p>les e par des 3</p> </li> <li> <p>les s par des 5</p> </li> <li> <p>les i par des 1</p> </li> <li> <p>les o par des 0</p> </li> </ul> Programme attenduAvec un dictionnaireFlex <pre><code>def leet_speak(chaine):\n    resultat = ''\n    for caractere in chaine:\n        if caractere == 'a':\n            resultat += '4'\n        elif caractere == 'e':\n            resultat += '3'\n        elif caractere == 's':\n            resultat += '5'\n        elif caractere == 'i':\n            resultat += '1'\n        elif caractere == 'o':\n            resultat += '0'\n        else:\n            resultat += caractere\n    return resultat\n</code></pre> <pre><code>def leet_speak(chaine):\n    table = {\n        'a': '4',\n        'e': '3',\n        's': '5',\n        'i': '1',\n        'o': '0'\n    }\n    resultat = ''\n    for caractere in chaine:\n        if caractere in table:\n            resultat += table[caractere]\n        else:\n            resultat += caractere\n    return resultat\n</code></pre> <pre><code>def leet_speak(chaine):\n    table = {'a': '4', 'e': '3', 's': '5', 'i': '1', 'o': '0'}\n    return ''.join([table[l] if c in table else c for c in chaine])\n</code></pre> <p>La variable <code>table</code> contient un dictionnaire, c'est une structure de donn\u00e9es qui permet d'associer des cl\u00e9s avec des valeurs. Par exemple la cl\u00e9 <code>'a'</code> est associ\u00e9e \u00e0 la valeur <code>'4'</code>. Ainsi <code>table['a']</code> renvoie la valeur <code>'4'</code>. La seconde ligne utilise une compr\u00e9hension de liste pour g\u00e9n\u00e9rer une liste de caract\u00e8res que l'on transforme en une cha\u00eene de caract\u00e8res avec la m\u00e9thode <code>join</code>.</p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#exercice-6-test-de-primalite","title":"Exercice 6 -- Test de primalit\u00e9","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c9crire une fonction <code>est_premier</code> qui prend un entier positif en param\u00e8tre et renvoie <code>True</code> si ce nombre est premier, <code>False</code> sinon.</p> Programme attenduFlex <pre><code>def est_premier(n):\n    if n &lt;= 1: # cas de base\n        return False\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n</code></pre> <pre><code>def est_premier(n):\n    return False if n &lt;= 1 else all(n % i != 0 for i in range(2, n))\n</code></pre> <p>La fonction <code>all</code> renvoie <code>True</code> si tous les \u00e9l\u00e9ments de l'it\u00e9rable (ici une expression g\u00e9n\u00e9ratrice) donn\u00e9e sont <code>True</code>. Sinon, elle renvoie <code>False</code>. On utilise ensuite une condition ternaire pour s\u00e9parer le cas de base du cas g\u00e9n\u00e9ral.</p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#exercice-7-un-nombre-presque-parfait","title":"Exercice 7 -- Un nombre presque parfait","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c9crire une fonction <code>est_parfait</code> qui prend un nombre en param\u00e8tre et renvoie <code>True</code> si ce nombre est parfait, <code>False</code> sinon.</p> <p>D\u00e9finition</p> <p>Un nombre est parfait si la moiti\u00e9 de la somme de ses diviseurs. Ainsi 6 est un nombre parfait car ses diviseurs entiers sont 1, 2, 3 et 6, et il v\u00e9rifie bien 6 = (1 + 2 + 3 + 6) / 2.</p> Programme attenduFlex <pre><code>def est_parfait(n):\n    somme_diviseurs = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            somme_diviseurs += i\n    return n == somme_diviseurs / 2\n</code></pre> <pre><code>def est_parfait(n):\n    return n == sum(i for i in range(1, n) if n % i == 0)\n</code></pre>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#exercice-8-base-decimal-vers-base-binaire","title":"Exercice 8 -- Base d\u00e9cimal vers base binaire","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c9crire une fonction <code>binaire</code> qui prend un nombre en base 10 en param\u00e8tre et renvoie sa repr\u00e9sentation binaire sous forme d'une cha\u00eene de caract\u00e8res.</p> Programme attenduAvec une listeM\u00e9thode des soustractionsM\u00e9thode des soustractions optimis\u00e9eComparaison <pre><code>def binaire(n):\n    if n == 0: # cas de base\n        return '0'\n\n    resultat = ''\n    while n != 0:\n        reste = n % 2\n        resultat = str(reste) + resultat\n        n //= 2\n    return resultat\n</code></pre> <p>On \"traduit\" l'algorithme des divisions successives par 2 que l'on a vu en cours en lignes de code Python. A chaque it\u00e9ration on concat\u00e8ne le reste et notre r\u00e9sultat dans le bon sens.</p> <pre><code>def binaire(n):\n    if n == 0:\n        return '0'\n\n    bits = []\n    while n != 0:\n        bits.append(str(n % 2))\n        n //= 2\n    return ''.join(reversed(bits))\n</code></pre> <p>On ajoute au fur et \u00e0 mesure les bits trouv\u00e9s dans une liste. On renverse les \u00e9lements avec la fonction <code>reversed</code> (ou avec la m\u00e9thode <code>.reverse()</code>) puis on convertit notre liste de caract\u00e8res en une cha\u00eene de caract\u00e8res avec la m\u00e9thode <code>.join</code> (ou avec une simple boucle for).</p> <pre><code>def plus_grande_puissance_2(n):\n    p = 0\n    while 2 ** p &lt;= n:\n        p += 1\n    return p - 1\n\n\ndef binaire(n):\n    if n == 0:\n        return '0'\n\n    puissances = []\n    while n != 0:\n        p = plus_grande_puissance_2(n)\n        puissances.append(p)\n        n -= 2 ** p\n\n    bits = ['0'] * (puissances[0] + 1)\n    for p in puissances:\n        bits[p] = '1'\n    return ''.join(reversed(bits))\n</code></pre> <p>Une premi\u00e8re approche na\u00efve. A chaque it\u00e9ration, on d\u00e9termine la plus grande puissance de 2 <code>p</code> et on la soustrait de notre nomnbre <code>n</code>. Une fois toutes les puissances trouv\u00e9es, on d\u00e9termine le nombre binaire associ\u00e9 \u00e0 ces puissances.</p> <pre><code>def plus_grande_puissance_2(n):\n    p = 0\n    while 1 &lt;&lt; p &lt;= n:\n        p += 1\n    return p - 1\n\n\ndef binaire(n):\n    if n == 0:\n        return '0'\n\n    p = plus_grande_puissance_2(n)\n    n -= 1 &lt;&lt; p\n    bits = ['0'] * p + ['1']\n\n    while n != 0:\n        p -= 1\n        while 1 &lt;&lt; p &gt; n:\n            p -= 1\n        n -= 1 &lt;&lt; p\n        bits[p] = '1'\n\n    bits.reverse()\n    return ''.join(bits)\n</code></pre> <p>L'op\u00e9rateur shift <code>x &lt;&lt; y</code> permet de d\u00e9caler le nombre <code>x</code> de <code>y</code> bits vers la gauche. Ainsi, <code>2 ** p</code> est \u00e9quivalent \u00e0 <code>1 &lt;&lt; p</code>, mais empiriquement plus rapide. Cette fois-ci on calcule la plus grande puissance de 2 une seule fois, puis dans la boucle principale on d\u00e9cr\u00e9mente cette puissance au fur et \u00e0 mesure.</p> <p></p>"},{"location":"6%20%E2%80%93%20Programmation/6fonctions/#exercice-9-base-decimale-vers-base-b","title":"Exercice 9 -- Base d\u00e9cimale vers base \\(b\\)","text":"<p>\u00c9nonc\u00e9</p> <p>\u00c9crire fonction <code>convertir</code> qui prend un nombre  \ud835\udc5b  en base 10 et un nombre \\(\ud835\udc4f \\leq 16\\) en param\u00e8tres et renvoie la repr\u00e9sentation du nombre \\(n\\) en base \\(b\\) sous forme d'une cha\u00eene de caract\u00e8res.</p> Programme attenduPlus malin <pre><code>def convertir(n, base):\n    if n == 0:\n        return '0'\n\n    resultat = ''\n    while n != 0:\n        reste = n % base\n\n        if reste == 10:\n            chiffre = 'A'\n        elif reste == 11:\n            chiffre = 'B'\n        elif reste == 12:\n            chiffre = 'C'\n        elif reste == 13:\n            chiffre = 'D'\n        elif reste == 14:\n            chiffre = 'E'\n        elif reste == 15:\n            chiffre = 'F'\n        else:\n            chiffre = str(reste)\n\n        resultat = chiffre + resultat\n        n //= base\n\n    return resultat\n</code></pre> <pre><code>def convertir(n, base):\n    resultat = ''\n    while n != 0:\n        resultat = '0123456789ABCDEF'[n % base] + resultat\n        n //= base\n    return resultat or '0'\n</code></pre> <p>Ici, on utilise le fait qu'une cha\u00eene de caract\u00e8res est en fait un tableau de caract\u00e8res (immutable). L'op\u00e9rateur d'acc\u00e8s \u00e0 l'index <code>[]</code> fonctionne ! Petit tricks \u00e0 la fin avec l'op\u00e9rateur Elvis... je laisse votre curiosit\u00e9 vous guider sur Wikip\u00e9dia ;) <code>return resultat or '0'</code> est \u00e9quivalent \u00e0 <code>return resultat if resultat != '' else '0'</code>. Il faut croire que l'op\u00e9rateur logique <code>or</code> ne renvoie pas que des bool\u00e9ens...</p>"},{"location":"8%20%E2%80%93%20D%C3%A9fi/1index/","title":"D\u00e9fis","text":""},{"location":"8%20%E2%80%93%20D%C3%A9fi/1index/#defis","title":"D\u00e9fis","text":"<p>Pour ce dernier mois de juin, je vous propose de r\u00e9aliser un petit projet en groupe ou individuellement. Si cette derni\u00e8re option </p> <p>Proverbe cor\u00e9en</p> <p>M\u00eame une feuille de papier est plus l\u00e9g\u00e8re si on la porte \u00e0 deux. </p>"},{"location":"8%20%E2%80%93%20D%C3%A9fi/1index/#quelques-idees-de-projet","title":"Quelques id\u00e9es de projet","text":"<p>Quelques id\u00e9es en vrac ordonn\u00e9es plus ou moins par ordre de difficult\u00e9 :</p> <ul> <li>Le jeu du Morpion \u00e0 deux joueurs humains</li> <li>Le puissance 4 \u00e0 deux joueurs humains</li> <li>Le jeu du d\u00e9mineur</li> <li>Le jeu des allumettes en assembleur</li> <li>Le jeu du Super Simon avec une carte Arduino</li> <li>Un automate cellulaire (type Jeu de la vie de Conway, Fourmi de Langton etc.)</li> <li>Un site web g\u00e9n\u00e9rant un \u00e9quipement al\u00e9atoire pour League of Legends, \u00e0 l'instar du site ultimate-bravery</li> <li>Le jeu de Hex de John Nash</li> <li>Le jeu de Go \u00e0 deux joueurs humains</li> <li>Un g\u00e9n\u00e9rateur et solveur de labyrinthe</li> <li>Le jeu 2048</li> <li>Un jeu de Snake</li> <li>Le jeu du Morpion avec IA (algorithme MinMax)</li> <li>Un algorithme pour d\u00e9terminer le meilleur mot au jeu du Motus (ou Wordle)</li> <li>Un algorithme glouton type descente de gradient pour r\u00e9soudre le probl\u00e8me du voyageur de commerce</li> </ul> <p>Si le projet n\u00e9cessite une interface graphique, je vous recommande la biblioth\u00e8que pyxel ou pygame.</p>"}]}